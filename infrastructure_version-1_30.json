[ {
  "active" : true,
  "code" : "infrastructure",
  "description" : "Infrastructure management",
  "license" : "GPL",
  "currentVersion" : "1.30",
  "meveoVersionBase" : "6.9.0",
  "transient" : true,
  "inDraft" : true,
  "codeOnly" : false,
  "moduleItems" : [ {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.meveo.gandi.CreateDnsRecord",
      "description" : "Create DNS record",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.gandi;\r\n\r\nimport java.time.Instant;\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\n\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.DomainName;\r\nimport org.meveo.model.customEntities.DnsRecord;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.persistence.CEIUtils;\r\n\r\n\r\npublic class CreateDnsRecord extends Script {\r\n\t\r\n    private static final Logger log = LoggerFactory.getLogger(ListDomains.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n\tstatic final private String GANDI_URL = \"api.gandi.net/v5/\";\r\n\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tString action= (String)parameters.get(\"CONTEXT_ACTION\");\r\n\t\tDnsRecord record =  CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance)parameters.get(\"CONTEXT_ENTITY\"), DnsRecord.class);\r\n\t\tif(record.getDomainName()==null || record.getRecordType()==null || record.getName()==null \r\n\t\t|| record.getName().isEmpty() || record.getValue()==null || record.getValue()==null){\r\n\t\t\tthrow new BusinessException(\"invalid record\");\r\n\t\t}\r\n\t\tDomainName domainName = record.getDomainName();\r\n\t\tlog.info(\"action:{}, domain name uuid:{}\",action,domainName.getUuid());\r\n\t\tCredential credential  = CredentialHelperService.getCredential(GANDI_URL,crossStorageApi,defaultRepo);\r\n      \tif(credential==null){\r\n        \tthrow new BusinessException(\"No credential found for \"+GANDI_URL);\r\n      \t} else {\r\n        \tlog.info(\"using credential {} with username {}\",credential.getUuid(),credential.getUsername());\r\n      \t}\r\n\t\tClient client = ClientBuilder.newClient();\r\n\t\tclient.register(new CredentialHelperService.LoggingFilter());\r\n\t\tWebTarget target = client.target(\"https://api.gandi.net/v5/livedns/domains/\"+domainName.getNormedName()+\"/records\");\r\n\t\tString resp = \"{\\n\"\r\n\t\t+\"\\\"rrset_type\\\": \\\"\"+record.getRecordType()+\"\\\",\\n\"\r\n\t\t+\"\\\"rrset_name\\\": \\\"\"+record.getName()+\"\\\",\\n\"\r\n\t\t+\"\\\"rrset_values\\\": [\\\"\"+record.getValue()+\"\\\"]\\n\"\r\n\t\t+\"}\";\r\n\t\t\r\n\t\tResponse response = null;\r\n\t\tif(record.getLastSyncDate()==null){\r\n\t\t\tresponse = CredentialHelperService.setCredential(target.request(),credential).post(Entity.json(resp));\r\n\t\t} else {\r\n\t\t\tresponse = CredentialHelperService.setCredential(target.request(),credential).put(Entity.json(\"{\\\"items\\\":[\"+resp+\"]}\"));\r\n\t\t}\r\n\t\tString value = response.readEntity(String.class);\r\n\t\tlog.info(\"response  :\" + value);\r\n\t\tlog.debug(\"response status : {}\", response.getStatus());\r\n\t\tparameters.put(\"RESULT_GUI_MESSAGE\", \"Status: \"+response.getStatus()+\", response:\"+value);\r\n\t\tif(response.getStatus()==201){\r\n\t\t\trecord.setLastSyncDate(Instant.now());\r\n\t\t\ttry {\r\n\t\t\t\tcrossStorageApi.createOrUpdate(defaultRepo, record);\r\n\t\t\t} catch (Exception ex) {\r\n\t\t\t\tlog.error(\"error updating lastSyncDate record {} :{}\", record.getUuid(), ex.getMessage());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ {
        "active" : true,
        "code" : "org.meveo.credentials.CredentialHelperService",
        "description" : "Helper function to build request with credentials",
        "inputs" : [ ],
        "outputs" : [ ],
        "generateOutputs" : false,
        "type" : "JAVA",
        "transactionType" : "SAME",
        "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
        "executionRoles" : [ ],
        "sourcingRoles" : [ ],
        "mavenDependencies" : [ ],
        "importScriptInstances" : [ ]
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "Server",
      "name" : "Server",
      "description" : "Server ",
      "crudEventListenerScript" : "org.meveo.script.ScalewayServerCreationScript",
      "customEntityCategoryCode" : "INFRA",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "creationDate",
        "description" : "Creation date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_Server",
        "appliesTo" : "CE_Server",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:9",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "domainName",
        "description" : "Domain name",
        "fieldType" : "STRING",
        "accountLevel" : "CE_Server",
        "appliesTo" : "CE_Server",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:7",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "image",
        "description" : "Image",
        "fieldType" : "STRING",
        "accountLevel" : "CE_Server",
        "appliesTo" : "CE_Server",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "instanceName",
        "description" : "Instance name",
        "fieldType" : "STRING",
        "accountLevel" : "CE_Server",
        "appliesTo" : "CE_Server",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "lastUpdate",
        "description" : "Last update",
        "fieldType" : "DATE",
        "accountLevel" : "CE_Server",
        "appliesTo" : "CE_Server",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:10",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "organization",
        "description" : "Organization",
        "fieldType" : "STRING",
        "accountLevel" : "CE_Server",
        "appliesTo" : "CE_Server",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "provider",
        "description" : "Server provider",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_Server",
        "appliesTo" : "CE_Server",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - ServiceProvider",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "entityClazzCetCode" : "ServiceProvider",
        "matrixColumns" : [ ]
      }, {
        "code" : "publicIp",
        "description" : "Public IP",
        "fieldType" : "STRING",
        "accountLevel" : "CE_Server",
        "appliesTo" : "CE_Server",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 100,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:6",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "serverType",
        "description" : "Type",
        "fieldType" : "STRING",
        "accountLevel" : "CE_Server",
        "appliesTo" : "CE_Server",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "status",
        "description" : "Status",
        "fieldType" : "STRING",
        "accountLevel" : "CE_Server",
        "appliesTo" : "CE_Server",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:11",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "volumeSize",
        "description" : "Main volume size",
        "fieldType" : "STRING",
        "accountLevel" : "CE_Server",
        "appliesTo" : "CE_Server",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 20,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:8",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "zone",
        "description" : "Zone",
        "fieldType" : "STRING",
        "accountLevel" : "CE_Server",
        "appliesTo" : "CE_Server",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:5",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ {
        "code" : "dockerpull",
        "description" : "Execute Dockerpull",
        "appliesTo" : "CE_Server",
        "label" : "Dockerpull",
        "script" : "org.meveo.script.SergentCommand",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.meveo.script.ScalewayServerCreationScript",
      "description" : "create scaleway server",
      "inputs" : [ ],
      "outputs" : [ {
        "name" : "entityClass",
        "type" : "Class<Server>",
        "description" : null
      } ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.script;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.model.customEntities.Server;\r\nimport org.meveo.model.customEntities.CrudEventListenerScript;\r\n\r\npublic class ScalewayServerCreationScript extends Script implements CrudEventListenerScript<Server> {\r\n    private static final Logger log = LoggerFactory.getLogger(ScalewayServerCreationScript.class);\r\n\r\n\tprivate CrossStorageApi crossStorageApi;\r\n\tprivate RepositoryService rService;\r\n\r\n\tpublic ScalewayServerCreationScript() {\r\n\t\tcrossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\t\trService = getCDIBean(RepositoryService.class);\r\n\t}\r\n\r\n\tpublic Class<Server> getEntityClass() {\r\n\t\treturn Server.class;\r\n\t}\r\n\r\n\t/**\r\n\t * Called just before entity persistence\r\n\t * \r\n\t * @param entity entity being persisted\r\n\t */\r\n\tpublic void prePersist(Server entity) {\r\n\t\tlog.info(\"prePersist \"+entity);\r\n\t}\r\n\r\n\t/**\r\n\t * Called just before entity update\r\n\t * \r\n\t * @param entity entity being updated\r\n\t */\r\n\tpublic void preUpdate(Server entity) {\r\n\t\tlog.info(\"preUpdate \"+entity);\r\n\t}\r\n\r\n\t/**\r\n\t * Called just before entity removal\r\n\t * \r\n\t * @param entity entity being removed\r\n\t */\r\n\tpublic void preRemove(Server entity) {\r\n\t\tlog.info(\"preRemove \"+entity);\r\n\t}\r\n\r\n\t/**\r\n\t * Called just after entity persistence\r\n\t * \r\n\t * @param entity persisted entity\r\n\t */\r\n\tpublic void postPersist(Server entity) {\r\n\t\tlog.info(\"postPersist \"+entity);\r\n\t}\r\n\r\n\t/**\r\n\t * Called just after entity update\r\n\t * \r\n\t * @param entity updated entity\r\n\t */\r\n\tpublic void postUpdate(Server entity) {\r\n\t\tlog.info(\"postUpdate \"+entity);\r\n\t}\r\n\r\n\t/**\r\n\t * Called just after entity removal\r\n\t * \r\n\t * @param entity removed entity\r\n\t */\r\n\tpublic void postRemove(Server entity) {\r\n\t\tlog.info(\"postRemove \"+entity);\r\n\t}\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "ServiceProvider",
      "name" : "Server provider",
      "description" : "Server provider",
      "customEntityCategoryCode" : "INFRA",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "apiBaseUrl",
        "description" : "API base URL",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ServiceProvider",
        "appliesTo" : "CE_ServiceProvider",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 1000,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Configuration:0;field:5",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "code",
        "description" : "Code",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ServiceProvider",
        "appliesTo" : "CE_ServiceProvider",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Configuration:0;field:0",
        "identifier" : true,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "description",
        "description" : "Description",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ServiceProvider",
        "appliesTo" : "CE_ServiceProvider",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Configuration:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "image",
        "description" : "Images",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ServiceProvider",
        "appliesTo" : "CE_ServiceProvider",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "MAP",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server Types:2;field:1",
        "identifier" : false,
        "mapKeyType" : "STRING",
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "organization",
        "description" : "Organization",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ServiceProvider",
        "appliesTo" : "CE_ServiceProvider",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "MAP",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Configuration:0;field:2",
        "identifier" : false,
        "mapKeyType" : "STRING",
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "serverType",
        "description" : "Type",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ServiceProvider",
        "appliesTo" : "CE_ServiceProvider",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "MAP",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server Types:2;field:0",
        "identifier" : false,
        "mapKeyType" : "STRING",
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "status",
        "description" : "Status",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ServiceProvider",
        "appliesTo" : "CE_ServiceProvider",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "LIST",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Configuration:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "zone",
        "description" : "Zone",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ServiceProvider",
        "appliesTo" : "CE_ServiceProvider",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "MAP",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Configuration:0;field:3",
        "identifier" : false,
        "mapKeyType" : "STRING",
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ {
        "code" : "listServers",
        "description" : "List servers",
        "appliesTo" : "CE_ServiceProvider",
        "applicableOnEl" : "#{entity.getCfValuesAsValues().get(\"code\") eq 'SCALEWAY'}",
        "label" : "List Servers",
        "script" : "org.meveo.script.ListScalewayServersScript",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "ApplicationInstance",
      "name" : "Apps",
      "description" : "Application instance",
      "customEntityCategoryCode" : "INFRA",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "application",
        "description" : "name of the application deployed",
        "fieldType" : "LIST",
        "accountLevel" : "CE_ApplicationInstance",
        "appliesTo" : "CE_ApplicationInstance",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : {
          "API_V1" : "API V1",
          "IC" : "IC",
          "KC" : "Keycloak"
        },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Apps:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "investigationTypes",
        "description" : "Investigation Types",
        "fieldType" : "LIST",
        "accountLevel" : "CE_ApplicationInstance",
        "appliesTo" : "CE_ApplicationInstance",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "LIST",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : {
          "Agent" : "Agent",
          "BrandAndProductDetection" : "B&P Detection",
          "BrandAndProductMonitoring" : "B&P Monitoring",
          "IllicitWebsite" : "Illicit Website",
          "Monitoring" : "Monitoring",
          "Product" : "Product",
          "ScanWebsite" : "Scan Website"
        },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Apps:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "isStartServiceSource",
        "description" : "Is a source of Start Service definition",
        "fieldType" : "BOOLEAN",
        "accountLevel" : "CE_ApplicationInstance",
        "appliesTo" : "CE_ApplicationInstance",
        "defaultValue" : "false",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Apps:0;field:5",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "port",
        "description" : "port",
        "fieldType" : "LONG",
        "accountLevel" : "CE_ApplicationInstance",
        "appliesTo" : "CE_ApplicationInstance",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Apps:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "repoName",
        "description" : "name repository",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ApplicationInstance",
        "appliesTo" : "CE_ApplicationInstance",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Apps:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "urlDomain",
        "description" : "url domain",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ApplicationInstance",
        "appliesTo" : "CE_ApplicationInstance",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Apps:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "ServerAction",
      "name" : "Action on server",
      "description" : "Action on server",
      "customEntityCategoryCode" : "INFRA",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "action",
        "description" : "Action",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ServerAction",
        "appliesTo" : "CE_ServerAction",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Action on server:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "creationDate",
        "description" : "Creation date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_ServerAction",
        "appliesTo" : "CE_ServerAction",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Action on server:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "elapsedTimeMs",
        "description" : "Elapsed time ms",
        "fieldType" : "LONG",
        "accountLevel" : "CE_ServerAction",
        "appliesTo" : "CE_ServerAction",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Action on server:0;field:5",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "response",
        "description" : "Response",
        "fieldType" : "LONG_TEXT",
        "accountLevel" : "CE_ServerAction",
        "appliesTo" : "CE_ServerAction",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Action on server:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "responseStatus",
        "description" : "Response status",
        "fieldType" : "LIST",
        "accountLevel" : "CE_ServerAction",
        "appliesTo" : "CE_ServerAction",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : {
          "ERROR" : "Error",
          "OK" : "Ok",
          "TIMEOUT" : "Timeout"
        },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Action on server:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "server",
        "description" : "Server",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_ServerAction",
        "appliesTo" : "CE_ServerAction",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - Server",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Action on server:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "entityClazzCetCode" : "Server",
        "matrixColumns" : [ ]
      } ],
      "actions" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "DomainName",
      "name" : "Domain name",
      "description" : "Domain Name",
      "customEntityCategoryCode" : "INFRA",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "autoRenew",
        "description" : "Auto renew",
        "fieldType" : "BOOLEAN",
        "accountLevel" : "CE_DomainName",
        "appliesTo" : "CE_DomainName",
        "defaultValue" : "false",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Domain name:0;field:8",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "creationDate",
        "description" : "Creation date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_DomainName",
        "appliesTo" : "CE_DomainName",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Domain name:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "lastUpdate",
        "description" : "Last update",
        "fieldType" : "DATE",
        "accountLevel" : "CE_DomainName",
        "appliesTo" : "CE_DomainName",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Domain name:0;field:6",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "name",
        "description" : "domain name",
        "fieldType" : "STRING",
        "accountLevel" : "CE_DomainName",
        "appliesTo" : "CE_DomainName",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Domain name:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "normedName",
        "description" : "Normalized name (ASCII)",
        "fieldType" : "STRING",
        "accountLevel" : "CE_DomainName",
        "appliesTo" : "CE_DomainName",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Domain name:0;field:7",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "registar",
        "description" : "Registar",
        "fieldType" : "LIST",
        "accountLevel" : "CE_DomainName",
        "appliesTo" : "CE_DomainName",
        "defaultValue" : "GANDI",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : {
          "GANDI" : "Gandi"
        },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Domain name:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "registrationDate",
        "description" : "Registration date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_DomainName",
        "appliesTo" : "CE_DomainName",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Domain name:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "registrationEndDate",
        "description" : "Registration end date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_DomainName",
        "appliesTo" : "CE_DomainName",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Domain name:0;field:5",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "tld",
        "description" : "Tld",
        "fieldType" : "STRING",
        "accountLevel" : "CE_DomainName",
        "appliesTo" : "CE_DomainName",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 20,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Domain name:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ {
        "code" : "listDnsRecords",
        "description" : "List DNS Records",
        "appliesTo" : "CE_DomainName",
        "label" : "List DNS Records",
        "script" : "org.meveo.gandi.ListDnsRecords",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      }, {
        "code" : "listGandiDomains",
        "description" : "List Gandi Domains",
        "appliesTo" : "CE_DomainName",
        "label" : "List from Gandi",
        "script" : "org.meveo.gandi.ListDomains",
        "applicableToEntityList" : true,
        "applicableToEntityInstance" : false
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.meveo.gandi.ListDnsRecords",
      "description" : "List DNS records",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.gandi;\r\n\r\nimport java.util.Map;\r\nimport java.time.OffsetDateTime;\r\nimport java.time.Instant;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport com.google.gson.*;\r\n\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.DomainName;\r\nimport org.meveo.model.customEntities.DnsRecord;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\n\r\npublic class ListDnsRecords extends Script {\r\n\r\n\t\r\n    private static final Logger log = LoggerFactory.getLogger(ListDomains.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n\tstatic final private String GANDI_URL = \"api.gandi.net/v5/\";\r\n\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tDomainName domainName =  CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance)parameters.get(\"CONTEXT_ENTITY\"), DomainName.class);\r\n\t\tif(domainName.getNormedName()==null || domainName.getNormedName().isEmpty()){\r\n\t\t\tthrow new BusinessException(\"invalid normalized domain name\");\r\n\t\t}\r\n\t\tCredential credential  = CredentialHelperService.getCredential(GANDI_URL,crossStorageApi,defaultRepo);\r\n      \tif(credential==null){\r\n        \tthrow new BusinessException(\"No credential found for \"+GANDI_URL);\r\n      \t} else {\r\n        \tlog.info(\"using credential {} with username {}\",credential.getUuid(),credential.getUsername());\r\n      \t}\r\n\t\tClient client = ClientBuilder.newClient();\r\n\t\tclient.register(new CredentialHelperService.LoggingFilter());\r\n\t\tWebTarget target = client.target(\"https://api.gandi.net/v5/livedns/domains/\"+domainName.getNormedName()+\"/records\");\r\n\t\tResponse response = CredentialHelperService.setCredential(target.request(),credential).get();\r\n\t\tString value = response.readEntity(String.class);\r\n\t\tlog.info(\"response  :\" + value);\r\n\t\tlog.debug(\"response status : {}\", response.getStatus());\r\n\t\tif (response.getStatus() < 300) {\r\n\t\t\tJsonArray rootArray = new JsonParser().parse(value).getAsJsonArray();\r\n\t\t\tfor (JsonElement element : rootArray) {\r\n\t\t\t\tJsonObject serverObj = element.getAsJsonObject();\r\n\t\t\t\tDnsRecord record = new DnsRecord();\r\n\t\t\t\trecord.setDomainName(domainName);\r\n\t\t\t\tString type = serverObj.get(\"rrset_type\").getAsString();\r\n\t\t\t\tif(\"A\".equals(type)||\"CNAME\".equals(type)){\r\n\t\t\t\t\trecord.setRecordType(type);\r\n\t\t\t\t\trecord.setTtl(serverObj.get(\"rrset_ttl\").getAsLong());\r\n\t\t\t\t\trecord.setName(serverObj.get(\"rrset_name\").getAsString());\r\n\t\t\t\t\tJsonArray values = serverObj.get(\"rrset_values\").getAsJsonArray();\r\n\t\t\t\t\tif(values.size()==1){\r\n\t\t\t\t\t\trecord.setValue(values.get(0).getAsString());\r\n\t\t\t\t\t\trecord.setLastSyncDate(Instant.now());\r\n                        String ukey=domainName.getNormedName()+\"-\"+record.getRecordType()+\"-\"+record.getName();\r\n                \t\trecord.setUuid(DigestUtils.md5Hex(ukey));\r\n                        log.info(\"record :{} {} {}\", record.getRecordType(),record.getName(),record.getValue());\r\n                        try {\r\n                            crossStorageApi.createOrUpdate(defaultRepo, record);\r\n                        } catch (Exception ex) {\r\n                            log.error(\"error creating record {} :{}\", record.getUuid(), ex.getMessage());\r\n                        }\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//TODO notify of non imported records\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ {
        "active" : true,
        "code" : "org.meveo.credentials.CredentialHelperService",
        "description" : "Helper function to build request with credentials",
        "inputs" : [ ],
        "outputs" : [ ],
        "generateOutputs" : false,
        "type" : "JAVA",
        "transactionType" : "SAME",
        "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
        "executionRoles" : [ ],
        "sourcingRoles" : [ ],
        "mavenDependencies" : [ ],
        "importScriptInstances" : [ ]
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityCategoryDto",
    "dtoData" : {
      "code" : "INFRA",
      "name" : "INFRA"
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.EntityCustomActionDto",
    "dtoData" : {
      "code" : "dockerpull",
      "description" : "Execute Dockerpull",
      "appliesTo" : "CE_Server",
      "label" : "Dockerpull",
      "script" : "org.meveo.script.SergentCommand",
      "applicableToEntityList" : false,
      "applicableToEntityInstance" : true
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.meveo.script.ListScalewayServersScript",
      "description" : "list scaleway servers",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.script;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.exception.BusinessApiException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport com.google.gson.*;\r\n\r\nimport java.math.BigInteger;\r\nimport java.time.OffsetDateTime;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.Server;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\n\r\npublic class ListScalewayServersScript extends Script {\r\n\t\r\n    private static final Logger log = LoggerFactory.getLogger(ListScalewayServersScript.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\t  private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n  \r\n    private ServiceProvider getProvider(String code){\r\n      return crossStorageApi.find(defaultRepo, ServiceProvider.class)\r\n    \t\t.by(\"code\", code)\r\n    \t\t.getResult();\r\n    }\r\n      \r\n    private Credential getCredential(String domain){\r\n      List<Credential> matchigCredentials = crossStorageApi.find(defaultRepo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t  log.info(\"calling ListScalewayServersScript\");\r\n      ServiceProvider scaleway=null;\r\n      try {\r\n        scaleway = getProvider(\"SCALEWAY\");\r\n      } catch(Exception e){\r\n        throw new BusinessException(e);\r\n      }\r\n      Credential credential  = getCredential(scaleway.getApiBaseUrl());\r\n      if(credential==null){\r\n        throw new BusinessException(\"No credential found for \"+scaleway.getApiBaseUrl());\r\n      } else {\r\n        log.info(\"using credential {} with username {}\",credential.getUuid(),credential.getUsername());\r\n      }\r\n      Client client = ClientBuilder.newClient();\r\n      WebTarget target = client.target(\"https://\"+scaleway.getApiBaseUrl()+\"/instance/v1/zones/fr-par-1/servers\");\r\n      Response response=CredentialHelperService.setCredential(target.request(),credential).get();\r\n      String value = response.readEntity(String.class);\r\n      log.info(\"response  :\"+value);\r\n      log.debug(\"response status : {}\",response.getStatus());\r\n      \r\n      if (response.getStatus() < 300){\r\n          JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(\"servers\");\r\n          //log.debug(\"rootArray: {}\",rootArray);\r\n          /*if(rootObject.get(\"servers\")!=JsonNull.INSTANCE){\r\n            Object servers = rootObject.get(\"servers\");\r\n            log.info(\"received servers:{}\",servers);\r\n          }*/\r\n          for(JsonElement element:rootArray){\r\n            JsonObject serverObj = element.getAsJsonObject();\r\n            Server server = new Server();\r\n            server.setUuid(serverObj.get(\"id\").getAsString());\r\n            String name=serverObj.get(\"name\").getAsString();\r\n            server.setInstanceName(name);\r\n            if(name.contains(\".\")){\r\n              int ldi = name.lastIndexOf(\".\");\r\n              String ext = name.substring(ldi);\r\n              String part = name.substring(0,ldi);\r\n              if(part.contains(\".\")){\r\n                ldi = part.lastIndexOf(\".\");\r\n                server.setDomainName(name.substring(ldi+1));\r\n              } else {\r\n                server.setDomainName(name);\r\n              }\r\n            }\r\n            if(serverObj.has(\"image\") && !serverObj.get(\"image\").isJsonNull() ){\r\n              server.setImage(serverObj.get(\"image\").getAsJsonObject().get(\"name\").getAsString());\r\n            }\r\n            server.setCreationDate(OffsetDateTime.parse(serverObj.get(\"creation_date\").getAsString()).toInstant());\r\n            server.setLastUpdate(OffsetDateTime.parse(serverObj.get(\"modification_date\").getAsString()).toInstant());\r\n            server.setOrganization(serverObj.get(\"organization\").getAsString());\r\n            server.setServerType(serverObj.get(\"commercial_type\").getAsString());\r\n            server.setZone(serverObj.get(\"zone\").getAsString());\r\n            if(serverObj.has(\"public_ip\")){\r\n              server.setPublicIp(serverObj.get(\"public_ip\").getAsJsonObject().get(\"address\").getAsString());\r\n            }\r\n            if(serverObj.has(\"volumes\") && serverObj.get(\"volumes\").getAsJsonObject().has(\"0\")){\r\n                BigInteger size = serverObj.get(\"volumes\").getAsJsonObject().get(\"0\").getAsJsonObject().get(\"size\").getAsBigInteger();\r\n                server.setVolumeSize(size.divide(new BigInteger(\"1000000\")).toString()+\"MB\");\r\n            }\r\n            server.setStatus(serverObj.get(\"state\").getAsString());\r\n            server.setProvider(scaleway);\r\n            log.info(\"server: {} provider:{}\",server.getUuid(),server.getProvider().getUuid());\r\n            try {\r\n            \tcrossStorageApi.createOrUpdate(defaultRepo,server);\r\n            } catch(Exception ex){\r\n              log.error(\"error creating server {} :{}\",server.getUuid(),ex.getMessage());\r\n            }\r\n          }\r\n      }\r\n      response.close();\r\n\t}\r\n\t\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ {
        "active" : true,
        "code" : "org.meveo.credentials.CredentialHelperService",
        "description" : "Helper function to build request with credentials",
        "inputs" : [ ],
        "outputs" : [ ],
        "generateOutputs" : false,
        "type" : "JAVA",
        "transactionType" : "SAME",
        "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
        "executionRoles" : [ ],
        "sourcingRoles" : [ ],
        "mavenDependencies" : [ ],
        "importScriptInstances" : [ ]
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "DnsRecord",
      "name" : "DNS record",
      "description" : "DNS Record",
      "customEntityCategoryCode" : "INFRA",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "domainName",
        "description" : "Domain name",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_DnsRecord",
        "appliesTo" : "CE_DnsRecord",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - DomainName",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:DNS record:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "entityClazzCetCode" : "DomainName",
        "matrixColumns" : [ ]
      }, {
        "code" : "lastSyncDate",
        "description" : "Last synchronization",
        "fieldType" : "DATE",
        "accountLevel" : "CE_DnsRecord",
        "appliesTo" : "CE_DnsRecord",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:DNS record:0;field:5",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "name",
        "description" : "name",
        "fieldType" : "STRING",
        "accountLevel" : "CE_DnsRecord",
        "appliesTo" : "CE_DnsRecord",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:DNS record:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "recordType",
        "description" : "Type",
        "fieldType" : "LIST",
        "accountLevel" : "CE_DnsRecord",
        "appliesTo" : "CE_DnsRecord",
        "defaultValue" : "A",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : {
          "A" : "A",
          "CNAME" : "CNAME"
        },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:DNS record:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "ttl",
        "description" : "Time to live",
        "fieldType" : "LONG",
        "accountLevel" : "CE_DnsRecord",
        "appliesTo" : "CE_DnsRecord",
        "defaultValue" : "10800",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:DNS record:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "value",
        "description" : "Value",
        "fieldType" : "STRING",
        "accountLevel" : "CE_DnsRecord",
        "appliesTo" : "CE_DnsRecord",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:DNS record:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ {
        "code" : "createDnsRecord",
        "description" : "Create DNS record in Gandi",
        "appliesTo" : "CE_DnsRecord",
        "label" : "Create in Gandi",
        "script" : "org.meveo.gandi.CreateDnsRecord",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.meveo.gandi.ListDomains",
      "description" : "List Gandi Domains",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.gandi;\r\n\r\nimport java.util.Map;\r\nimport java.time.OffsetDateTime;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport com.google.gson.*;\r\n\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.DomainName;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\n\r\npublic class ListDomains extends Script {\r\n\r\n\t\r\n    private static final Logger log = LoggerFactory.getLogger(ListDomains.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n\tstatic final private String GANDI_URL = \"api.gandi.net/v5/\";\r\n\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tCredential credential  = CredentialHelperService.getCredential(GANDI_URL,crossStorageApi,defaultRepo);\r\n      \tif(credential==null){\r\n        \tthrow new BusinessException(\"No credential found for \"+GANDI_URL);\r\n      \t} else {\r\n        \tlog.info(\"using credential {} with username {}\",credential.getUuid(),credential.getUsername());\r\n      \t}\r\n\t\tClient client = ClientBuilder.newClient();\r\n\t\tclient.register(new CredentialHelperService.LoggingFilter());\r\n\t\tWebTarget target = client.target(\"https://api.gandi.net/v5/domain/domains\");\r\n\t\tResponse response = CredentialHelperService.setCredential(target.request(),credential).get();\r\n\t\tString value = response.readEntity(String.class);\r\n\t\tlog.info(\"response  :\" + value);\r\n\t\tlog.debug(\"response status : {}\", response.getStatus());\r\n\t\tif (response.getStatus() < 300) {\r\n\t\t\tJsonArray rootArray = new JsonParser().parse(value).getAsJsonArray();\r\n\t\t\tfor (JsonElement element : rootArray) {\r\n\t\t\t\tJsonObject serverObj = element.getAsJsonObject();\r\n\t\t\t\tDomainName domainName = new DomainName();\r\n\t\t\t\tdomainName.setRegistar(\"GANDI\");\r\n\t\t\t\tdomainName.setUuid(serverObj.get(\"id\").getAsString());\r\n\t\t\t\tdomainName.setName(serverObj.get(\"fqdn_unicode\").getAsString());\r\n\t\t\t\tdomainName.setNormedName(serverObj.get(\"fqdn\").getAsString());\r\n\t\t\t\tJsonObject dates = serverObj.get(\"dates\").getAsJsonObject();\r\n\t\t\t\tdomainName.setCreationDate(OffsetDateTime.parse(dates.get(\"created_at\").getAsString()).toInstant());\r\n\t\t\t\tdomainName.setRegistrationDate(OffsetDateTime.parse(dates.get(\"registry_created_at\").getAsString()).toInstant());\r\n\t\t\t\tdomainName.setRegistrationEndDate(OffsetDateTime.parse(dates.get(\"registry_ends_at\").getAsString()).toInstant());\r\n\t\t\t\tdomainName.setLastUpdate(OffsetDateTime.parse(dates.get(\"updated_at\").getAsString()).toInstant());\r\n\t\t\t\tdomainName.setTld(serverObj.get(\"tld\").getAsString());\r\n\t\t\t\tdomainName.setAutoRenew(serverObj.get(\"autorenew\").getAsBoolean());\r\n\t\t\t\tlog.info(\"domaine name:{}\", domainName.getName());\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcrossStorageApi.createOrUpdate(defaultRepo, domainName);\r\n\t\t\t\t} catch (Exception ex) {\r\n\t\t\t\t\tlog.error(\"error creating domainName {} :{}\", domainName.getUuid(), ex.getMessage());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ {
        "active" : true,
        "code" : "org.meveo.credentials.CredentialHelperService",
        "description" : "Helper function to build request with credentials",
        "inputs" : [ ],
        "outputs" : [ ],
        "generateOutputs" : false,
        "type" : "JAVA",
        "transactionType" : "SAME",
        "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
        "executionRoles" : [ ],
        "sourcingRoles" : [ ],
        "mavenDependencies" : [ ],
        "importScriptInstances" : [ ]
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.EntityCustomActionDto",
    "dtoData" : {
      "code" : "listServers",
      "description" : "List servers",
      "appliesTo" : "CE_ServiceProvider",
      "applicableOnEl" : "#{entity.getCfValuesAsValues().get(\"code\") eq 'SCALEWAY'}",
      "label" : "List Servers",
      "script" : "org.meveo.script.ListScalewayServersScript",
      "applicableToEntityList" : false,
      "applicableToEntityInstance" : true
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityInstanceDto",
    "dtoData" : {
      "code" : "d3e42058-0af3-477c-98b1-c3df5bbddd79",
      "cetCode" : "ServiceProvider",
      "disabled" : false,
      "customFields" : {
        "customField" : [ {
          "code" : "apiBaseUrl",
          "stringValue" : "api.scaleway.com",
          "empty" : false
        }, {
          "code" : "image",
          "empty" : true
        }, {
          "code" : "code",
          "stringValue" : "SCALEWAY",
          "empty" : false
        }, {
          "code" : "zone",
          "mapValue" : {
            "fr-par" : {
              "dateValue" : null,
              "doubleValue" : null,
              "longValue" : null,
              "stringValue" : "Paris",
              "entityReferenceValue" : null,
              "childEntityValue" : null,
              "objectValue" : null,
              "empty" : false
            }
          },
          "empty" : true
        }, {
          "code" : "organization",
          "empty" : true
        }, {
          "code" : "serverType",
          "empty" : true
        }, {
          "code" : "description",
          "stringValue" : "Scaleway",
          "empty" : false
        }, {
          "code" : "status",
          "empty" : true
        } ],
        "inheritedCustomField" : [ ],
        "empty" : false
      }
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.meveo.script.SergentCommand",
      "description" : "execute a sergent command",
      "inputs" : [ {
        "name" : "command",
        "type" : "String",
        "description" : null
      } ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.script;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.time.Instant;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.model.customEntities.Server;\r\nimport org.meveo.model.customEntities.ServerAction;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.persistence.CEIUtils;\r\n\r\npublic class SergentCommand extends Script {\r\n  \r\n    private static final Logger log = LoggerFactory.getLogger(SergentCommand.class);\r\n\tprivate CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n  \r\n    private static List<String> allowedCommands = List.of(\"list\",\"gitpull\",\"dockerpull\");\r\n\r\n\tprivate String command;\r\n\r\n\tpublic void setCommand(String command) {\r\n\t\tthis.command = command;\r\n\t}\r\n\r\n\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tif(!allowedCommands.contains(command)){\r\n\t\t\tthrow new BusinessException(\"invalid command, should be one of \"+allowedCommands);\r\n\t\t}\r\n\t\tServer server =  CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance)parameters.get(\"CONTEXT_ENTITY\"), Server.class);\r\n\t\tif(server.getDomainName()==null || server.getDomainName().isEmpty()){\r\n\t\t\tthrow new BusinessException(\"invalid server domain name\");\r\n\t\t}\r\n        ServerAction action = new ServerAction(); \r\n        action.setCreationDate(Instant.now());\r\n        action.setServer(server);\r\n        action.setAction(command);\r\n\t\tClient client = ClientBuilder.newClient();\r\n     \tWebTarget target = client.target(\"https://\"+server.getDomainName()+\"/sergent/\").queryParam(\"command\", command);\r\n      \tResponse response= target.request().get();\r\n\t\tString responseContent = \"\";\r\n        if(response.getStatus()==Response.Status.OK.getStatusCode()){\r\n          action.setResponseStatus(\"OK\");\r\n        } else {\r\n          action.setResponseStatus(\"ERROR\");\r\n          responseContent += \"Status:\"+response.getStatus()+\"\\n\";\r\n        }\r\n        responseContent+=response.readEntity(String.class);\r\n        action.setResponse(responseContent);\r\n        try {\r\n           crossStorageApi.createOrUpdate(defaultRepo,action);\r\n        } catch(Exception ex){\r\n            log.error(\"error creating action {} :{}\",action.getUuid(),ex.getMessage());\r\n        }\r\n\t}\r\n\t\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ {
        "active" : true,
        "code" : "org.meveo.credentials.CredentialHelperService",
        "description" : "Helper function to build request with credentials",
        "inputs" : [ ],
        "outputs" : [ ],
        "generateOutputs" : false,
        "type" : "JAVA",
        "transactionType" : "SAME",
        "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
        "executionRoles" : [ ],
        "sourcingRoles" : [ ],
        "mavenDependencies" : [ ],
        "importScriptInstances" : [ ]
      } ]
    }
  } ],
  "moduleDependencies" : [ {
    "code" : "credentials",
    "description" : "credentials",
    "currentVersion" : "1.2.4"
  } ],
  "moduleFiles" : [ ]
} ]