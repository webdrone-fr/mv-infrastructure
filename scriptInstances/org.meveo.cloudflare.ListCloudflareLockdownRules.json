{
  "code" : "org.meveo.cloudflare.ListCloudflareLockdownRules",
  "description" : "List Cloudflare Lockdown Rules",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.cloudflare;\r\n\r\nimport java.time.OffsetDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.Map;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.Response;\r\n\r\nimport com.google.gson.*;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.DomainName;\r\nimport org.meveo.model.customEntities.LockdownRule;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class ListCloudflareLockdownRules extends Script{\r\n\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(ListCloudflareLockdownRules.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    static final private String CLOUDFLARE_URL = \"api.cloudflare.com/client/v4\";\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        DomainName domainName = CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance)parameters.get(CONTEXT_ENTITY), DomainName.class);\r\n\r\n        Credential credential = CredentialHelperService.getCredential(CLOUDFLARE_URL, crossStorageApi, defaultRepo);\r\n        if (credential==null) {\r\n            throw new BusinessException(\"No credential found for \"+CLOUDFLARE_URL);\r\n        } else {\r\n            logger.info(\"using credential {} with username {}\",credential.getUuid(), credential.getUsername());\r\n        }\r\n\r\n        String domainNameId = domainName.getUuid();\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        WebTarget target = client.target(\"https://\"+CLOUDFLARE_URL+\"/zones/\"+domainNameId+\"/firewall/lockdowns\");\r\n        Response response = CredentialHelperService.setCredential(target.request(), credential).get();\r\n        String value = response.readEntity(String.class);\r\n        logger.info(\"response :\", value);\r\n        logger.debug(\"response status : {}\", response.getStatus());\r\n        parameters.put(RESULT_GUI_MESSAGE, \"Status: \"+response.getStatus()+\", response: \"+value);\r\n        \r\n        if (response.getStatus()<300) {\r\n            JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().get(\"result\").getAsJsonArray();\r\n            for (JsonElement element : rootArray) {\r\n                JsonObject lockdownRuleObj = element.getAsJsonObject();\r\n                LockdownRule lockdownRule = new LockdownRule();\r\n\r\n                lockdownRule.setCreationDate(OffsetDateTime.parse(lockdownRuleObj.get(\"created_on\").getAsString()).toInstant());\r\n                lockdownRule.setLastUpdated(OffsetDateTime.parse(lockdownRuleObj.get(\"modified_on\").getAsString()).toInstant());\r\n                lockdownRule.setProviderSideId(lockdownRuleObj.get(\"id\").getAsString());\r\n                lockdownRule.setUuid(lockdownRuleObj.get(\"id\").getAsString());\r\n                lockdownRule.setDomainName(domainName);\r\n\r\n                // Paused\r\n                if (!lockdownRuleObj.get(\"paused\").isJsonNull()) {\r\n                    lockdownRule.setPaused(lockdownRuleObj.get(\"paused\").getAsBoolean());\r\n                }\r\n\r\n                // Description\r\n                if (!lockdownRuleObj.get(\"description\").isJsonNull()) {\r\n                    lockdownRule.setDescription(lockdownRuleObj.get(\"description\").getAsString());\r\n                }\r\n\r\n                // Urls\r\n                if (!lockdownRuleObj.get(\"urls\").isJsonNull()) {\r\n                    ArrayList<String> urls = new ArrayList<String>();\r\n                    JsonArray urlsArray = lockdownRuleObj.get(\"urls\").getAsJsonArray();\r\n                    for (JsonElement url : urlsArray) {\r\n                        urls.add(url.getAsString());\r\n                    }\r\n                    lockdownRule.setUrls(urls);\r\n                }\r\n\r\n                // Configurations\r\n                // Seperate into IPs and IP Ranges\r\n                if (!lockdownRuleObj.get(\"configurations\").isJsonNull()) {\r\n                    ArrayList<String> ips = new ArrayList<String>();\r\n                    ArrayList<String> ipRanges = new ArrayList<String>();\r\n                    JsonArray configurationsArr = lockdownRuleObj.get(\"configurations\").getAsJsonArray();\r\n\r\n                    for (JsonElement configurationEl : configurationsArr) {\r\n                        JsonObject configurationObj = configurationEl.getAsJsonObject();\r\n                        String configurationTarget = configurationObj.get(\"target\").getAsString();\r\n                        String configurationValue = configurationObj.get(\"value\").getAsString();\r\n                        if (configurationTarget.equalsIgnoreCase(\"ip\")) {\r\n                            ips.add(configurationValue);\r\n                        } else if (configurationTarget.equalsIgnoreCase(\"ip_range\")) {\r\n                            ipRanges.add(configurationValue);\r\n                        }\r\n                    }\r\n                    lockdownRule.setIps(ips);\r\n                    lockdownRule.setIpRanges(ipRanges);\r\n                }\r\n\r\n                try {\r\n                    crossStorageApi.createOrUpdate(defaultRepo, lockdownRule);\r\n                    logger.info(\"Lockdown Rule : {} successfully retrieved\", lockdownRule.getProviderSideId());\r\n                } catch (Exception e) {\r\n                    logger.error(\"Error retrieving lockdown rule : {} {}\", lockdownRule.getProviderSideId(), e.getMessage());\r\n                }\r\n            }\r\n            response.close();\r\n        }\r\n    }\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}