{
  "code" : "org.meveo.scaleway.CreateScalewayServer",
  "description" : "Create Scaleway Server",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.scaleway;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.Response;\r\n\r\nimport com.google.gson.*;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.ScalewayServer;\r\nimport org.meveo.model.customEntities.ServerVolume;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CreateScalewayServer extends Script {\r\n    \r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(CreateScalewayServer.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    static final private  String SCALEWAY_URL = \"api.scaleway.com\";\r\n    static final private String BASE_PATH = \"/instance/v1/zones/\";\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        String action = parameters.get(CONTEXT_ACTION).toString();\r\n        ScalewayServer server = CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance)parameters.get(CONTEXT_ENTITY), ScalewayServer.class);\r\n        ServiceProvider provider = crossStorageApi.find(defaultRepo, ServiceProvider.class).by(\"code\", \"SCALEWAY\").getResult();\r\n\r\n        if(server.getInstanceName() == null) { // required\r\n            throw new BusinessException(\"Invalid Server Instance Name\");\r\n        } else if (server.getServerType() == null) { // required\r\n            throw new BusinessException(\"Invalid Server Type\");\r\n        } else if(server.getZone() == null) { // required\r\n            throw new BusinessException(\"Invalid Server Zone\");\r\n        }\r\n\r\n        String zone = server.getZone(); // Required for path\r\n        logger.info(\"Action : {}, Provider : {}\", action, provider.getCode());\r\n\r\n        Credential credential = CredentialHelperService.getCredential(SCALEWAY_URL, crossStorageApi, defaultRepo);\r\n        if (credential == null) {\r\n            throw new BusinessException(\"No credential found for \"+SCALEWAY_URL);\r\n        } else {\r\n            logger.info(\"using credential {} with username {}\", credential.getDomainName(), credential.getUsername());\r\n        }\r\n\r\n        // Server Availability for all server types in zone - possible values include available, scarce and shortage\r\n        String serverType = server.getServerType();\r\n        JsonObject serverAvailabilityObj = ScalewayHelperService.getServerTypeAvailabilityInZone(zone, credential);\r\n        String serverTypeAvailability = serverAvailabilityObj.get(serverType).getAsJsonObject().get(\"availability\").getAsString();\r\n        if (serverTypeAvailability.equalsIgnoreCase(\"scarce\")) {\r\n            parameters.put(RESULT_GUI_MESSAGE, \"Server Type \"+serverType+\" has scarce availability in zone \"+zone);\r\n            logger.info(\"Zone : {} has a scarce supply of Server Type : {}\", zone, serverType);\r\n        } else if (serverTypeAvailability.equalsIgnoreCase(\"shortage\")) {\r\n            logger.info(\"Zone : {} has a shortage of Server Type : {}\", zone, serverType);\r\n            throw new BusinessException(\"Server Type : \"+ serverType+ \" is currently unavailable in zone \" +zone);\r\n        }\r\n\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        WebTarget target = client.target(\"https://\"+SCALEWAY_URL+BASE_PATH+zone+\"/servers\");\r\n\r\n        Map<String, Object> body = new HashMap<String, Object>();\r\n        body.put(\"name\", server.getInstanceName());// required\r\n        body.put(\"dynamic_ip_required\", server.getDynamicIpRequired()); // nullable, default to true\r\n        body.put(\"commercial_type\", server.getServerType()); // required\r\n        body.put(\"enable_ipv6\", server.getEnableIPvSix()); // default to true\r\n        body.put(\"boot_type\", server.getBootType()); // From List of values, includes local, bootscript, rescue -> default is local\r\n\r\n        // Bootscript - nullable\r\n        if (server.getBootType() != null && server.getBootType().equalsIgnoreCase(\"bootscript\") && server.getBootscript() != null) {\r\n            String bootscriptId = server.getBootscript().getProviderSideId();\r\n            body.put(\"bootscript\", bootscriptId);\r\n        }\r\n\r\n        // Public IP\r\n        if (server.getPublicIp() != null) {\r\n            body.put(\"public_ip\", server.getPublicIp());\r\n        }\r\n\r\n        // Project\r\n        // Webdrone ID = 6a0c2ca8-917a-418a-90a3-05949b55a7ae\r\n        String projectId = \"6a0c2ca8-917a-418a-90a3-05949b55a7ae\";\r\n        if (server.getProject() != null) {\r\n            projectId = server.getProject();\r\n        }\r\n        body.put(\"project\", projectId);\r\n\r\n        Map<String, Object> volumes = new HashMap<String, Object>();\r\n        // Image\r\n        if (server.getImage() != null) {\r\n            String imageId = server.getImage().getProviderSideId();\r\n            body.put(\"image\", imageId);\r\n        } else if (server.getRootVolume() != null) {\r\n            // Root Volume\r\n            Map<String, Object> rootVolume = new HashMap<String, Object>();\r\n            String serverRootVolumeId = server.getRootVolume().getUuid();\r\n            try {\r\n                ServerVolume serverRootVolume = crossStorageApi.find(defaultRepo, serverRootVolumeId, ServerVolume.class);\r\n                String serverRootVolumetype = serverRootVolume.getVolumeType();\r\n                if(serverRootVolumetype.equalsIgnoreCase(\"l_ssd\")) {\r\n                    rootVolume.put(\"id\", serverRootVolume.getProviderSideId());\r\n                    rootVolume.put(\"boot\", serverRootVolume.getIsBoot());\r\n                    rootVolume.put(\"name\", serverRootVolume.getName());\r\n                } else if (serverType.startsWith(\"DEV1\") || serverType.startsWith(\"GP1\") || serverType.startsWith(\"RENDER\")) {\r\n                    rootVolume.put(\"id\", serverRootVolume.getProviderSideId());\r\n                    rootVolume.put(\"boot\", serverRootVolume.getIsBoot());\r\n                    rootVolume.put(\"name\", serverRootVolume.getName());\r\n                } else {\r\n                    throw new BusinessException(\"Invalid Root Volume Type for Server Type : \"+serverType);\r\n                }\r\n                volumes.put(\"0\", rootVolume);\r\n            } catch (Exception e) {\r\n                logger.error(\"Error retrieving server root volume\", e.getMessage());\r\n            }\r\n            // Additional Volumes\r\n            if (server.getAdditionalVolumes() != null) {\r\n                Map<String, ServerVolume> serverAdditionalVolumes = server.getAdditionalVolumes();\r\n                for (Map.Entry<String, ServerVolume> serverAdditionalVolumeEnt : serverAdditionalVolumes.entrySet()) {\r\n                    Map<String, Object> additionalVolume = new HashMap<String, Object>();\r\n                    String serverAdditionalVolumeId = serverAdditionalVolumeEnt.getValue().getUuid();\r\n                    try {\r\n                        ServerVolume serverAdditionalVolume = crossStorageApi.find(defaultRepo, serverAdditionalVolumeId, ServerVolume.class);\r\n                        String serverAdditionalVolumeType = serverAdditionalVolume.getVolumeType();\r\n                        if(serverAdditionalVolumeType.equalsIgnoreCase(\"l_ssd\")) {\r\n                            additionalVolume.put(\"id\", serverAdditionalVolume.getProviderSideId());\r\n                            additionalVolume.put(\"boot\", serverAdditionalVolume.getIsBoot());\r\n                            additionalVolume.put(\"name\", serverAdditionalVolume.getName());\r\n                        } else if(serverType.startsWith(\"DEV1\") || serverType.startsWith(\"GP1\") || serverType.startsWith(\"RENDER\")) {\r\n                            additionalVolume.put(\"id\", serverAdditionalVolume.getProviderSideId());\r\n                            additionalVolume.put(\"boot\", serverAdditionalVolume.getIsBoot());\r\n                            additionalVolume.put(\"name\", serverAdditionalVolume.getName());\r\n                        } else {\r\n                            throw new BusinessException(\"Invalid Additional Volume Type for Server Type : \"+serverType);\r\n                        }\r\n                        volumes.put(serverAdditionalVolumeEnt.getKey(), additionalVolume); // keys should be 1, 2, 3...\r\n                    } catch (Exception e) {\r\n                        logger.error(\"Error retrieving additional volume\", e.getMessage());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        body.put(\"volumes\", volumes);\r\n\r\n        // Security Group\r\n        // nullable - if null, defaults to \"Default security group\"\r\n        if (server.getSecurityGroup() != null) {\r\n            body.put(\"security_group\", server.getSecurityGroup().getProviderSideId());\r\n        }\r\n        \r\n        String resp = JacksonUtil.toStringPrettyPrinted(body);\r\n        Response response = \r\n            CredentialHelperService.setCredential(target.request(\"application/json\"), credential)\r\n                .post(Entity.json(resp));\r\n        String value = response.readEntity(String.class);\r\n        logger.info(\"response : {}\", value);\r\n        logger.debug(\"response status : {}\", response.getStatus());\r\n        parameters.put(RESULT_GUI_MESSAGE, \"Status: \"+response.getStatus()+\", response: \"+value);\r\n\r\n        if (response.getStatus()<300) {\r\n            JsonObject serverObj = new JsonParser().parse(value).getAsJsonObject().get(\"server\").getAsJsonObject();\r\n            server = ScalewaySetters.setScalewayServer(serverObj, server, provider, crossStorageApi, defaultRepo);\r\n            try {\r\n                crossStorageApi.createOrUpdate(defaultRepo, server);\r\n            } catch (Exception e) {\r\n                logger.error(\"error creating server\", e.getMessage());\r\n            }\r\n            response.close();\r\n        }\r\n    }\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}