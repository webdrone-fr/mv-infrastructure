{
  "code" : "org.meveo.script.openstack.OpenstackAPI",
  "description" : "Openstack \"factory\" for API's call",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script.openstack;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport com.google.gson.*;\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\nimport org.meveo.credentials.CredentialHelperService;\r\n\r\npublic class OpenstackAPI extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListOVHServersScript.class);\r\n  \r\n  \tprivate String computeBaseAPI = \"https://compute.gra11.cloud.ovh.net/v2.1/\";\r\n  \r\n  \tprivate String networkBaseAPI = \"https://network.compute.gra11.cloud.ovh.net/v2.0/\";\r\n  \r\n  \tprivate String imageBaseAPI = \"https://image.compute.gra11.cloud.ovh.net/v2/\";\r\n  \r\n  \tprivate String identityBaseAPI = \"https://auth.cloud.ovh.net/\";\r\n  \r\n  \t/**\r\n     * Do all of compute api call\r\n     * @param url the path of the call\r\n     * @param token the token currently used by the api\r\n     * @param jsonBody of the request. Can be null if no body is needed\r\n     * @param methodType GET, POST, DELETE, PUT\r\n     * @param objReturn to return is the json response\r\n     * @return the list of json object\r\n     * @throws if the methodType used is not supported\r\n     */\r\n  \tpublic List<JsonObject> computeAPI(String url, String token, String jsonBody, String methodType, String objReturn) throws BusinessException {\r\n      \tList<JsonObject> res = new ArrayList<>();\r\n        Client client = ClientBuilder.newClient();\r\n      \tif (methodType.equalsIgnoreCase(\"get\")) {\r\n            WebTarget target = client.target(this.computeBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token).get();\r\n            String value = response.readEntity(String.class);\r\n            if (response.getStatus() < 300) {\r\n                JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n                for (JsonElement element : rootArray) {\r\n                    JsonObject JObject = element.getAsJsonObject();\r\n                    res.add(JObject);\r\n                }\r\n            }\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"post\")) {\r\n            WebTarget target = client.target(this.computeBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token).post(Entity.json(jsonBody));\r\n            String value = response.readEntity(String.class);\r\n            if (response.getStatus() < 300) {\r\n              \t// Regarder si la reponse cotient <\"servers\": [>\r\n              \t// Si oui JsonArray\r\n              \t// Si non JsonObject direct\r\n              \t//if (jp.parse(value).getAsJsonObject().getAsJsonArray(objReturn) instanceof JsonObject) {\r\n                \tJsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n                    for (JsonElement element : rootArray) {\r\n                        JsonObject JObject = element.getAsJsonObject();\r\n                        res.add(JObject);\r\n                    }\r\n                //} else {\r\n                //  \tJsonObject obj = new JsonParser().parse(value).getAsJsonObject();\r\n                //  \tres.add(obj);\r\n                //}\r\n            }\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"delete\")) {\r\n            WebTarget target = client.target(this.computeBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token).delete();\r\n            String value = response.readEntity(String.class);\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"put\")) {\r\n        } else {\r\n          \tthrow new BusinessException(\"Cannot found \" + methodType + \" in method type request. Available methods : get, post, delete, put\");\r\n        }\r\n\t\tclient.close();\r\n      \treturn res;\r\n    }\r\n  \r\n\t/**\r\n     * Do all of network api call\r\n     * @param url the path of the call\r\n     * @param token the token currently used by the api\r\n     * @param jsonBody of the request. Can be null if no body is needed\r\n     * @param methodType GET, POST, DELETE, PUT\r\n     * @param objReturn to return is the json response\r\n     * @return the list of json object\r\n     * @throws if the methodType used is not supported\r\n     */\r\n  \tpublic List<JsonObject> networkAPI(String url, String token, String jsonBody, String methodType, String objReturn) {\r\n      \tList<JsonObject> res = new ArrayList<>();\r\n\t\tClient client = ClientBuilder.newClient();\r\n      \tWebTarget target = client.target(this.networkBaseAPI + url);\r\n      \tResponse response = target.request().header(\"X-Auth-Token\", token).get();\r\n      \tString value = response.readEntity(String.class);\r\n      \tif (response.getStatus() < 300) {\r\n          \tJsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n            for (JsonElement element : rootArray) {\r\n            \tJsonObject JObject = element.getAsJsonObject();\r\n              \tres.add(JObject);\r\n            }\r\n        }\r\n      \tresponse.close();\r\n      \tclient.close();\r\n      \treturn res;\r\n    }\r\n  \r\n\t/**\r\n     * Do all of image api call\r\n     * @param url the path of the call\r\n     * @param token the token currently used by the api\r\n     * @param jsonBody of the request. Can be null if no body is needed\r\n     * @param methodType GET, POST, DELETE, PUT\r\n     * @param objReturn to return is the json response\r\n     * @return the list of json object\r\n     * @throws if the methodType used is not supported\r\n     */\r\n  \tpublic List<JsonObject> imageAPI(String url, String token, String jsonBody, String methodType, String objReturn) {\r\n      \tList<JsonObject> res = new ArrayList<>();\r\n\t\tClient client = ClientBuilder.newClient();\r\n      \tWebTarget target = client.target(this.imageBaseAPI + url);\r\n      \tResponse response = target.request().header(\"X-Auth-Token\", token).get();\r\n      \tString value = response.readEntity(String.class);\r\n      \tif (response.getStatus() < 300) {\r\n          \tJsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n            for (JsonElement element : rootArray) {\r\n            \tJsonObject JObject = element.getAsJsonObject();\r\n              \tres.add(JObject);\r\n            }\r\n        }\r\n      \tresponse.close();\r\n      \tclient.close();\r\n      \treturn res;\r\n    }\r\n  \r\n\t/**\r\n     * Do all of identity api call\r\n     * @param url the path of the call\r\n     * @param token the token currently used by the api\r\n     * @param jsonBody of the request. Can be null if no body is needed\r\n     * @param methodType GET, POST, DELETE, PUT\r\n     * @param objReturn to return is the json response\r\n     * @return the list of json object\r\n     * @throws if the methodType used is not supported\r\n     */\r\n  \tpublic List<JsonObject> IdentityAPI(String url, String token, String jsonBody, String methodType, String objReturn) {\r\n      \tList<JsonObject> res = new ArrayList<>();\r\n\t\tClient client = ClientBuilder.newClient();\r\n      \tWebTarget target = client.target(this.identityBaseAPI + url);\r\n      \tResponse response = target.request().header(\"X-Auth-Token\", token).get();\r\n      \tString value = response.readEntity(String.class);\r\n      \tif (response.getStatus() < 300) {\r\n          \tJsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n            for (JsonElement element : rootArray) {\r\n            \tJsonObject JObject = element.getAsJsonObject();\r\n              \tres.add(JObject);\r\n            }\r\n        }\r\n      \tresponse.close();\r\n      \tclient.close();\r\n      \treturn res;\r\n    }\r\n\t\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tsuper.execute(parameters);\r\n\t}\r\n  \r\n\t\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}