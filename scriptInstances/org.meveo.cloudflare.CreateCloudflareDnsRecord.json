{
  "code" : "org.meveo.cloudflare.CreateCloudflareDnsRecord",
  "description" : "Create Cloudflare DNS Record",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.cloudflare;\r\n\r\nimport java.time.OffsetDateTime;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.Response;\r\n\r\nimport com.google.gson.*;\r\n\r\nimport org.apache.commons.validator.routines.InetAddressValidator;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.DnsRecord;\r\nimport org.meveo.model.customEntities.DomainName;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CreateCloudflareDnsRecord extends Script {\r\n    \r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(CreateCloudflareDnsRecord.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    static final private String CLOUDFLARE_URL = \"api.cloudflare.com/client/v4\";\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        DnsRecord record;\r\n        String domainNameId = \"webdrone.fr\";\r\n\r\n        if (parameters.get(CONTEXT_ACTION) != null) {\r\n        \r\n            String action = parameters.get(CONTEXT_ACTION).toString();\r\n            record = CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance)parameters.get(CONTEXT_ENTITY), DnsRecord.class);\r\n            InetAddressValidator ipValidator = InetAddressValidator.getInstance();\r\n\r\n            if (record.getDomainName()==null) {\r\n                throw new BusinessException(\"Invalid Record Domain\");\r\n            } else if (record.getRecordType()==null) {\r\n                throw new BusinessException(\"Invalid Record Type\");\r\n            } else if (record.getName()==null || record.getName().isEmpty()) {\r\n                throw new BusinessException(\"Invalid Record Name\");\r\n            } else if (record.getValue()==null || record.getValue().isEmpty()) {\r\n                throw new BusinessException(\"Invalid Record Value\");\r\n            } else if (!ipValidator.isValidInet4Address(record.getValue())) {\r\n                throw new BusinessException(\"Invalid Record IP provided\");\r\n            }\r\n\r\n            DomainName domainName = record.getDomainName();\r\n            domainNameId = domainName.getUuid();\r\n            logger.info(\"action : {}, domain name uuid : {}\", action, domainNameId);\r\n\r\n        } else {\r\n            record = new DnsRecord();\r\n            try {\r\n                String providerId = parameters.get(\"providerId\").toString();\r\n                ServiceProvider provider = crossStorageApi.find(defaultRepo, providerId, ServiceProvider.class);\r\n                List<DomainName> providerDomainNames = crossStorageApi.find(defaultRepo, DomainName.class).by(\"registrar\", provider).getResults();\r\n                for (DomainName domainName : providerDomainNames) {\r\n                    if(domainNameId.equals(domainName.getName())) {\r\n                        record.setDomainName(domainName);\r\n                    }\r\n                }\r\n            } catch(Exception e) {\r\n                logger.error(\"Error retrieving domain name\", e.getMessage());\r\n            }\r\n            \r\n            // try {\r\n            //     DomainName domainName = crossStorageApi.find(defaultRepo, DomainName.class).by(\"name\", domainNameId).getResult();\r\n            //     record.setDomainName(domainName);\r\n            // } catch (Exception e){\r\n            //     logger.error(\"Error retrieving domain name\", e.getMessage());\r\n            // }\r\n            record.setRecordType(parameters.get(\"recordType\").toString());\r\n            record.setName(parameters.get(\"name\").toString());\r\n            record.setValue(parameters.get(\"value\").toString());\r\n            record.setTtl(Long.valueOf(parameters.get(\"ttl\").toString()));\r\n            if(parameters.get(\"priority\") != null) { // optional\r\n                record.setPriority(Long.valueOf(parameters.get(\"priority\").toString()));\r\n            }\r\n            if(parameters.get(\"proxied\")!= null) { // optional\r\n                record.setProxied(Boolean.valueOf(parameters.get(\"isProxied\").toString()));\r\n            }\r\n        }\r\n\r\n        Credential credential = CredentialHelperService.getCredential(CLOUDFLARE_URL, crossStorageApi, defaultRepo);\r\n        if (credential==null) {\r\n            throw new BusinessException(\"No credential found for \"+CLOUDFLARE_URL);\r\n        } else {\r\n            logger.info(\"Using Credential {} with username {}\", credential.getDomainName(), credential.getUsername());\r\n        }\r\n\r\n        Map<String, Object> body = new HashMap<String, Object>();\r\n\r\n        body.put(\"type\", record.getRecordType());\r\n        body.put(\"name\", record.getName());\r\n        body.put(\"content\", record.getValue());\r\n        body.put(\"ttl\", String.valueOf(record.getTtl()));\r\n        body.put(\"proxied\", record.getProxied()); // default false\r\n\r\n        if(record.getPriority()!=null){\r\n            body.put(\"priority\", record.getPriority());\r\n        }\r\n\r\n        WebTarget target = client.target(\"https://\"+CLOUDFLARE_URL+\"/zones/\"+domainNameId+\"/dns_records\");\r\n        String resp = JacksonUtil.toStringPrettyPrinted(body);\r\n        Response response = \r\n            CredentialHelperService.setCredential(target.request(\"application/json\"), credential)\r\n                .post(Entity.json(resp));\r\n        String value = response.readEntity(String.class);\r\n        logger.info(\"response  :\" + value);\r\n        logger.debug(\"response status : {}\", response.getStatus());\r\n\r\n        parameters.put(RESULT_GUI_MESSAGE, \"Status: \"+response.getStatus()+\", response: \"+value);\r\n        if (response.getStatus()<300) {\r\n            JsonObject recordObj = new JsonParser().parse(value).getAsJsonObject().get(\"result\").getAsJsonObject();\r\n            record.setCreationDate(OffsetDateTime.parse(recordObj.get(\"created_on\").getAsString()).toInstant());\r\n            record.setLastSyncDate(OffsetDateTime.parse(recordObj.get(\"modified_on\").getAsString()).toInstant());\r\n            record.setProviderSideId(recordObj.get(\"id\").getAsString());\r\n            record.setRecordType(recordObj.get(\"type\").getAsString());\r\n            record.setName(recordObj.get(\"name\").getAsString());\r\n            record.setValue(recordObj.get(\"content\").getAsString());\r\n            record.setProxiable(recordObj.get(\"proxiable\").getAsBoolean());\r\n            record.setIsLocked(recordObj.get(\"locked\").getAsBoolean());\r\n\r\n            try {\r\n                crossStorageApi.createOrUpdate(defaultRepo, record);\r\n                logger.info(\"Record : {} successfully created\", record.getProviderSideId());\r\n            } catch (Exception e) {\r\n                logger.error(\"error creating record {} :{}\", record.getUuid(), e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}