{
  "code" : "org.meveo.scaleway.UpdateScalewayVolume",
  "description" : "Update Scaleway Volume",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.scaleway;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.Response;\r\n\r\nimport com.google.gson.*;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.ScalewayServer;\r\nimport org.meveo.model.customEntities.ServerVolume;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class UpdateScalewayVolume extends Script {\r\n\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(UpdateScalewayVolume.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    static final private  String SCALEWAY_URL = \"api.scaleway.com\";\r\n    static final private String BASE_PATH = \"/instance/v1/zones/\";\r\n    \r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        String action = parameters.get(CONTEXT_ACTION).toString();\r\n        ServerVolume volume = CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance)parameters.get(CONTEXT_ENTITY), ServerVolume.class);\r\n        \r\n        if (volume.getZone()==null) { //Required\r\n            throw new BusinessException(\"Invalid Volume Zone\");\r\n        } else if(volume.getProviderSideId()==null) { //Required\r\n            throw new BusinessException(\"Invalid Volume Provider-side ID\");\r\n        }\r\n        \r\n        String zone = volume.getZone();\r\n        String volumeId = volume.getProviderSideId();\r\n        logger.info(\"action : {}; volume : {}\", action, volumeId);\r\n\r\n        Credential credential = CredentialHelperService.getCredential(SCALEWAY_URL, crossStorageApi, defaultRepo);\r\n        if (credential == null) {\r\n            throw new BusinessException(\"No credential found for \"+SCALEWAY_URL);\r\n        } else {\r\n            logger.info(\"Using Credential {} with username {}\", credential.getUuid(), credential.getUsername());\r\n        }\r\n\r\n        Map<String, Object> body = new HashMap<>();\r\n        String volumeName = null; // nullable\r\n        if(volume.getName()!= null) {\r\n            volumeName = volume.getName();\r\n        }\r\n\r\n        // Volume type:  l_ssd or b_ssd\r\n        String volumeType = volume.getVolumeType();\r\n        // on l_ssd, only name can be changed\r\n        if(volumeType.equalsIgnoreCase(\"l_ssd\")) {\r\n            body.put(\"name\", volumeName);\r\n        } else { // on b_ssd, \r\n            Long volumeSize = Long.valueOf(volume.getSize());\r\n            // if volume attached to a Server, get Server details/ requirements\r\n            if(volume.getServer()!= null){ // volume growing is supported; b_ssd only available fo DEV1, GP1 and RENDER offers\r\n                String serverId = volume.getServer();\r\n                String serverType = null;\r\n                Long serverTotalVolumeSize = 0L;\r\n                String serverRootVolumeId = null;\r\n                List<String> serverAdditionalVolumesIds = new ArrayList<String>();\r\n                ScalewayServer server = null;\r\n                Boolean isServerRootVolume = false;\r\n                try {\r\n                    server = crossStorageApi.find(defaultRepo, ScalewayServer.class).by(\"providerSideId\", serverId).getResult();\r\n                    serverType = server.getServerType();\r\n                } catch (Exception e){\r\n                    logger.error(\"Error retrieving server : {}\", serverId, e.getMessage());\r\n                    throw new BusinessException(\"Unable to retrieve server\");\r\n                }\r\n                // check if valid server type for b_ssd volume type\r\n                if(serverType.startsWith(\"DEV1\") || serverType.startsWith(\"GP1\") || serverType.startsWith(\"RENDER\")) {\r\n                    // check if volume to update is root volume or additional volume\r\n                    serverRootVolumeId = server.getRootVolume().getUuid();\r\n                    if(volumeId.equalsIgnoreCase(serverRootVolumeId)) { // If volume to update is root volume\r\n                        isServerRootVolume = true;\r\n                    } else { // if volume to update is not root volume - must be additional volume\r\n                        Map<String, ServerVolume> serverAdditionalVolumes = server.getAdditionalVolumes();\r\n                        for (int i = 1; i < serverAdditionalVolumes.size(); i++) {\r\n                            String serverAdditionalVolumeId = serverAdditionalVolumes.get(String.valueOf(i)).getUuid();\r\n                            serverAdditionalVolumesIds.add(serverAdditionalVolumeId);\r\n                        }\r\n                    }\r\n\r\n                    if (isServerRootVolume && server.getAdditionalVolumes()== null) { // if server only has one volume\r\n                        serverTotalVolumeSize = volumeSize;\r\n                    } else { // if server has more than one volume\r\n                        try {\r\n                            ServerVolume serverRootVolume = crossStorageApi.find(defaultRepo, serverRootVolumeId, ServerVolume.class);\r\n                            serverTotalVolumeSize  = Long.valueOf(serverRootVolume.getSize()); \r\n                        } catch (Exception e) {\r\n                            logger.error(\"error retrieving root volume\", e.getMessage());\r\n                        }\r\n                        // remove volume to update from list of additional volumes\r\n                        serverAdditionalVolumesIds.remove(volumeId);\r\n                        // calc server total volume size - size of volume to update\r\n                        for (String additionalVolumeId : serverAdditionalVolumesIds) {\r\n                            try {\r\n                                ServerVolume additionalVolume = crossStorageApi.find(defaultRepo, additionalVolumeId, ServerVolume.class);\r\n                                serverTotalVolumeSize += Long.valueOf(additionalVolume.getSize());\r\n                            } catch (Exception e) {\r\n                                logger.error(\"error retrieving additional volume\", e.getMessage());\r\n                            }\r\n                        }\r\n                        // add new size of volume to update to server total volume size\r\n                        serverTotalVolumeSize += volumeSize;\r\n                    }\r\n                    // get server type volume size constraints\r\n                    JsonObject serverConstraintsObj = ScalewayHelperService.getServerTypeRequirements(server, credential);\r\n                    Long serverMinVolumeSizeReq = serverConstraintsObj.get(\"volumes_constraint\").getAsJsonObject().get(\"min_size\").getAsLong();\r\n                    Long serverMaxVolumeSizeReq = serverConstraintsObj.get(\"volumes_constraint\").getAsJsonObject().get(\"max_size\").getAsLong();\r\n\r\n                    // check if new total volume size meets server type constraints\r\n                    String serverTotalLocalVolumesSizeStr = Long.toString(serverTotalVolumeSize);\r\n                    String serverMinVolumeSizeReqStr = Long.toString(serverMinVolumeSizeReq);\r\n                    String serverMaxVolumeSizeReqStr = Long.toString(serverMaxVolumeSizeReq);\r\n                    if (serverTotalVolumeSize < serverMinVolumeSizeReq) {\r\n                        logger.debug(\"Current available volume size : {}, Minimum Volume size required for server type {} : {}\", serverTotalLocalVolumesSizeStr , serverType, serverMinVolumeSizeReqStr);\r\n                        throw new BusinessException(\"Current total volume size is too small for selected server type\");\r\n                    } else if (serverTotalVolumeSize > serverMaxVolumeSizeReq) {\r\n                        logger.debug(\"Current available volume size : {}, Maximum Volume size allowed for server type {} : {}\", serverTotalLocalVolumesSizeStr , serverType, serverMaxVolumeSizeReqStr);\r\n                        throw new BusinessException(\"Current total volume size is too large for selected server type\");\r\n                    } else {\r\n                        logger.info(\"Server Total Volume size : {}; Min Total Volume size : {}; Max Total Volume Size : {}\", serverTotalLocalVolumesSizeStr, serverMinVolumeSizeReqStr, serverMaxVolumeSizeReqStr);\r\n                    }\r\n                } else {\r\n                    logger.error(\"b_ssd volume type currently unavailable for server type : {}\", serverType);\r\n                    throw new BusinessException(\"Invalid volume type for server type : \"+serverType);\r\n                }\r\n            }\r\n            body.put(\"name\", volumeName);\r\n            body.put(\"size\", volumeSize);\r\n        }\r\n\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        WebTarget target = client.target(\"https://\"+SCALEWAY_URL+BASE_PATH+zone+\"/volumes/\"+volumeId);\r\n        String resp = JacksonUtil.toStringPrettyPrinted(body);\r\n        Response response = CredentialHelperService.setCredential(target.request(\"application/json\"), credential)\r\n            .method(\"PATCH\", Entity.json(resp));\r\n        String value = response.readEntity(String.class);\r\n        logger.info(\"response : \" + value);\r\n        logger.debug(\"response status : {}\", response.getStatus());\r\n        parameters.put(RESULT_GUI_MESSAGE, \"Status: \"+response.getStatus()+\", response:\"+value);\r\n\r\n        if(response.getStatus()<300) {\r\n            JsonObject volumeObj = new JsonParser().parse(value).getAsJsonObject().get(\"volume\").getAsJsonObject();\r\n            volume = ScalewaySetters.setServerVolume(volumeObj, volume, crossStorageApi, defaultRepo);\r\n            try {\r\n                crossStorageApi.createOrUpdate(defaultRepo, volume);\r\n            } catch (Exception e) {\r\n                logger.error(\"error updating volume : {}\", volumeId, e.getMessage());\r\n            }\r\n        }\r\n        response.close();\r\n    }\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}