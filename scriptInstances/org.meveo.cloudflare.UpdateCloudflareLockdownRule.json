{
  "code" : "org.meveo.cloudflare.UpdateCloudflareLockdownRule",
  "description" : "Update Cloudflare Lockdown Rule",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.cloudflare;\r\n\r\nimport java.time.OffsetDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.Response;\r\n\r\nimport com.google.gson.*;\r\n\r\nimport org.apache.commons.validator.routines.InetAddressValidator;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.LockdownRule;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class UpdateCloudflareLockdownRule extends Script {\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(UpdateCloudflareLockdownRule.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    static final private String CLOUDFLARE_URL = \"api.cloudflare.com/client/v4\";\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        String action = parameters.get(CONTEXT_ACTION).toString();\r\n        LockdownRule lockdownRule = CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance) parameters.get(CONTEXT_ENTITY), LockdownRule.class);\r\n        InetAddressValidator ipValidator = InetAddressValidator.getInstance();\r\n\r\n        if (lockdownRule.getDomainName() == null) {\r\n            throw new BusinessException(\"Invalid Domain Name\");\r\n        } else if (lockdownRule.getProviderSideId() == null) {\r\n            throw new BusinessException(\"Invalid Provider-side ID\");\r\n        }\r\n\r\n        Credential credential = CredentialHelperService.getCredential(CLOUDFLARE_URL, crossStorageApi, defaultRepo);\r\n        if (credential == null) {\r\n            throw new BusinessException(\"No credential found for \" + CLOUDFLARE_URL);\r\n        } else {\r\n            logger.info(\"using credential {} with username {}\", credential.getUuid(), credential.getUsername());\r\n        }\r\n\r\n        String domainNameId = lockdownRule.getDomainName().getUuid();\r\n        String lockdownRuleId = lockdownRule.getProviderSideId();\r\n        logger.info(\"action:{}, lockdown rule:{}\", action, lockdownRuleId);\r\n\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        WebTarget target = client.target(\"https://\"+CLOUDFLARE_URL+\"/zones/\"+domainNameId+\"/firewall/lockdowns/\"+lockdownRuleId);\r\n\r\n        Map<String, Object> body = new HashMap<String, Object>();\r\n\r\n        // Urls\r\n        List<String> urls = lockdownRule.getUrls();\r\n        ArrayList<String> urlsArr = new ArrayList<String>();\r\n        for (String url : urls) {\r\n            urlsArr.add(url);\r\n        }\r\n        body.put(\"urls\", urlsArr);\r\n\r\n        // Configurations\r\n        ArrayList<Object> configurations = new ArrayList<Object>();\r\n        // IPs\r\n        if (lockdownRule.getIps()!= null) {\r\n            List<String> ips = lockdownRule.getIps();\r\n            for (String ip : ips) {\r\n                if(ipValidator.isValid(ip)) {\r\n                    Map<String,String> ipConfig = new HashMap<String, String>();\r\n                    ipConfig.put(\"target\", \"ip\");\r\n                    ipConfig.put(\"value\", ip);\r\n                    configurations.add(ipConfig);\r\n                } else {\r\n                    throw new BusinessException(\"IPs contain invalid IP address : \"+ip);\r\n                }\r\n            }\r\n        }\r\n        // // IP Ranges\r\n        // // TODO Need to validate Ip ranges\r\n        // // possible solution : https://gist.github.com/madan712/6651967\r\n        if (lockdownRule.getIpRanges() != null) {\r\n            List<String> ipRanges = lockdownRule.getIpRanges();\r\n            for (String ipRange : ipRanges) {\r\n                Map<String,String> ipRangeConfig = new HashMap<String, String>();\r\n                ipRangeConfig.put(\"target\", \"ip_range\");\r\n                ipRangeConfig.put(\"value\", ipRange);\r\n                configurations.add(ipRangeConfig);\r\n            }\r\n        }\r\n        body.put(\"configurations\", configurations);\r\n\r\n        // Paused - Optional - default false\r\n        body.put(\"paused\", lockdownRule.getPaused());\r\n\r\n        // Description - Optional\r\n        if(lockdownRule.getDescription() != null) {\r\n            body.put(\"description\", lockdownRule.getDescription());\r\n        }\r\n\r\n        String resp = JacksonUtil.toStringPrettyPrinted(body);\r\n        Response response = CredentialHelperService.setCredential(target.request(\"application/json\"), credential)\r\n            .put(Entity.json(resp));\r\n        String value = response.readEntity(String.class);\r\n        logger.info(\"response  :\" + value);\r\n        logger.debug(\"response status : {}\", response.getStatus());\r\n        parameters.put(RESULT_GUI_MESSAGE, \"Status: \"+response.getStatus()+\", response:\"+value);\r\n\r\n        if(response.getStatus()<300) {\r\n            JsonObject lockdownRuleObj = new JsonParser().parse(value).getAsJsonObject().get(\"result\").getAsJsonObject();\r\n\r\n            lockdownRule.setLastUpdated(OffsetDateTime.parse(lockdownRuleObj.get(\"modified_on\").getAsString()).toInstant());\r\n\r\n            // Paused\r\n            if (!lockdownRuleObj.get(\"paused\").isJsonNull()) {\r\n                lockdownRule.setPaused(lockdownRuleObj.get(\"paused\").getAsBoolean());\r\n            }\r\n\r\n            // Description\r\n            if (!lockdownRuleObj.get(\"description\").isJsonNull()) {\r\n                lockdownRule.setDescription(lockdownRuleObj.get(\"description\").getAsString());\r\n            }\r\n\r\n            // Urls\r\n            if (!lockdownRuleObj.get(\"urls\").isJsonNull()) {\r\n                ArrayList<String> newUrls = new ArrayList<String>();\r\n                JsonArray urlsArray = lockdownRuleObj.get(\"urls\").getAsJsonArray();\r\n                for (JsonElement url : urlsArray) {\r\n                    newUrls.add(url.getAsString());\r\n                }\r\n                lockdownRule.setUrls(newUrls);\r\n            }\r\n\r\n            // Configurations\r\n            // Seperate into IPs and IP Ranges\r\n            if (!lockdownRuleObj.get(\"configurations\").isJsonNull()) {\r\n                ArrayList<String> newIps = new ArrayList<String>();\r\n                ArrayList<String> newIpRanges = new ArrayList<String>();\r\n                JsonArray configurationsArr = lockdownRuleObj.get(\"configurations\").getAsJsonArray();\r\n\r\n                for (JsonElement configurationEl : configurationsArr) {\r\n                    JsonObject configurationObj = configurationEl.getAsJsonObject();\r\n                    String configurationTarget = configurationObj.get(\"target\").getAsString();\r\n                    String configurationValue = configurationObj.get(\"value\").getAsString();\r\n                    if (configurationTarget.equalsIgnoreCase(\"ip\")) {\r\n                        newIps.add(configurationValue);\r\n                    } else if (configurationTarget.equalsIgnoreCase(\"ip_range\")) {\r\n                        newIpRanges.add(configurationValue);\r\n                    }\r\n                }\r\n                lockdownRule.setIps(newIps);\r\n                lockdownRule.setIpRanges(newIpRanges);\r\n            }\r\n\r\n            try {\r\n                crossStorageApi.createOrUpdate(defaultRepo, lockdownRule);\r\n                logger.info(\"Lockdown Rule : {} successfully updated\", lockdownRule.getProviderSideId());\r\n            } catch (Exception e) {\r\n                logger.error(\"Error updating lockdown rule : {} {}\", lockdownRule.getProviderSideId(), e.getMessage());\r\n            }\r\n            response.close();\r\n        }\r\n    }\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}