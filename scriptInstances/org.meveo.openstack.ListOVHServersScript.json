{
  "code" : "org.meveo.openstack.ListOVHServersScript",
  "description" : "List OVH dev servers through the openstack api",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.openstack;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport com.google.gson.*;\r\nimport java.time.OffsetDateTime;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.OVHServer;\r\nimport org.meveo.model.customEntities.ServerImage;\r\nimport org.meveo.model.customEntities.ServerNetwork;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport java.util.ArrayList;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport org.meveo.security.PasswordUtils;\r\nimport org.meveo.openstack.CheckOVHToken;\r\nimport org.meveo.openstack.OpenstackAPI;\r\n\r\npublic class ListOVHServersScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListOVHServersScript.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private CheckOVHToken checkOVHToken = new CheckOVHToken();\r\n\r\n    private OpenstackAPI openstackAPI = new OpenstackAPI();\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n\r\n    public void callOVH(Credential credential, ServiceProvider openstack) throws BusinessException {\r\n        log.info(\"calling ListOVHServersScript\");\r\n        checkOVHToken.checkOVHToken(credential, openstack);\r\n        List<String> zones = openstack.getZones();\r\n        for (String zone : zones) {\r\n            List<JsonObject> servers = openstackAPI.computeAPI(\"servers/detail\", credential, null, \"get\", \"server\");\r\n            for (JsonObject serverObj : servers) {\r\n                OVHServer server = new OVHServer();\r\n                server.setUuid(serverObj.get(\"id\").getAsString());\r\n              \tserver.setProviderSideId(serverObj.get(\"id\").getAsString());\r\n                server.setInstanceName(serverObj.get(\"name\").getAsString());\r\n                server.setDomainName(serverObj.get(\"name\").getAsString().toLowerCase() + \".webdrone.fr\");\r\n                server.setOrganization(serverObj.get(\"tenant_id\").getAsString());\r\n                String idImage = serverObj.get(\"image\").getAsJsonObject().get(\"id\").getAsString();\r\n                String urlImage = \"images/\" + idImage;\r\n                List<JsonObject> images = openstackAPI.computeAPI(urlImage, credential, null, \"get\", \"image\");\r\n                for (JsonObject imageElement : images) {\r\n                  \tServerImage image = crossStorageApi.find(defaultRepo, ServerImage.class).by(\"uuid\", imageElement.get(\"id\").getAsString()).getResult();\r\n                  \tserver.setImage(image);\r\n                }\r\n                server.setCreationDate(OffsetDateTime.parse(serverObj.get(\"created\").getAsString()).toInstant());\r\n                server.setLastUpdate(OffsetDateTime.parse(serverObj.get(\"updated\").getAsString()).toInstant());\r\n                server.setZone(zone);\r\n              \tserver.setLocation(zone);\r\n                JsonArray publicIpArray = serverObj.get(\"addresses\").getAsJsonObject().get(\"Ext-Net\").getAsJsonArray();\r\n                for (JsonElement ip : publicIpArray) {\r\n                    JsonObject ipElement = ip.getAsJsonObject();\r\n                    if (ipElement.get(\"version\").getAsInt() == 4) {\r\n                        server.setPublicIp(ipElement.get(\"addr\").getAsString());\r\n                    }\r\n                }\r\n                server.setStatus(serverObj.get(\"status\").getAsString());\r\n                server.setProvider(openstack);\r\n                String idFlavor = serverObj.get(\"flavor\").getAsJsonObject().get(\"id\").getAsString();\r\n                String urlFlavor = \"flavors/\" + idFlavor;\r\n                List<JsonObject> flavors = openstackAPI.computeAPI(urlFlavor, credential, null, \"get\", \"flavor\");\r\n                for (JsonObject flavor : flavors) {\r\n                  \tserver.setServerType(\"38e49eca-b3cf-42ec-94c4-fd29a316477e\");\r\n                    server.setVolumeSize(flavor.get(\"disk\").getAsString() + \" GiB\");\r\n                }\r\n                if (!serverObj.get(\"OS-EXT-STS:task_state\").isJsonNull()) {\r\n                  \tlog.info(\"TU PASSE LA ? \");\r\n\t\t\t\t\tserver.setPublicIp(serverObj.get(\"OS-EXT-STS:task_state\").getAsString());\r\n                } else {\r\n                    JsonObject addresses = serverObj.get(\"addresses\").getAsJsonObject();\r\n                    List<JsonObject> networks = openstackAPI.networkAPI(\"networks\", credential, null, \"get\", \"network\");\r\n                    for (JsonObject network : networks) {\r\n                        String networkName = network.get(\"name\").getAsString();\r\n                        if (addresses.get(networkName) != null) {\r\n                            ServerNetwork networkObject = crossStorageApi.find(defaultRepo, ServerNetwork.class).by(\"uuid\", network.get(\"id\").getAsString()).getResult();\r\n                          \tArrayList<ServerNetwork> networkList = new ArrayList<>();\r\n                          \tnetworkList.add(networkObject);\r\n                            server.setNetwork(networkList);\r\n                        }\r\n                }\r\n                }\r\n              \t//Security Group\r\n              \t//TODO\r\n              \t//Root volume\r\n              \t//TODO\r\n              \t//Additional volume\r\n              \t//TODO\r\n              \t\r\n                try {\r\n                    crossStorageApi.createOrUpdate(defaultRepo, server);\r\n                } catch (Exception ex) {\r\n                    log.error(\"error creating server {} :{}\", server.getUuid(), ex.getMessage());\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.openstack.CheckOVHToken",
    "description" : "Check OVH provider token to make call to openstack api",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.openstack;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.time.OffsetDateTime;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport java.util.List;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.service.custom.CustomEntityTemplateService;\r\nimport org.meveo.service.crm.impl.CustomFieldTemplateService;\r\nimport org.meveo.model.customEntities.CustomEntityTemplate;\r\nimport org.meveo.model.crm.CustomFieldTemplate;\r\nimport org.meveo.security.PasswordUtils;\r\nimport org.meveo.model.crm.custom.CustomFieldValues;\r\nimport org.apache.commons.lang3.SerializationUtils;\r\n\r\npublic class CheckOVHToken extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(CheckOVHToken.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private CustomEntityTemplateService customEntityTemplateService = getCDIBean(CustomEntityTemplateService.class);\r\n\r\n    private CustomFieldTemplateService customFieldTemplateService = getCDIBean(CustomFieldTemplateService.class);\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n\r\n    public void checkOVHToken(Credential credential, ServiceProvider openstack) {\r\n        log.info(\"call CheckOVHToken\");\r\n        // Verification of the token\r\n        OffsetDateTime currentDate = OffsetDateTime.now();\r\n        OffsetDateTime expireDate = OffsetDateTime.parse(credential.getTokenExpiry().toString());\r\n        if (currentDate.isAfter(expireDate)) {\r\n            try {\r\n                // Dechiffrement du mot de passe\r\n                String stringToDecrypt = credential.getPasswordSecret();\r\n                String codeClass = credential.getClass().getSimpleName();\r\n                CustomEntityTemplate cet = customEntityTemplateService.findByCode(codeClass);\r\n                List<Object> objectsToHash = new ArrayList<>();\r\n              \tCustomEntityInstance credentialCEI = CEIUtils.pojoToCei(credential);\r\n                Map<String, CustomFieldTemplate> customFieldTemplates = customFieldTemplateService.findByAppliesTo(cet.getAppliesTo());\r\n                var hash = CEIUtils.getHash(credentialCEI, customFieldTemplates);\r\n                String stringDecrypted = PasswordUtils.decryptNoSecret(hash, stringToDecrypt);\r\n                // Creation du body\r\n                HashMap<String, Object> master = new HashMap<String, Object>();\r\n                HashMap<String, Object> auth = new HashMap<String, Object>();\r\n                HashMap<String, Object> identity = new HashMap<String, Object>();\r\n                HashMap<String, Object> password = new HashMap<String, Object>();\r\n                HashMap<String, Object> user = new HashMap<String, Object>();\r\n                HashMap<String, Object> domain = new HashMap<String, Object>();\r\n                ArrayList<String> method = new ArrayList<String>();\r\n                method.add(\"password\");\r\n                domain.put(\"id\", \"default\");\r\n                user.put(\"password\", stringDecrypted);\r\n                user.put(\"domain\", domain);\r\n                user.put(\"name\", credential.getUsername());\r\n                password.put(\"user\", user);\r\n                identity.put(\"methods\", method);\r\n                identity.put(\"password\", password);\r\n                auth.put(\"identity\", identity);\r\n                master.put(\"auth\", auth);\r\n                String resp = JacksonUtil.toStringPrettyPrinted(master);\r\n                // Creation of the identity token\r\n                Client client = ClientBuilder.newClient();\r\n                WebTarget target = client.target(\"https://auth.\" + openstack.getApiBaseUrl() + \"/v3/auth/tokens\");\r\n                Response response = target.request().post(Entity.json(resp));\r\n                credential.setToken(response.getHeaderString(\"X-Subject-Token\"));\r\n                credential.setTokenExpiry(currentDate.plusDays(1).toInstant());\r\n                try {\r\n                    crossStorageApi.createOrUpdate(defaultRepo, credential);\r\n                } catch (Exception ex) {\r\n                    log.error(\"error update credentials {} :{}\", credential.getUuid(), ex.getMessage());\r\n                }\r\n                response.close();\r\n            } catch (Exception ex) {\r\n                log.error(ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}