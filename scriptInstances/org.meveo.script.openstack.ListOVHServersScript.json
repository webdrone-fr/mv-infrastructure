{
  "code" : "org.meveo.script.openstack.ListOVHServersScript",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script.openstack;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.exception.BusinessApiException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport com.google.gson.*;\r\nimport java.math.BigInteger;\r\nimport java.time.OffsetDateTime;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.Server;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport javax.ws.rs.client.Entity;\r\nimport java.util.ArrayList;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\n\r\npublic class ListOVHServersScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListOVHServersScript.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private ServiceProvider getProvider(String code) {\r\n        return crossStorageApi.find(defaultRepo, ServiceProvider.class).by(\"code\", code).getResult();\r\n    }\r\n\r\n    private Credential getCredential(String domain) {\r\n        List<Credential> matchigCredentials = crossStorageApi.find(defaultRepo, Credential.class).by(\"domainName\", domain).getResults();\r\n        if (matchigCredentials.size() > 0) {\r\n            return matchigCredentials.get(0);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        log.info(\"calling ListOVHServersScript\");\r\n        ServiceProvider openstack = null;\r\n        try {\r\n            openstack = getProvider(\"OVH\");\r\n        } catch (Exception e) {\r\n            throw new BusinessException(e);\r\n        }\r\n        // Retreive credential\r\n        // openstack.getApiBaseUrl() = cloud.ovh.net\r\n        Credential credential = getCredential(openstack.getApiBaseUrl());\r\n        if (credential == null) {\r\n            throw new BusinessException(\"No credential found for \" + openstack.getApiBaseUrl());\r\n        } else {\r\n            log.info(\"using credential {} with username {}\", credential.getUuid(), credential.getUsername());\r\n        }\r\n        // Verification of the token\r\n        OffsetDateTime currentDate = OffsetDateTime.now();\r\n        OffsetDateTime expireDate = OffsetDateTime.parse(credential.getTokenExpiry().toString());\r\n        if (currentDate.isAfter(expireDate)) {\r\n            HashMap<String, Object> master = new HashMap<String, Object>();\r\n            HashMap<String, Object> auth = new HashMap<String, Object>();\r\n            HashMap<String, Object> identity = new HashMap<String, Object>();\r\n            HashMap<String, Object> password = new HashMap<String, Object>();\r\n            HashMap<String, Object> user = new HashMap<String, Object>();\r\n            HashMap<String, Object> domain = new HashMap<String, Object>();\r\n            ArrayList <String> method = new ArrayList<String>();\r\n            method.add(\"password\");\r\n            domain.put(\"id\", \"default\");\r\n            user.put(\"password\", \"yjkhNrpjaWaYkGZYbs6z3gmDa5V74R9Z\");\r\n            user.put(\"domain\", domain);\r\n            user.put(\"name\", credential.getUsername());\r\n            password.put(\"user\", user);\r\n            identity.put(\"methods\", method);\r\n            identity.put(\"password\", password);\r\n            auth.put(\"identity\", identity);\r\n            master.put(\"auth\", auth);\r\n            String resp = JacksonUtil.toStringPrettyPrinted(master);\r\n            // Creation of the identity token\r\n            log.info(credential.getPasswordSecret().getClass().getName());\r\n            Client client = ClientBuilder.newClient();\r\n            WebTarget target = client.target(\"https://auth.\" + openstack.getApiBaseUrl() + \"/v3/auth/tokens\");\r\n        \tResponse response = target.request().post(Entity.json(resp));\r\n            String value = response.readEntity(String.class);\r\n            log.info(\"Bonjour voici LA REPONSE !!!! => \" + response.getHeaderString(\"X-Subject-Token\"));\r\n            if (response.getStatus() < 300) {\r\n                JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(\"Headers\");\r\n                for (JsonElement element : rootArray) {\r\n                    JsonObject TokenObj = element.getAsJsonObject();\r\n                    credential.setToken(TokenObj.get(\"X-Subject-Token\").getAsString());\r\n                    credential.setTokenExpiry(currentDate.plusDays(1).toInstant());\r\n                }\r\n            }\r\n            response.close();\r\n        }\r\n        // Call every region to list server\r\n        Map<String, String> zones = new HashMap<String, String>();\r\n        zones = openstack.getZone();\r\n        for (String zone : zones.keySet()) {\r\n            Client clientListServers = ClientBuilder.newClient();\r\n            WebTarget targetListServer = clientListServers.target(\"https://compute.\" + zone + \".\" + openstack.getApiBaseUrl() + \"/v2.1/servers\");\r\n            Response response = targetListServer.request().header(\"X-Auth-Token\", credential.getToken()).get();\r\n            String value = response.readEntity(String.class);\r\n            if (response.getStatus() < 300) {\r\n                JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(\"servers\");\r\n                for (JsonElement element : rootArray) {\r\n                    JsonObject serverList = element.getAsJsonObject();\r\n                    Client clientServer = ClientBuilder.newClient();\r\n                    WebTarget targetServer = clientServer.target(\"https://compute.\" + zone + \".\" + openstack.getApiBaseUrl() + \"/v2.1/servers/\" + serverList.get(\"id\").getAsString());\r\n                    Response responseServer = targetServer.request().header(\"X-Auth-Token\", credential.getToken()).get();\r\n                    String valueServer = responseServer.readEntity(String.class);\r\n                    if (responseServer.getStatus() < 300) {\r\n                      \tJsonParser parser = new JsonParser();\r\n                        JsonElement jsonE = parser.parse(valueServer);\r\n                        JsonObject serverObj = jsonE.getAsJsonObject();\r\n                        serverObj = serverObj.get(\"server\").getAsJsonObject();\r\n                        // Create new servers\r\n                        Server server = new Server();\r\n                        //UUID\r\n                        server.setUuid(serverObj.get(\"id\").getAsString());\r\n                        //server name\r\n                        server.setInstanceName(serverObj.get(\"name\").getAsString());\r\n                        //tenant\r\n                        server.setOrganization(serverObj.get(\"tenant_id\").getAsString());\r\n                        //image\r\n                        server.setImage(serverObj.get(\"image\").getAsJsonObject().get(\"id\").getAsString());\r\n                        //Set the creation & updated date\r\n                        server.setCreationDate(OffsetDateTime.parse(serverObj.get(\"created\").getAsString()).toInstant());\r\n                        server.setLastUpdate(OffsetDateTime.parse(serverObj.get(\"updated\").getAsString()).toInstant());\r\n                        //zone\r\n                        server.setZone(zone);\r\n                        //public IP\r\n                        JsonArray publicIpArray = serverObj.get(\"addresses\").getAsJsonObject().get(\"Ext-Net\").getAsJsonArray();\r\n                        for (JsonElement ip : publicIpArray) {\r\n                           JsonObject ipElement = ip.getAsJsonObject();\r\n                           if (ipElement.get(\"version\").getAsInt() == 4) {\r\n                             server.setPublicIp(ipElement.get(\"addr\").getAsString());\r\n                           }\r\n                        }\r\n                        //status\r\n                        server.setStatus(serverObj.get(\"status\").getAsString());\r\n                        //provider\r\n                        server.setProvider(openstack);\r\n                        //flavor\r\n                        server.setServerType(serverObj.get(\"flavor\").getAsJsonObject().get(\"id\").getAsString());\r\n                        //volume\r\n                        JsonArray volumeArray = serverObj.get(\"os-extended-volumes:volumes_attached\").getAsJsonArray();\r\n                        for (JsonElement volume : volumeArray) {\r\n                          JsonObject volumeElement = volume.getAsJsonObject();\r\n                          server.setVolumeSize(volumeElement.get(\"id\").getAsString());\r\n                        }\r\n                        try {\r\n                            crossStorageApi.createOrUpdate(defaultRepo, server);\r\n                        } catch (Exception ex) {\r\n                            log.error(\"error creating server {} :{}\", server.getUuid(), ex.getMessage());\r\n                        }\r\n                    }\r\n                    responseServer.close();\r\n                }\r\n            }\r\n            response.close();\r\n        }\r\n    }\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}