{
  "code" : "org.meveo.script.openstack.DeleteOVHServerScript",
  "description" : "Delete ovh dev server through openstack api",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script.openstack;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.Server;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport javax.faces.application.FacesMessage;\r\nimport javax.faces.context.FacesContext;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport org.meveo.script.openstack.OpenstackAPI;\r\n\r\npublic class DeleteOVHServerScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListOVHServersScript.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private CheckOVHToken checkOVHToken = new CheckOVHToken();\r\n  \r\n  \tprivate OpenstackAPI openstackAPI = new OpenstackAPI();\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n\r\n    public void DeleteServer(Credential credential, ServiceProvider openstack, Server server) throws BusinessException {\r\n        log.info(\"calling DeleteOVHServerScript\");\r\n        // Check Token\r\n        checkOVHToken.checkOVHToken(credential, openstack);\r\n        // Check Server\r\n        if (server.getUuid() == null) {\r\n            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, \"Warning : \", \"server id not found for server: \" + server.getUuid()));\r\n            throw new BusinessException(\"Cannot delete server\");\r\n        }\r\n        boolean smt = server.getInstanceName().startsWith(\"dev-\");\r\n        log.info(\"condition to delete {}\", smt);\r\n        if (server.getInstanceName().startsWith(\"dev-\")) {\r\n            // Build and execute\r\n            Client client = ClientBuilder.newClient();\r\n            log.info(\"uuid used {}\", server.getUuid());\r\n            //WebTarget target = client.target(\"https://compute.\" + server.getZone() + \".cloud.ovh.net/v2.1/servers/\" + server.getUuid());\r\n            //Response response = target.request().header(\"X-Auth-Token\", credential.getToken()).delete();\r\n            //if (response.getStatus() < 300) {\r\n                server.setStatus(\"DELETED\");\r\n                server.setCreationDate(null);\r\n                server.setLastUpdate(null);\r\n                server.setPublicIp(null);\r\n                server.setDomainName(null);\r\n                try {\r\n                    crossStorageApi.createOrUpdate(defaultRepo, server);\r\n                } catch (Exception ex) {\r\n                    log.error(\"error updating server {} :{}\", server.getUuid(), ex.getMessage());\r\n                }\r\n            //}\r\n        } else {\r\n            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, \"Warning : \", \"The server you're trying to delete is not a dev server : \" + server.getInstanceName()));\r\n        }\r\n    }\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.script.openstack.OpenstackAPI",
    "description" : "Openstack \"factory\" for API's call",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.script.openstack;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport com.google.gson.*;\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\nimport org.meveo.model.customEntities.Credential;\r\n\r\npublic class OpenstackAPI extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListOVHServersScript.class);\r\n\r\n    private String computeBaseAPI = \"https://compute.gra11.cloud.ovh.net/v2.1/\";\r\n\r\n    private String networkBaseAPI = \"https://network.compute.gra11.cloud.ovh.net/v2.0/\";\r\n\r\n    private String imageBaseAPI = \"https://image.compute.gra11.cloud.ovh.net/v2/\";\r\n\r\n    private String identityBaseAPI = \"https://auth.cloud.ovh.net/\";\r\n\r\n    /**\r\n     * Do all of compute api call\r\n     * @param url the path of the call\r\n     * @param token the token currently used by the api\r\n     * @param jsonBody of the request. Can be null if no body is needed\r\n     * @param methodType GET, POST, DELETE, PUT\r\n     * @param objReturn to return is the json response\r\n     * @return the list of json object\r\n     * @throws if the methodType used is not supported\r\n     */\r\n    public List<JsonObject> computeAPI(String url, Credential token, String jsonBody, String methodType, String objReturn) throws BusinessException {\r\n        List<JsonObject> res = new ArrayList<>();\r\n        Client client = ClientBuilder.newClient();\r\n        if (methodType.equalsIgnoreCase(\"get\")) {\r\n            WebTarget target = client.target(this.computeBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token.getToken()).get();\r\n            String value = response.readEntity(String.class);\r\n            if (response.getStatus() < 300) {\r\n              \tString isList = \"\\\"\" + objReturn + \"s\\\": [\";\r\n                if (value.contains(isList)) {\r\n                    JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n                    for (JsonElement element : rootArray) {\r\n                        JsonObject JObject = element.getAsJsonObject();\r\n                        res.add(JObject);\r\n                    }\r\n                } else {\r\n                    JsonObject JObject = new JsonParser().parse(value).getAsJsonObject();\r\n                    JObject = JObject.get(objReturn).getAsJsonObject();\r\n                  \tres.add(JObject);\r\n                }\r\n            }\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"post\")) {\r\n            WebTarget target = client.target(this.computeBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token.getToken()).post(Entity.json(jsonBody));\r\n            String value = response.readEntity(String.class);\r\n            if (response.getStatus() < 300) {\r\n                JsonParser parserServer = new JsonParser();\r\n                JsonElement jsonServer = parserServer.parse(value);\r\n                JsonObject serverObj = jsonServer.getAsJsonObject();\r\n                serverObj = serverObj.get(objReturn).getAsJsonObject();\r\n                res.add(serverObj);\r\n            }\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"delete\")) {\r\n            WebTarget target = client.target(this.computeBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token.getToken()).delete();\r\n            String value = response.readEntity(String.class);\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"put\")) {\r\n        } else {\r\n            throw new BusinessException(\"Cannot found \" + methodType + \" in method type request. Available methods : get, post, delete, put\");\r\n        }\r\n        client.close();\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Do all of network api call\r\n     * @param url the path of the call\r\n     * @param token the token currently used by the api\r\n     * @param jsonBody of the request. Can be null if no body is needed\r\n     * @param methodType GET, POST, DELETE, PUT\r\n     * @param objReturn to return is the json response\r\n     * @return the list of json object\r\n     * @throws if the methodType used is not supported\r\n     */\r\n    public List<JsonObject> networkAPI(String url, Credential token, String jsonBody, String methodType, String objReturn) {\r\n        List<JsonObject> res = new ArrayList<>();\r\n        Client client = ClientBuilder.newClient();\r\n        WebTarget target = client.target(this.networkBaseAPI + url);\r\n        Response response = target.request().header(\"X-Auth-Token\", token.getToken()).get();\r\n        String value = response.readEntity(String.class);\r\n        if (response.getStatus() < 300) {\r\n            JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n            for (JsonElement element : rootArray) {\r\n                JsonObject JObject = element.getAsJsonObject();\r\n                res.add(JObject);\r\n            }\r\n        }\r\n        response.close();\r\n        client.close();\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Do all of image api call\r\n     * @param url the path of the call\r\n     * @param token the token currently used by the api\r\n     * @param jsonBody of the request. Can be null if no body is needed\r\n     * @param methodType GET, POST, DELETE, PUT\r\n     * @param objReturn to return is the json response\r\n     * @return the list of json object\r\n     * @throws if the methodType used is not supported\r\n     */\r\n    public List<JsonObject> imageAPI(String url, Credential token, String jsonBody, String methodType, String objReturn) {\r\n        List<JsonObject> res = new ArrayList<>();\r\n        Client client = ClientBuilder.newClient();\r\n        WebTarget target = client.target(this.imageBaseAPI + url);\r\n        Response response = target.request().header(\"X-Auth-Token\", token.getToken()).get();\r\n        String value = response.readEntity(String.class);\r\n        if (response.getStatus() < 300) {\r\n            JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n            for (JsonElement element : rootArray) {\r\n                JsonObject JObject = element.getAsJsonObject();\r\n                res.add(JObject);\r\n            }\r\n        }\r\n        response.close();\r\n        client.close();\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Do all of identity api call\r\n     * @param url the path of the call\r\n     * @param token the token currently used by the api\r\n     * @param jsonBody of the request. Can be null if no body is needed\r\n     * @param methodType GET, POST, DELETE, PUT\r\n     * @param objReturn to return is the json response\r\n     * @return the list of json object\r\n     * @throws if the methodType used is not supported\r\n     */\r\n    public List<JsonObject> IdentityAPI(String url, Credential token, String jsonBody, String methodType, String objReturn) {\r\n        List<JsonObject> res = new ArrayList<>();\r\n        Client client = ClientBuilder.newClient();\r\n        WebTarget target = client.target(this.identityBaseAPI + url);\r\n        Response response = target.request().header(\"X-Auth-Token\", token.getToken()).get();\r\n        String value = response.readEntity(String.class);\r\n        if (response.getStatus() < 300) {\r\n            JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n            for (JsonElement element : rootArray) {\r\n                JsonObject JObject = element.getAsJsonObject();\r\n                res.add(JObject);\r\n            }\r\n        }\r\n        response.close();\r\n        client.close();\r\n        return res;\r\n    }\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n}\r\n",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}