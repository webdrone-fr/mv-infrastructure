{
  "code" : "org.meveo.script.openstack.DeleteOVHServerScript",
  "description" : "Delete ovh dev server through openstack api",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script.openstack;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.ServerOVH;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport javax.faces.application.FacesMessage;\r\nimport javax.faces.context.FacesContext;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\n\r\npublic class DeleteOVHServerScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListOVHServersScript.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private CheckOVHToken checkOVHToken = new CheckOVHToken();\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n\r\n    public void DeleteServer(Credential credential, ServiceProvider openstack, ServerOVH server) throws BusinessException {\r\n        log.info(\"calling DeleteOVHServerScript\");\r\n        // Check Token\r\n        checkOVHToken.checkOVHToken(credential, openstack);\r\n        // Check Server\r\n        if (server.getUuid() == null) {\r\n            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, \"Warning : \", \"server id not found for server: \" + server.getUuid()));\r\n            throw new BusinessException(\"Cannot delete server\");\r\n        }\r\n        boolean smt = server.getInstanceName().startsWith(\"dev-\");\r\n        log.info(\"condition to delete {}\", smt);\r\n        if (server.getInstanceName().startsWith(\"dev-\")) {\r\n            // Build and execute\r\n            Client client = ClientBuilder.newClient();\r\n            log.info(\"uuid used {}\", server.getUuid());\r\n            WebTarget target = client.target(\"https://compute.\" + server.getZone() + \".cloud.ovh.net/v2.1/servers/\" + server.getUuid());\r\n            Response response = target.request().header(\"X-Auth-Token\", credential.getToken()).delete();\r\n            if (response.getStatus() < 300) {\r\n                server.setStatus(\"DELETED\");\r\n                server.setCreationDate(null);\r\n                server.setLastUpdate(null);\r\n                server.setPublicIp(null);\r\n                server.setDomainName(null);\r\n                try {\r\n                    crossStorageApi.createOrUpdate(defaultRepo, server);\r\n                } catch (Exception ex) {\r\n                    log.error(\"error updating server {} :{}\", server.getUuid(), ex.getMessage());\r\n                }\r\n            }\r\n        } else {\r\n            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, \"Warning : \", \"The server you're trying to delete is not a dev server : \" + server.getInstanceName()));\r\n        }\r\n    }\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}