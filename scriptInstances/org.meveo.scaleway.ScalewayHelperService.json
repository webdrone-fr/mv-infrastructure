{
  "code" : "org.meveo.scaleway.ScalewayHelperService",
  "description" : "Scaleway Helper Service",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.scaleway;\r\n\r\nimport java.time.Instant;\r\nimport java.util.ArrayList;\r\nimport java.util.Map;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.Response;\r\n\r\nimport com.google.gson.*;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.ScalewayServer;\r\nimport org.meveo.model.customEntities.ServerVolume;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.script.Script;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class ScalewayHelperService extends Script{\r\n    \r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(ScalewayHelperService.class);\r\n\r\n    static final private String SCALEWAY_URL = \"api.scaleway.com\";\r\n    static final private String BASE_PATH = \"/instance/v1/zones/\";\r\n\r\n    public static Long calcServerTotalVolumesSize(ScalewayServer server, CrossStorageApi crossStorageApiInstance, Repository defaultRepo) {\r\n        Long serverTotalVolumesSize = 0L;\r\n        ArrayList<Long> allVolumesSizes = new ArrayList<Long>();\r\n        // Root volume\r\n        try {\r\n            String serverRootVolumeId = server.getRootVolume().getUuid();\r\n            ServerVolume serverRootVolume = crossStorageApiInstance.find(defaultRepo, serverRootVolumeId, ServerVolume.class);\r\n            Long rootVolumeSize = Long.valueOf(serverRootVolume.getSize());\r\n            allVolumesSizes.add(rootVolumeSize);\r\n        } catch (Exception e) {\r\n            logger.error(\"Error retrieving root volume, {}\", e.getMessage());\r\n        }\r\n        // Additional volumes\r\n        if (server.getAdditionalVolumes() != null){\r\n            Map<String, ServerVolume> serverAdditionalVolumes = server.getAdditionalVolumes();\r\n            for (Map.Entry<String, ServerVolume> serverAdditionalVolumeEnt : serverAdditionalVolumes.entrySet()) {\r\n                try {\r\n                    String serverAdditionalVolumeId = serverAdditionalVolumes.get(serverAdditionalVolumeEnt.getKey()).getUuid();\r\n                    ServerVolume serverAdditionalVolume = crossStorageApiInstance.find(defaultRepo, serverAdditionalVolumeId, ServerVolume.class);\r\n                    Long serverAdditionalVolumeSize = Long.valueOf(serverAdditionalVolume.getSize());\r\n                    allVolumesSizes.add(serverAdditionalVolumeSize);\r\n                } catch (Exception e) {\r\n                    logger.error(\"Error retrieving additional volumes {}\", e.getMessage());\r\n                }\r\n            }\r\n        }\r\n        // Sum of all values\r\n        for (Long volumeSize : allVolumesSizes) {\r\n            serverTotalVolumesSize += volumeSize;\r\n        }\r\n        return serverTotalVolumesSize;\r\n    }\r\n\r\n    public static Long calcServerTotalLocalVolumesSize(ScalewayServer server, CrossStorageApi crossStorageApiInstance, Repository defaultRepo) {\r\n        Long serverTotalLocalVolumesSize = 0L;\r\n        ArrayList<Long> allLocalVolumesSizes = new ArrayList<Long>();\r\n        // Root volume\r\n        try {\r\n            String serverRootVolumeId = server.getRootVolume().getUuid();\r\n            ServerVolume serverRootVolume = crossStorageApiInstance.find(defaultRepo, serverRootVolumeId, ServerVolume.class);\r\n            String serverRootVolumeType = serverRootVolume.getVolumeType();\r\n            if(serverRootVolumeType.equalsIgnoreCase(\"l_ssd\")){\r\n                Long rootVolumeSize = Long.valueOf(serverRootVolume.getSize());\r\n                allLocalVolumesSizes.add(rootVolumeSize);\r\n            }\r\n        } catch (Exception e) {\r\n            logger.error(\"Error retrieving root volume, {}\", e.getMessage());\r\n        }\r\n        // Additional volumes\r\n        if (server.getAdditionalVolumes() != null){\r\n            Map<String, ServerVolume> serverAdditionalVolumes = server.getAdditionalVolumes();\r\n            for (Map.Entry<String, ServerVolume> serverAdditionalVolumeEnt : serverAdditionalVolumes.entrySet()) {\r\n                try {\r\n                    String serverAdditionalVolumeId = serverAdditionalVolumes.get(serverAdditionalVolumeEnt.getKey()).getUuid();\r\n                    ServerVolume serverAdditionalVolume = crossStorageApiInstance.find(defaultRepo, serverAdditionalVolumeId, ServerVolume.class);\r\n                    String serverAdditionalVolumeType = serverAdditionalVolume.getVolumeType();\r\n                    if (serverAdditionalVolumeType.equalsIgnoreCase(\"l_ssd\")) {\r\n                        Long serverAdditionalVolumeSize = Long.valueOf(serverAdditionalVolume.getSize());\r\n                        allLocalVolumesSizes.add(serverAdditionalVolumeSize);\r\n                    }\r\n                } catch (Exception e) {\r\n                    logger.error(\"Error retrieving additional volumes {}\", e.getMessage());\r\n                }\r\n            }\r\n        }\r\n        // Sum of all values\r\n        for (Long volumeSize : allLocalVolumesSizes) {\r\n            serverTotalLocalVolumesSize += volumeSize;\r\n        }\r\n        return serverTotalLocalVolumesSize;\r\n    }\r\n\r\n    public static JsonObject getServerTypeRequirements(ScalewayServer server, Credential credential) throws BusinessException {\r\n        JsonObject serverConstraints = new JsonObject();\r\n        String zone = server.getZone();\r\n        String serverType = server.getServerType();\r\n        \r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        WebTarget target = client.target(\"https://\"+SCALEWAY_URL+BASE_PATH+zone+\"/products/servers\");\r\n        Response response = CredentialHelperService.setCredential(target.request(\"application/json\"), credential).get();\r\n        String value = response.readEntity(String.class);\r\n        if (response.getStatus()<300) {\r\n            serverConstraints = \r\n                new JsonParser().parse(value).getAsJsonObject()\r\n                    .get(\"servers\").getAsJsonObject()\r\n                    .get(serverType).getAsJsonObject();\r\n        } else {\r\n            throw new BusinessException(\"Error retrieving Server type constraints\");\r\n        }\r\n        response.close();\r\n        return serverConstraints;\r\n    }\r\n\r\n    public static JsonObject getServerTypeAvailabilityInZone(String zone, Credential credential) throws BusinessException {\r\n        JsonObject serverAvailabilityObj = new JsonObject();\r\n\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        WebTarget target = client.target(\"https://\"+SCALEWAY_URL+BASE_PATH+zone+\"/products/servers/availability\");\r\n        Response response = CredentialHelperService.setCredential(target.request(\"application/json\"), credential).get();\r\n        String value = response.readEntity(String.class);\r\n        if (response.getStatus()<300) {\r\n            serverAvailabilityObj = new JsonParser().parse(value).getAsJsonObject().get(\"servers\").getAsJsonObject();\r\n        } else {\r\n            throw new BusinessException(\"Error retrieving Server type availability\");\r\n        }\r\n        response.close();\r\n        return serverAvailabilityObj;\r\n    }\r\n\r\n    public static JsonObject getServerUserData(String zone, String serverId, String key, Credential credential) throws BusinessException {\r\n        JsonObject serverUserDataObj = new JsonObject();\r\n\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        WebTarget target = client.target(\"https://\"+SCALEWAY_URL+BASE_PATH+zone+\"/servers/\"+serverId+\"/user_data/\"+key);\r\n        Response response = CredentialHelperService.setCredential(target.request(\"application/json\"), credential).get();\r\n        String value = response.readEntity(String.class);\r\n\r\n        if(response.getStatus()<300) {\r\n            serverUserDataObj = new JsonParser().parse(value).getAsJsonObject();\r\n        } else {\r\n            throw new BusinessException(\"Error retrieving Server : \"+serverId+\" User data\");\r\n        }\r\n        response.close();\r\n        return serverUserDataObj;\r\n    }\r\n\r\n    public static JsonObject getServerDetailsAfterSuccessfulAction(String zone, String serverId, Credential credential) throws BusinessException {\r\n        JsonObject serverDetailsObj = new JsonObject();\r\n\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        WebTarget target = client.target(\"https://\"+SCALEWAY_URL+BASE_PATH+zone+\"/servers/\"+serverId);\r\n        Response response = CredentialHelperService.setCredential(target.request(\"application/json\"), credential).get();\r\n        String value = response.readEntity(String.class);\r\n\r\n        if(response.getStatus()<300) {\r\n            serverDetailsObj = new JsonParser().parse(value).getAsJsonObject().get(\"server\").getAsJsonObject();\r\n        } else {\r\n            throw new BusinessException(\"Error retrieving Details for Server : \"+serverId);\r\n        }\r\n        response.close();\r\n        return serverDetailsObj;\r\n    }\r\n\r\n    public static JsonObject getProviderServerTypes(String zone, ServiceProvider provider, Credential credential) throws BusinessException {\r\n        JsonObject serverTypesObj = new JsonObject();\r\n        String providerId = provider.getUuid();\r\n\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        WebTarget target = client.target(\"https://\"+SCALEWAY_URL+BASE_PATH+zone+\"/products/servers\");\r\n        Response response = CredentialHelperService.setCredential(target.request(), credential).get();\r\n        String value = response.readEntity(String.class);\r\n\r\n        if (response.getStatus() < 300) {\r\n        serverTypesObj = new JsonParser().parse(value).getAsJsonObject().get(\"servers\").getAsJsonObject();\r\n        } else {\r\n            throw new BusinessException(\"Error retrieving server types for provider : \"+providerId);\r\n        }\r\n        response.close();\r\n        return serverTypesObj;\r\n    }\r\n\r\n    public static JsonArray getProviderImages(String zone, ServiceProvider provider, Credential credential) throws BusinessException {\r\n        JsonArray imagesArr = new JsonArray();\r\n        String providerId = provider.getUuid();\r\n\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        WebTarget target = client.target(\"https://\"+SCALEWAY_URL+BASE_PATH+zone+\"/images\");\r\n        Response response = CredentialHelperService.setCredential(target.request(), credential).get();\r\n        String value = response.readEntity(String.class);\r\n\r\n        if (response.getStatus() < 300) {\r\n            imagesArr = new JsonParser().parse(value).getAsJsonObject().get(\"images\").getAsJsonArray();\r\n        } else {\r\n            throw new BusinessException(\"Error retrieving images for provider : \"+providerId);\r\n        }\r\n        response.close();\r\n        return imagesArr;\r\n    }\r\n\r\n    public static JsonArray getProviderPublicIps(String zone, ServiceProvider provider, Credential credential) throws BusinessException {\r\n        JsonArray ipsArr = new JsonArray();\r\n        String providerId = provider.getUuid();\r\n\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        WebTarget target = client.target(\"https://\"+SCALEWAY_URL+BASE_PATH+zone+\"/ips\");\r\n        Response response = CredentialHelperService.setCredential(target.request(), credential).get();\r\n        String value = response.readEntity(String.class);\r\n        if (response.getStatus() < 300) {\r\n            ipsArr = new JsonParser().parse(value).getAsJsonObject().get(\"ips\").getAsJsonArray();\r\n        } else {\r\n            throw new BusinessException(\"Error retrieving public ips for provider : \"+providerId);\r\n        }\r\n        response.close();\r\n        return ipsArr;\r\n    }\r\n\r\n    public static void deleteVolume(ServerVolume volume, CrossStorageApi crossStorageApi, Repository defaultRepo, Credential credential) throws BusinessException {\r\n        String zone = volume.getZone();\r\n        String volumeId = volume.getProviderSideId();\r\n\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        WebTarget target = client.target(\"https://\"+SCALEWAY_URL+BASE_PATH+zone+\"/volumes/\"+volumeId);\r\n        Response response = CredentialHelperService.setCredential(target.request(), credential).delete();\r\n        String value = response.readEntity(String.class);\r\n        logger.info(\"response : {}\", value);\r\n        logger.debug(\"response status : {}\", response.getStatus());\r\n        if(response.getStatus()<300) {\r\n            try {\r\n                crossStorageApi.remove(defaultRepo, volume.getUuid(), ServerVolume.class);\r\n                logger.info(\"volume : {} deleted at : {}\", volumeId, Instant.now());\r\n            } catch (Exception e) {\r\n                logger.error(\"Error deleting volume : {}\", volumeId, e.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    // public static JsonObject getSecurityGroupDetails(String zone, String securityGroupId, Credential credential) throws BusinessException {\r\n    //     JsonObject securityGroupObj = new JsonObject();\r\n\r\n    //     Client client = ClientBuilder.newClient();\r\n    //     client.register(new CredentialHelperService.LoggingFilter());\r\n    //     WebTarget target = client.target(\"https://\"+SCALEWAY_URL+BASE_PATH+zone+\"/security_groups/\"+securityGroupId);\r\n    //     Response response = CredentialHelperService.setCredential(target.request(\"application/json\"), credential).get();\r\n    //     String value = response.readEntity(String.class);\r\n    //     if(response.getStatus()<300) {\r\n    //         securityGroupObj = new JsonParser().parse(value).getAsJsonObject()\r\n    //         .get(\"security_group\").getAsJsonObject();\r\n    //     } else {\r\n    //         throw new BusinessException(\"Error retrieving Details for Security Group : \"+securityGroupId);\r\n    //     }\r\n    //     response.close();\r\n    //     return securityGroupObj;\r\n    // }\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}