{
  "code" : "org.meveo.scaleway.PerformActionOnScalewayServer",
  "description" : "Perform Action on Server",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.scaleway;\r\n\r\nimport java.time.OffsetDateTime;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.Response;\r\n\r\nimport com.google.gson.*;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.ScalewayServer;\r\nimport org.meveo.model.customEntities.ServerAction;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class PerformActionOnScalewayServer extends Script {\r\n\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(PerformActionOnScalewayServer.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    static final private String SCALEWAY_URL = \"api.scaleway.com\";\r\n    static final private String BASE_PATH = \"/instance/v1/zones/\";\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        String action = parameters.get(\"action\").toString(); // Possible values include poweron, backup, stop_in_place, poweroff, terminate and reboot - default is poweron\r\n        ScalewayServer server = CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance)parameters.get(CONTEXT_ENTITY), ScalewayServer.class);\r\n        List<String> allowedServerActions = server.getServerActions();\r\n\r\n        if (server.getZone()==null) { //Required\r\n            throw new BusinessException(\"Invalid Server Zone\");\r\n        } else if(server.getProviderSideId()==null) { //Required\r\n            throw new BusinessException(\"Invalid Server Provider-side ID\");\r\n        } else if (!allowedServerActions.contains(action)) {\r\n            throw new BusinessException(\"Action \"+action+\" not allowed on Server \"+server.getUuid());\r\n        }\r\n\r\n        String zone = server.getZone();\r\n        String serverId = server.getProviderSideId();\r\n        logger.info(\"Performing {} on server : {}\", action,  serverId);\r\n\r\n        Credential credential = CredentialHelperService.getCredential(SCALEWAY_URL, crossStorageApi, defaultRepo);\r\n        if (credential == null) {\r\n            throw new BusinessException(\"No credential found for \"+SCALEWAY_URL);\r\n        } else {\r\n            logger.info(\"Using Credential {} with username {}\", credential.getUuid(), credential.getUsername());\r\n        }\r\n\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        WebTarget target = client.target(\"https://\"+SCALEWAY_URL+BASE_PATH+zone+\"/servers/\"+serverId+\"/action\");\r\n\r\n        // Server Type Constraints Check\r\n        String serverType = server.getServerType();\r\n        // Add up sizes of root volume + all additional volumes - Local\r\n        Long serverTotalLocalVolumesSizes = ScalewayHelperService.calcServerTotalLocalVolumesSize(server, crossStorageApi, defaultRepo);\r\n\r\n        // Get server type constraints\r\n        JsonObject serverConstraintsObj = ScalewayHelperService.getServerTypeRequirements(server, credential);\r\n        // Size requirements for sum of all volumes for server type\r\n        Long serverMinVolumeSizeReq = serverConstraintsObj.get(\"volumes_constraint\").getAsJsonObject().get(\"min_size\").getAsLong();\r\n        Long serverMaxVolumeSizeReq = serverConstraintsObj.get(\"volumes_constraint\").getAsJsonObject().get(\"max_size\").getAsLong();\r\n\r\n        // Action Conditions\r\n        // Block volumes are only available for DEV1, GP1 and RENDER offers\r\n        Map <String, Object> body = new HashMap<String, Object>();\r\n        if (action.equalsIgnoreCase(\"poweron\")) {\r\n            // Check if available volume size meets requirements for server type\r\n            String serverTotalLocalVolumesSizesStr = Long.toString(serverTotalLocalVolumesSizes);\r\n            String serverMinVolumeSizeReqStr = Long.toString(serverMinVolumeSizeReq);\r\n            String serverMaxVolumeSizeReqStr = Long.toString(serverMaxVolumeSizeReq);\r\n            if (serverTotalLocalVolumesSizes < serverMinVolumeSizeReq) {\r\n                logger.debug(\"Current available local volume size : {}, Minimum Local Volume size required for server type {} : {}\", serverTotalLocalVolumesSizesStr , serverType, serverMinVolumeSizeReqStr);\r\n                throw new BusinessException(\"Current total volume size is too small for selected server type\");\r\n            } else if (serverTotalLocalVolumesSizes > serverMaxVolumeSizeReq) {\r\n                logger.debug(\"Current available local volume size : {}, Maximum Local Volume size allowed for server type {} : {}\", serverTotalLocalVolumesSizesStr , serverType, serverMaxVolumeSizeReqStr);\r\n                throw new BusinessException(\"Current total volume size is too large for selected server type\");\r\n            } else {\r\n                logger.info(\"Server Total Local Volume size : {}; Min Total Volume size : {}; Max Total Volume Size : {}\", serverTotalLocalVolumesSizesStr, serverMinVolumeSizeReqStr, serverMaxVolumeSizeReqStr);\r\n            }\r\n        } else if (action.equalsIgnoreCase(\"backup\")) {\r\n            // If action is backup - check for name of Backup to be created\r\n            if (server.getBackupName() != null) { // nullable\r\n                String backupName = server.getBackupName();\r\n                body.put(\"name\", backupName);\r\n            }\r\n        }\r\n        body.put(\"action\", action);\r\n        \r\n        String resp = JacksonUtil.toStringPrettyPrinted(body);\r\n        Response response = CredentialHelperService.setCredential(target.request(\"application/json\"), credential).post(Entity.json((resp)));\r\n        String value = response.readEntity(String.class);\r\n        logger.info(\"response : {}\", value);\r\n        logger.debug(\"response status : {}\", response.getStatus());\r\n        parameters.put(RESULT_GUI_MESSAGE, \"Status: \"+response.getStatus()+\", response: \"+value);\r\n\r\n        if (response.getStatus() < 300) {\r\n            JsonObject serverActionObj = new JsonParser().parse(value).getAsJsonObject().get(\"task\").getAsJsonObject();\r\n            ServerAction serverAction = new ServerAction();\r\n            serverAction.setUuid(serverActionObj.get(\"id\").getAsString());\r\n            serverAction.setProviderSideId(serverActionObj.get(\"id\").getAsString());\r\n            serverAction.setServer(server);\r\n            // Provider\r\n            String providerId = server.getProvider().getUuid();\r\n            try {\r\n                ServiceProvider provider = crossStorageApi.find(defaultRepo, providerId, ServiceProvider.class);\r\n                serverAction.setProvider(provider);\r\n            } catch (Exception e) {\r\n                logger.error(\"Error retrieving server provider : {}\", providerId, e.getMessage());\r\n            }\r\n            serverAction.setCreationDate(OffsetDateTime.parse(serverActionObj.get(\"started_at\").getAsString()).toInstant());\r\n            serverAction.setResponse(serverActionObj.get(\"status\").getAsString());\r\n            serverAction.setResponseStatus(String.valueOf(response.getStatus()));\r\n            serverAction.setAction(action);\r\n            try {\r\n                crossStorageApi.createOrUpdate(defaultRepo, serverAction);\r\n            } catch (Exception e) {\r\n                logger.error(\"error creating server action {} : {}\", serverAction.getUuid(), e.getMessage());\r\n            }\r\n            response.close();\r\n        }\r\n    }\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}