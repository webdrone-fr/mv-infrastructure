{
  "code" : "org.meveo.scaleway.ScalewaySetters",
  "description" : "Scaleway Setters",
  "inputs" : [ {
    "name" : "serverType",
    "type" : "JsonObject"
  } ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.scaleway;\r\n\r\nimport java.time.OffsetDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport com.google.gson.*;\r\n\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.model.customEntities.Bootscript;\r\nimport org.meveo.model.customEntities.PublicIp;\r\nimport org.meveo.model.customEntities.ScalewayServer;\r\nimport org.meveo.model.customEntities.SecurityGroup;\r\nimport org.meveo.model.customEntities.SecurityRule;\r\nimport org.meveo.model.customEntities.ServerImage;\r\nimport org.meveo.model.customEntities.ServerVolume;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.script.Script;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class ScalewaySetters extends Script{\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(ScalewayHelperService.class);\r\n\r\n\r\n    public static ServerVolume setServerVolume(JsonObject volumeObj, ServerVolume volume, CrossStorageApi crossStorageApi, Repository defaultRepo) {\r\n        String volumeId = volumeObj.get(\"id\").getAsString();\r\n        volume.setProviderSideId(volumeId);\r\n        volume.setName(volumeObj.get(\"name\").getAsString());\r\n        volume.setVolumeType(volumeObj.get(\"volume_type\").getAsString());\r\n        volume.setSize(String.valueOf(volumeObj.get(\"size\").getAsLong()));\r\n        // Server\r\n        String serverId = null;\r\n        if (!volumeObj.get(\"server\").isJsonNull()) {\r\n            serverId = volumeObj.get(\"server\").getAsJsonObject().get(\"id\").getAsString();\r\n        }\r\n        volume.setServer(serverId);\r\n        if(!volumeObj.get(\"creation_date\").isJsonNull()) {\r\n            volume.setCreationDate(OffsetDateTime.parse(volumeObj.get(\"creation_date\").getAsString()).toInstant());\r\n        }\r\n        if(!volumeObj.get(\"modification_date\").isJsonNull()) {\r\n            volume.setLastUpdated(OffsetDateTime.parse(volumeObj.get(\"modification_date\").getAsString()).toInstant());\r\n\r\n        }\r\n        if(!volumeObj.get(\"zone\").isJsonNull()) {\r\n            volume.setZone(volumeObj.get(\"zone\").getAsString());\r\n\r\n        }\r\n        if(!volumeObj.get(\"state\").isJsonNull()) {\r\n            volume.setZone(volumeObj.get(\"state\").getAsString());\r\n\r\n        }\r\n        return volume;\r\n    }\r\n\r\n    public static ServerImage setServerImage(JsonObject imageObj, ServerImage image, CrossStorageApi crossStorageApi, Repository defaultRepo) {\r\n        String imageId = imageObj.get(\"id\").getAsString();\r\n        image.setProviderSideId(imageId);\r\n        image.setName(imageObj.get(\"name\").getAsString());\r\n        image.setCreationDate(OffsetDateTime.parse(imageObj.get(\"creation_date\").getAsString()).toInstant());\r\n        image.setLastUpdated(OffsetDateTime.parse(imageObj.get(\"modification_date\").getAsString()).toInstant());\r\n        image.setProject(imageObj.get(\"project\").getAsString());\r\n        image.setIsPublic(imageObj.get(\"public\").getAsBoolean());\r\n        image.setZone(imageObj.get(\"zone\").getAsString());\r\n        image.setState(imageObj.get(\"state\").getAsString());\r\n        // Server\r\n        if (!imageObj.get(\"from_server\").isJsonNull()) {\r\n            String serverId = imageObj.get(\"from_server\").getAsString();\r\n            ScalewayServer server = null;\r\n            try {\r\n                if(crossStorageApi.find(defaultRepo, ScalewayServer.class).by(\"providerSideId\", serverId).getResult()!=null) {\r\n                    server = crossStorageApi.find(defaultRepo, ScalewayServer.class).by(\"providerSideId\", serverId).getResult();\r\n                    image.setFromServer(serverId);\r\n                }                \r\n            } catch (Exception e) {\r\n                logger.error(\"Error retrieving server : {} attached to image : {}\", serverId, imageId, e.getMessage());\r\n            }\r\n            if(server!=null || imageObj.get(\"public\").getAsBoolean()==false) {\r\n                // Volumes\r\n                // Root Volume\r\n                if (!imageObj.get(\"root_volume\").isJsonNull()) {\r\n                    JsonObject rootVolumeObj = imageObj.get(\"root_volume\").getAsJsonObject();\r\n                    String rootVolumeId = rootVolumeObj.get(\"id\").getAsString();\r\n                    ServerVolume rootVolume = null;\r\n                    try {\r\n                        if(crossStorageApi.find(defaultRepo, ServerVolume.class).by(\"providerSideId\", rootVolumeId).getResult() != null) {\r\n                            rootVolume = crossStorageApi.find(defaultRepo, ServerVolume.class).by(\"providerSideId\", rootVolumeId).getResult();\r\n                        } else {\r\n                            rootVolume = new ServerVolume();\r\n                            rootVolume.setUuid(rootVolumeId);\r\n                        }\r\n                        rootVolume = ScalewaySetters.setServerVolume(rootVolumeObj, rootVolume, crossStorageApi, defaultRepo);\r\n                        crossStorageApi.createOrUpdate(defaultRepo, rootVolume);\r\n                        image.setRootVolume(rootVolume);\r\n                    } catch (Exception e) {\r\n                        logger.error(\"Error retrieving root volume : {} for image : {}\", rootVolumeId, imageId, e.getMessage());\r\n                    }\r\n                }\r\n                // Additional Volumes\r\n                if (!imageObj.get(\"extra_volumes\").isJsonNull()) {\r\n                    Map<String, ServerVolume> additionalVolumes = new HashMap<String, ServerVolume>();\r\n                    JsonObject additionalVolumesObj = imageObj.get(\"extra_volumes\").getAsJsonObject();\r\n                    Set<Map.Entry<String, JsonElement>> additionalVolumeEntries = additionalVolumesObj.entrySet();\r\n                    for(Map.Entry<String, JsonElement> additionalVolumeEntry : additionalVolumeEntries) {\r\n                        JsonObject additionalVolumeObj = additionalVolumesObj.get(additionalVolumeEntry.getKey()).getAsJsonObject();\r\n                        String additionalVolumeId = additionalVolumeObj.get(\"id\").getAsString();\r\n                        ServerVolume additionalVolume = null;\r\n                        try {\r\n                            if(crossStorageApi.find(defaultRepo, ServerVolume.class).by(\"providerSideId\", additionalVolumeId).getResult() != null) {\r\n                                additionalVolume = crossStorageApi.find(defaultRepo, ServerVolume.class).by(\"providerSideId\", additionalVolumeId).getResult();\r\n                            } else {\r\n                                additionalVolume = new ServerVolume();\r\n                                additionalVolume.setUuid(additionalVolumeId);\r\n                            }\r\n                            additionalVolume = ScalewaySetters.setServerVolume(additionalVolumeObj, additionalVolume, crossStorageApi, defaultRepo);\r\n                            crossStorageApi.createOrUpdate(defaultRepo, additionalVolume);\r\n                            additionalVolumes.put(additionalVolumeEntry.getKey(), additionalVolume);\r\n                        } catch (Exception e) {\r\n                            logger.error(\"Error retrieving additional volume : {} for image : {}\", additionalVolumeId, imageId, e.getMessage());\r\n                        }\r\n                    }\r\n                    image.setAdditionalVolumes(additionalVolumes);\r\n                }\r\n            }\r\n        }\r\n        // Bootscript\r\n        if (!imageObj.get(\"default_bootscript\").isJsonNull()) {\r\n            JsonObject bootscriptObj = imageObj.get(\"default_bootscript\").getAsJsonObject();\r\n            String bootscriptId = bootscriptObj.get(\"id\").getAsString();\r\n            Bootscript bootscript = null;\r\n            try {\r\n                if(crossStorageApi.find(defaultRepo, Bootscript.class).by(\"providerSideId\", bootscriptId).getResult() != null) {\r\n                    bootscript = crossStorageApi.find(defaultRepo, Bootscript.class).by(\"providerSideId\", bootscriptId).getResult();\r\n                } else {\r\n                    bootscript = new Bootscript();\r\n                    bootscript.setUuid(bootscriptId);\r\n                }\r\n                bootscript = ScalewaySetters.setBootScript(bootscriptObj, bootscript, crossStorageApi, defaultRepo);\r\n                crossStorageApi.createOrUpdate(defaultRepo, bootscript);\r\n                image.setDefaultBootscript(bootscript);\r\n            } catch (Exception e) {\r\n                logger.error(\"Error retrieving bootscript : {} for image : {}\", bootscriptId, imageId, e.getMessage());\r\n            }\r\n        }\r\n        // Tags\r\n        if (!imageObj.get(\"tags\").isJsonNull()) {\r\n            ArrayList<String> imageTags = new ArrayList<String>();\r\n            JsonArray imageTagsArr = imageObj.get(\"tags\").getAsJsonArray();\r\n            for (JsonElement tag : imageTagsArr) {\r\n                imageTags.add(tag.getAsString());\r\n            }\r\n            image.setTags(imageTags);\r\n        }\r\n        try {\r\n            crossStorageApi.createOrUpdate(defaultRepo, image);\r\n        } catch (Exception e) {\r\n            logger.error(\"Error setting image : {}\", imageId, e.getMessage());\r\n        }\r\n        return image;\r\n    }\r\n\r\n    public static Bootscript setBootScript(JsonObject bootscriptObj, Bootscript bootscript, CrossStorageApi crossStorageApi, Repository defaultRepo) {\r\n        String bootscriptId = bootscriptObj.get(\"id\").getAsString();\r\n        bootscript.setProviderSideId(bootscriptId);\r\n        bootscript.setZone(bootscriptObj.get(\"zone\").getAsString());\r\n        bootscript.setArch(bootscriptObj.get(\"architecture\").getAsString());\r\n        bootscript.setBootcmdargs(bootscriptObj.get(\"bootcmdargs\").getAsString());\r\n        bootscript.setDtb(bootscriptObj.get(\"dtb\").getAsString());\r\n        bootscript.setInitrd(bootscriptObj.get(\"initrd\").getAsString());\r\n        bootscript.setKernel(bootscriptObj.get(\"kernel\").getAsString());\r\n        bootscript.setOrganization(bootscriptObj.get(\"organization\").getAsString());\r\n        bootscript.setProject(bootscriptObj.get(\"project\").getAsString());\r\n        bootscript.setIsDefault(bootscriptObj.get(\"default\").getAsBoolean());\r\n        bootscript.setIsPublic(bootscriptObj.get(\"public\").getAsBoolean());\r\n        bootscript.setTitle(bootscriptObj.get(\"title\").getAsString());\r\n        return bootscript;\r\n    }\r\n\r\n    public static ScalewayServer setScalewayServer(JsonObject serverObj, ScalewayServer server, ServiceProvider provider, CrossStorageApi crossStorageApi, Repository defaultRepo) {\r\n        String serverId = serverObj.get(\"id\").getAsString();\r\n        server.setProviderSideId(serverId);\r\n        server.setInstanceName(serverObj.get(\"name\").getAsString());\r\n        server.setCreationDate(OffsetDateTime.parse(serverObj.get(\"creation_date\").getAsString()).toInstant());\r\n        server.setLastUpdate(OffsetDateTime.parse(serverObj.get(\"modification_date\").getAsString()).toInstant());\r\n        server.setServerType(serverObj.get(\"commercial_type\").getAsString());\r\n        server.setZone(serverObj.get(\"zone\").getAsString());\r\n        server.setProvider(provider);\r\n        server.setOrganization(serverObj.get(\"organization\").getAsString());\r\n        server.setStatus(serverObj.get(\"state\").getAsString());\r\n        server.setDomainName(serverObj.get(\"hostname\").getAsString());\r\n        server.setSergentUrl(server.getDomainName() + \":8001/sergent\");\r\n        // Public IP\r\n        if(!serverObj.get(\"public_ip\").isJsonNull()) {\r\n            server.setPublicIp(serverObj.get(\"public_ip\").getAsJsonObject().get(\"address\").getAsString());\r\n        }\r\n        // Image\r\n        if(!serverObj.get(\"image\").isJsonNull()) {\r\n            JsonObject imageObj = serverObj.get(\"image\").getAsJsonObject();\r\n            String imageId = imageObj.get(\"id\").getAsString();\r\n            ServerImage image = null;\r\n            try {\r\n                if(crossStorageApi.find(defaultRepo, ServerImage.class).by(\"providerSideId\", imageId).getResult() != null) {\r\n                    image = crossStorageApi.find(defaultRepo, ServerImage.class).by(\"providerSideId\", imageId).getResult();\r\n                } else {\r\n                    image = new ServerImage();\r\n                    image.setUuid(imageId);\r\n                }\r\n                image = ScalewaySetters.setServerImage(imageObj, image, crossStorageApi, defaultRepo);\r\n                crossStorageApi.createOrUpdate(defaultRepo, image);\r\n                server.setImage(image);\r\n            } catch (Exception e) {\r\n                logger.error(\"Error retrieving image : {} for server : {}\", imageId, serverId, e.getMessage());\r\n            } \r\n        }\r\n        //Volumes\r\n        JsonObject serverVolumesObj = serverObj.get(\"volumes\").getAsJsonObject();\r\n        Long serverTotalVolumesSize = 0L;\r\n        Long serverTotalLocalVolumesSize = 0L;\r\n        if (serverVolumesObj.entrySet().size() >= 1) {\r\n            // Root Volume\r\n            JsonObject rootVolumeObj = serverVolumesObj.get(\"0\").getAsJsonObject();\r\n            String rootVolumeId = rootVolumeObj.get(\"id\").getAsString();\r\n            ServerVolume rootVolume = null;\r\n            try {\r\n                if(crossStorageApi.find(defaultRepo, ServerVolume.class).by(\"providerSideId\", rootVolumeId).getResult() != null) {\r\n                    rootVolume = crossStorageApi.find(defaultRepo, ServerVolume.class).by(\"providerSideId\", rootVolumeId).getResult();\r\n                } else {\r\n                    rootVolume = new ServerVolume();\r\n                    rootVolume.setUuid(rootVolumeId);\r\n                }\r\n                rootVolume = setServerVolume(rootVolumeObj, rootVolume, crossStorageApi, defaultRepo);\r\n                crossStorageApi.createOrUpdate(defaultRepo, rootVolume);\r\n                server.setRootVolume(rootVolume);\r\n                serverTotalVolumesSize = Long.valueOf(rootVolume.getSize());\r\n                if(rootVolume.getVolumeType().equalsIgnoreCase(\"l_ssd\")){\r\n                    serverTotalLocalVolumesSize = Long.valueOf(rootVolume.getSize());\r\n                }\r\n            } catch (Exception e) {\r\n                logger.error(\"Error retrieving root volume : {} \", rootVolumeId, e.getMessage());\r\n            }\r\n            // Additional Volumes\r\n            if (serverVolumesObj.entrySet().size() > 1) {\r\n                Map<String, ServerVolume> serverAdditionalVolumes = new HashMap<String, ServerVolume>();\r\n                Set<Map.Entry<String, JsonElement>> additionalVolumeEntries = serverVolumesObj.entrySet();\r\n                for (Map.Entry<String, JsonElement> additionalVolumeEntry : additionalVolumeEntries)  {\r\n                    if(!additionalVolumeEntry.getKey().equals(\"0\")) { // key for root volume\r\n                        JsonObject additionalVolumeObj = serverVolumesObj.get(additionalVolumeEntry.getKey()).getAsJsonObject();\r\n                        String additionalVolumeId = additionalVolumeObj.get(\"id\").getAsString();\r\n                        ServerVolume additionalVolume = null;\r\n                        try {\r\n                            if(crossStorageApi.find(defaultRepo, ServerVolume.class).by(\"providerSideId\", additionalVolumeId).getResult() != null) {\r\n                                additionalVolume = crossStorageApi.find(defaultRepo, ServerVolume.class).by(\"providerSideId\", additionalVolumeId).getResult();\r\n                            } else {\r\n                                additionalVolume = new ServerVolume();\r\n                                additionalVolume.setUuid(additionalVolumeId);\r\n                            }\r\n                            additionalVolume = setServerVolume(additionalVolumeObj, additionalVolume, crossStorageApi, defaultRepo);\r\n                            crossStorageApi.createOrUpdate(defaultRepo, additionalVolume);\r\n                            serverAdditionalVolumes.put(additionalVolumeEntry.getKey(), additionalVolume);\r\n                            serverTotalVolumesSize += Long.valueOf(additionalVolume.getSize());\r\n                            if(additionalVolume.getVolumeType().equalsIgnoreCase(\"l_ssd\")){\r\n                                serverTotalLocalVolumesSize = Long.valueOf(additionalVolume.getSize());\r\n                            }\r\n                        } catch (Exception e) {\r\n                            logger.error(\"Error retrieving additional volume : {}\", additionalVolumeId, e.getMessage());\r\n                        }\r\n                    }\r\n                }\r\n                server.setAdditionalVolumes(serverAdditionalVolumes);\r\n            }\r\n        }\r\n        // Volume size\r\n        server.setVolumeSize(String.valueOf(serverTotalVolumesSize));\r\n        server.setTotalLocalVolumesSize(String.valueOf(serverTotalLocalVolumesSize));\r\n        // Server Actions\r\n        ArrayList<String> actions = new ArrayList<String>();\r\n        JsonArray serverActionsArr = serverObj.get(\"allowed_actions\").getAsJsonArray();\r\n        for (JsonElement serverAction : serverActionsArr) {\r\n            actions.add(serverAction.getAsString());\r\n        }\r\n        server.setServerActions(actions);\r\n        // Location Definition\r\n        String locationDefinition = \"zone_id/platform_id/cluster_id/hypervisor_id/node_id\";\r\n        server.setLocationDefinition(locationDefinition);\r\n        // Location\r\n        if (!serverObj.get(\"location\").isJsonNull()) {\r\n            JsonObject locationObj = serverObj.get(\"location\").getAsJsonObject();\r\n            String zone_id = locationObj.get(\"zone_id\").getAsString();\r\n            String platform_id = locationObj.get(\"platform_id\").getAsString();\r\n            String cluster_id = locationObj.get(\"cluster_id\").getAsString();\r\n            String hypervisor_id = locationObj.get(\"hypervisor_id\").getAsString();\r\n            String node_id = locationObj.get(\"node_id\").getAsString();\r\n            String location = zone_id+\"/\"+platform_id+\"/\"+cluster_id+\"/\"+hypervisor_id+\"/\"+node_id;\r\n            server.setLocation(location);\r\n        }\r\n        // Security Group\r\n        if (!serverObj.get(\"security_group\").isJsonNull()) {\r\n            JsonObject securityGroupObj = serverObj.get(\"security_group\").getAsJsonObject();\r\n            String securityGroupId = securityGroupObj.get(\"id\").getAsString();\r\n            SecurityGroup securityGroup = null;\r\n            try {\r\n                if (crossStorageApi.find(defaultRepo, SecurityGroup.class).by(\"providerSideId\", securityGroupId).getResult() != null) {\r\n                    securityGroup = crossStorageApi.find(defaultRepo, SecurityGroup.class).by(\"providerSideId\", securityGroupId).getResult();\r\n                } else {\r\n                    // TODO update Security Groups\r\n                    securityGroup = new SecurityGroup();\r\n                    securityGroup.setUuid(securityGroupId);\r\n                    securityGroup.setProviderSideId(securityGroupId);\r\n                    securityGroup.setName(securityGroupObj.get(\"name\").getAsString());\r\n                    try {\r\n                        crossStorageApi.createOrUpdate(defaultRepo, securityGroup);\r\n                    }catch (Exception e) {\r\n                        logger.error(\"Error creating new security group\", e.getMessage());\r\n                    }\r\n                }\r\n                server.setSecurityGroup(securityGroup);\r\n            } catch (Exception e) {\r\n                logger.error(\"Error retrieving security group : {}\", securityGroupId, e.getMessage());\r\n            }\r\n        }\r\n\r\n        // Scaleway-specific Server Values\r\n        server.setDynamicIpRequired(serverObj.get(\"dynamic_ip_required\").getAsBoolean());\r\n        server.setIsProtected(serverObj.get(\"protected\").getAsBoolean());\r\n        server.setArch(serverObj.get(\"arch\").getAsString());\r\n        server.setProject(serverObj.get(\"project\").getAsString());\r\n        server.setBootType(serverObj.get(\"boot_type\").getAsString());\r\n        // Private IP\r\n        if (!serverObj.get(\"private_ip\").isJsonNull()) {\r\n            server.setPrivateIp(serverObj.get(\"private_ip\").getAsString());\r\n        }\r\n        // Bootscript\r\n        if(!serverObj.get(\"bootscript\").isJsonNull()) {\r\n            JsonObject bootscriptObj = serverObj.get(\"bootscript\").getAsJsonObject();\r\n            String bootscriptId = bootscriptObj.get(\"id\").getAsString();\r\n            Bootscript bootscript = null;\r\n            try {\r\n                if(crossStorageApi.find(defaultRepo, Bootscript.class).by(\"providerSideId\", bootscriptId).getResult() != null) {\r\n                    bootscript = crossStorageApi.find(defaultRepo, Bootscript.class).by(\"providerSideId\", bootscriptId).getResult();\r\n                } else {\r\n                    bootscript = new Bootscript();\r\n                    bootscript.setUuid(bootscriptId);\r\n                }\r\n                bootscript = setBootScript(bootscriptObj, bootscript, crossStorageApi, defaultRepo);\r\n                crossStorageApi.createOrUpdate(defaultRepo, bootscript);\r\n                server.setBootscript(bootscript);\r\n            } catch (Exception e) {\r\n                logger.error(\"Error retrieving bootscript : {}\", bootscriptId, e.getMessage());\r\n            }\r\n        }\r\n        // Placement Group\r\n        if (!serverObj.get(\"placement_group\").isJsonNull()) {\r\n            server.setPlacementGroup(serverObj.get(\"placement_group\").getAsJsonObject().get(\"name\").getAsString());\r\n        }\r\n        // Ipv6\r\n        server.setEnableIPvSix(serverObj.get(\"enable_ipv6\").getAsBoolean());\r\n        if(!serverObj.get(\"ipv6\").isJsonNull()) {\r\n            server.setIpVSix(serverObj.get(\"ipv6\").getAsJsonObject().get(\"address\").getAsString());\r\n        }\r\n        // Maintenances\r\n        if (!serverObj.get(\"maintenances\").isJsonNull()) {\r\n            ArrayList<String> maintenances = new ArrayList<String>();\r\n            JsonArray maintenancesArr = serverObj.get(\"maintenances\").getAsJsonArray();\r\n            for (JsonElement maintenance : maintenancesArr) {\r\n                maintenances.add(maintenance.getAsString()); // could be Objects\r\n            }\r\n            server.setMaintenances(maintenances); // Array\r\n        }\r\n        // Private NICs\r\n        if (!serverObj.get(\"private_nics\").isJsonNull()) {\r\n            JsonArray nicsArr = serverObj.get(\"private_nics\").getAsJsonArray();\r\n            ArrayList<String> nicIds = new ArrayList<String>();\r\n            for (JsonElement nic : nicsArr) {\r\n                JsonObject privateNic = nic.getAsJsonObject();\r\n                String nicId = privateNic.get(\"id\").getAsString();\r\n                nicIds.add(nicId);\r\n            }\r\n            server.setPrivateNics(nicIds);\r\n        }\r\n        try {\r\n            crossStorageApi.createOrUpdate(defaultRepo, server);\r\n        } catch (Exception e) {\r\n            logger.error(\"Error setting Server : {}\", serverId, e.getMessage());\r\n        }\r\n        return server;\r\n    }\r\n\r\n    public static PublicIp setPublicIp(JsonObject publicIpObj, PublicIp publicIp, ServiceProvider provider, CrossStorageApi crossStorageApi, Repository defaultRepo) {\r\n        String publicIpId = publicIpObj.get(\"id\").getAsString();\r\n        publicIp.setProviderSideId(publicIpId);\r\n        publicIp.setIpVFourAddress(publicIpObj.get(\"address\").getAsString());\r\n        publicIp.setOrganization(publicIpObj.get(\"organization\").getAsString());\r\n        publicIp.setProject(publicIpObj.get(\"project\").getAsString());\r\n        publicIp.setZone(publicIpObj.get(\"zone\").getAsString());\r\n        publicIp.setProvider(provider);\r\n        // reverse - nullable\r\n        if (!publicIpObj.get(\"reverse\").isJsonNull()) {\r\n            publicIp.setReverse(publicIpObj.get(\"reverse\").getAsString());\r\n        }\r\n        // Server\r\n        if (!publicIpObj.get(\"server\").isJsonNull()) {\r\n            String serverId = publicIpObj.get(\"server\").getAsJsonObject().get(\"id\").getAsString();\r\n            try {\r\n                if(crossStorageApi.find(defaultRepo, ScalewayServer.class).by(\"providerSideId\", serverId).getResult()!=null) {\r\n                    ScalewayServer server = crossStorageApi.find(defaultRepo, ScalewayServer.class).by(\"providerSideId\", serverId).getResult();\r\n                    if(server.getInstanceName().startsWith(\"dev-\")) {\r\n                        publicIp.setServer(server);\r\n                    }\r\n                }\r\n            } catch (Exception e) {\r\n                logger.error(\"Error retrieving server : {} for Public Ip : {}\", serverId, publicIpId, e.getMessage());\r\n            }\r\n        }\r\n        // Tags\r\n        if (!publicIpObj.get(\"tags\").isJsonNull()) {\r\n            JsonArray imageTagsArr = publicIpObj.get(\"tags\").getAsJsonArray();\r\n            ArrayList<String> imageTags = new ArrayList<String>();\r\n            for (JsonElement tag : imageTagsArr) {\r\n                imageTags.add(tag.getAsString());\r\n            }\r\n            publicIp.setTags(imageTags);\r\n        }\r\n        try {\r\n            crossStorageApi.createOrUpdate(defaultRepo, publicIp);\r\n        } catch (Exception e) {\r\n            logger.error(\"Error setting public ip : {}\", publicIpId, e.getMessage());\r\n        }\r\n        return publicIp;\r\n    }\r\n\r\n    public static SecurityGroup setSecurityGroup(JsonObject securityGroupObj, SecurityGroup securityGroup, CrossStorageApi crossStorageApi, Repository defaultRepo) {\r\n        String securityGroupId = securityGroupObj.get(\"id\").getAsString();\r\n        securityGroup.setProviderSideId(securityGroupId);\r\n        securityGroup.setName(securityGroupObj.get(\"name\").getAsString());\r\n        securityGroup.setCreationDate(OffsetDateTime.parse(securityGroupObj.get(\"creation_date\").getAsString()).toInstant());\r\n        securityGroup.setLastUpdated(OffsetDateTime.parse(securityGroupObj.get(\"modification_date\").getAsString()).toInstant());\r\n        securityGroup.setProject(securityGroupObj.get(\"project\").getAsString());\r\n        securityGroup.setStateful(securityGroupObj.get(\"stateful\").getAsBoolean());\r\n        securityGroup.setState(securityGroupObj.get(\"state\").getAsString());\r\n        securityGroup.setInboundDefaultPolicy(securityGroupObj.get(\"inbound_default_policy\").getAsString());\r\n        securityGroup.setOutboundDefaultPolicy(securityGroupObj.get(\"outbound_default_policy\").getAsString());\r\n        securityGroup.setProjectDefault(securityGroupObj.get(\"project_default\").getAsBoolean());\r\n        securityGroup.setEnableDefaultSecurity(securityGroupObj.get(\"enable_default_security\").getAsBoolean());\r\n        securityGroup.setZone(securityGroupObj.get(\"zone\").getAsString());\r\n        // Description\r\n        if(!securityGroupObj.get(\"description\").isJsonNull()) {\r\n            securityGroup.setDescription(securityGroupObj.get(\"description\").getAsString());\r\n        }\r\n        // Servers\r\n        if(!securityGroupObj.get(\"servers\").isJsonNull()) {\r\n            JsonArray serversArr = securityGroupObj.get(\"servers\").getAsJsonArray();\r\n            ArrayList<String> servers = new ArrayList<String>();\r\n            for (JsonElement serverEl : serversArr) {\r\n                JsonObject serverObj = serverEl.getAsJsonObject();\r\n                String serverId = serverObj.get(\"id\").getAsString();\r\n                String serverInstanceName = serverObj.get(\"name\").getAsString();\r\n                // if(serverInstanceName.startsWith(\"dev-\") && crossStorageApi.find(defaultRepo, Server.class).by(\"providerSideId\", serverId).getResult() != null) {\r\n                //     servers.add(serverId);\r\n                // }\r\n                servers.add(serverId+\" : \"+serverInstanceName);\r\n            }\r\n            securityGroup.setServers(servers);\r\n        }\r\n        return securityGroup;\r\n    }\r\n\r\n    public static SecurityRule setSecurityRule(JsonObject ruleObj, SecurityRule rule, CrossStorageApi crossStorageApi, Repository defaultRepo) {\r\n        String ruleId = ruleObj.get(\"id\").getAsString();\r\n        rule.setProviderSideId(ruleId);\r\n        rule.setProtocol(ruleObj.get(\"protocol\").getAsString());\r\n        rule.setDirection(ruleObj.get(\"direction\").getAsString());\r\n        rule.setAction(ruleObj.get(\"action\").getAsString());\r\n        rule.setIpRange(ruleObj.get(\"ip_range\").getAsString());\r\n        if(!ruleObj.get(\"dest_port_from\").isJsonNull()) {\r\n            rule.setDestPortFrom(ruleObj.get(\"dest_port_from\").getAsLong());\r\n        }\r\n        if(!ruleObj.get(\"dest_port_to\").isJsonNull()) {\r\n            rule.setDestPortTo(ruleObj.get(\"dest_port_to\").getAsLong());\r\n        }\r\n        rule.setPosition(ruleObj.get(\"position\").getAsLong());\r\n        if(!ruleObj.get(\"editable\").isJsonNull()) {\r\n            rule.setEditable(ruleObj.get(\"editable\").getAsBoolean());\r\n        }\r\n        rule.setZone(ruleObj.get(\"zone\").getAsString());\r\n        return rule;\r\n    }\r\n\r\n    public static Map<String, Object> setServerType(JsonObject serverTypeObj) {\r\n        Map<String, Object> serverType = new HashMap<String, Object>();\r\n        serverType.put(\"hourly_price\", serverTypeObj.get(\"hourly_price\").getAsLong());\r\n        serverType.put(\"ncpus\", serverTypeObj.get(\"ncpus\").getAsLong());\r\n        serverType.put(\"ram\", serverTypeObj.get(\"ram\").getAsLong());\r\n        serverType.put(\"arch\", serverTypeObj.get(\"arch\").getAsString());\r\n        serverType.put(\"baremetal\", serverTypeObj.get(\"baremetal\").getAsBoolean());\r\n        if(!serverTypeObj.get(\"alt_names\").isJsonNull()) {\r\n            JsonArray altNamesArr = serverTypeObj.get(\"alt_names\").getAsJsonArray();\r\n            List<String> altNames = new ArrayList<String>();\r\n            for(JsonElement altName :altNamesArr){\r\n                altNames.add(altName.getAsString());\r\n            }\r\n            serverType.put(\"alt_names\", altNames);\r\n        }\r\n        if(!serverTypeObj.get(\"per_volume_constraint\").isJsonNull()) {\r\n            Map<String, Object> perVolumeConstraint = new HashMap<String, Object>();\r\n            JsonObject perVolumeConstraintObj = serverTypeObj.get(\"per_volume_constraint\").getAsJsonObject();\r\n            Set<Map.Entry<String, JsonElement>> perVolumeConstraintEntries = perVolumeConstraintObj.entrySet();\r\n            for(Map.Entry<String, JsonElement> perVolumeConstraintEntry : perVolumeConstraintEntries) {\r\n                Map<String, Long> perVolumeConstraints = new HashMap<String, Long>();\r\n                JsonObject volumeConstraintsObj = perVolumeConstraintEntry.getValue().getAsJsonObject();\r\n                perVolumeConstraints.put(\"min_size\", volumeConstraintsObj.get(\"min_size\").getAsLong());\r\n                perVolumeConstraints.put(\"max_size\", volumeConstraintsObj.get(\"max_size\").getAsLong());\r\n                perVolumeConstraint.put(perVolumeConstraintEntry.getKey(), perVolumeConstraints);\r\n            }\r\n            serverType.put(\"per_volume_constraint\", perVolumeConstraint);\r\n        }\r\n        if(!serverTypeObj.get(\"volumes_constraint\").isJsonNull()) {\r\n            Map<String, Long> volumesConstraint = new HashMap<String, Long>();\r\n            JsonObject volumesConstraintObj = serverTypeObj.get(\"volumes_constraint\").getAsJsonObject();\r\n            volumesConstraint.put(\"min_size\", volumesConstraintObj.get(\"min_size\").getAsLong());\r\n            volumesConstraint.put(\"max_size\", volumesConstraintObj.get(\"max_size\").getAsLong());\r\n            serverType.put(\"volumes_constraint\", volumesConstraint);\r\n        }\r\n        if(!serverTypeObj.get(\"gpu\").isJsonNull()){\r\n            serverType.put(\"gpu\", serverTypeObj.get(\"gpu\").getAsLong());\r\n        }\r\n        if (!serverTypeObj.get(\"network\").isJsonNull()) {\r\n            Map<String, Object> network = new HashMap<String, Object>();\r\n            JsonObject networkObj = serverTypeObj.get(\"network\").getAsJsonObject();\r\n            JsonArray interfacesArr = networkObj.get(\"interfaces\").getAsJsonArray();\r\n            List<Object> interfaces = new ArrayList<Object>();\r\n            for (JsonElement interfaceEl : interfacesArr) {\r\n                Map<String, Long> networkInterface = new HashMap<String, Long>();\r\n                JsonObject interfaceObj = interfaceEl.getAsJsonObject();\r\n                if(!interfaceObj.get(\"internal_bandwidth\").isJsonNull()) {\r\n                    networkInterface.put(\"internal_bandwidth\", interfaceObj.get(\"internal_bandwidth\").getAsLong());\r\n                }\r\n                if(!interfaceObj.get(\"internet_bandwidth\").isJsonNull()) {\r\n                    networkInterface.put(\"internet_bandwidth\", interfaceObj.get(\"internet_bandwidth\").getAsLong());\r\n                }\r\n                interfaces.add(networkInterface);\r\n            }\r\n            network.put(\"interfaces\", interfaces);\r\n            if(!networkObj.get(\"sum_internal_bandwidth\").isJsonNull()) {\r\n                network.put(\"sum_internal_bandwidth\", networkObj.get(\"sum_internal_bandwidth\").getAsLong());\r\n            }\r\n            if(!networkObj.get(\"sum_internet_bandwidth\").isJsonNull()) {\r\n                network.put(\"sum_internet_bandwidth\", networkObj.get(\"sum_internet_bandwidth\").getAsLong());\r\n            }\r\n            network.put(\"ipv6_support\", networkObj.get(\"ipv6_support\").getAsBoolean());\r\n            serverType.put(\"network\", network);\r\n        }\r\n        return serverType;\r\n    }\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}