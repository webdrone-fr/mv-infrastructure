{
  "code" : "org.meveo.script.ListScalewayServersScript",
  "description" : "list scaleway servers",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.exception.BusinessApiException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport com.google.gson.*;\r\nimport java.math.BigInteger;\r\nimport java.time.OffsetDateTime;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.Server;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\n\r\npublic class ListScalewayServersScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListScalewayServersScript.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n\r\n    public void listScaleway(Credential credential, ServiceProvider scaleway) throws BusinessException {\r\n        log.info(\"Call ListScalewayServersScript\");\r\n        Client client = ClientBuilder.newClient();\r\n        WebTarget target = client.target(\"https://\" + scaleway.getApiBaseUrl() + \"/instance/v1/zones/fr-par-1/servers\");\r\n        Response response = CredentialHelperService.setCredential(target.request(), credential).get();\r\n        String value = response.readEntity(String.class);\r\n        log.info(\"response  :\" + value);\r\n        log.debug(\"response status : {}\", response.getStatus());\r\n        if (response.getStatus() < 300) {\r\n            JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(\"servers\");\r\n            /*if(rootObject.get(\"servers\")!=JsonNull.INSTANCE){\r\n            Object servers = rootObject.get(\"servers\");\r\n            log.info(\"received servers:{}\",servers);\r\n          }*/\r\n            for (JsonElement element : rootArray) {\r\n                JsonObject serverObj = element.getAsJsonObject();\r\n                Server server = new Server();\r\n                server.setUuid(serverObj.get(\"id\").getAsString());\r\n                String name = serverObj.get(\"name\").getAsString();\r\n                server.setInstanceName(name);\r\n                if (name.contains(\".\")) {\r\n                    int ldi = name.lastIndexOf(\".\");\r\n                    String ext = name.substring(ldi);\r\n                    String part = name.substring(0, ldi);\r\n                    if (part.contains(\".\")) {\r\n                        ldi = part.lastIndexOf(\".\");\r\n                        server.setDomainName(name.substring(ldi + 1));\r\n                    } else {\r\n                        server.setDomainName(name);\r\n                    }\r\n                }\r\n                if (serverObj.has(\"image\") && !serverObj.get(\"image\").isJsonNull()) {\r\n                    server.setImage(serverObj.get(\"image\").getAsJsonObject().get(\"name\").getAsString());\r\n                }\r\n                server.setCreationDate(OffsetDateTime.parse(serverObj.get(\"creation_date\").getAsString()).toInstant());\r\n                server.setLastUpdate(OffsetDateTime.parse(serverObj.get(\"modification_date\").getAsString()).toInstant());\r\n                server.setOrganization(serverObj.get(\"organization\").getAsString());\r\n                server.setServerType(serverObj.get(\"commercial_type\").getAsString());\r\n                server.setZone(serverObj.get(\"zone\").getAsString());\r\n                if (serverObj.has(\"public_ip\")) {\r\n                    server.setPublicIp(serverObj.get(\"public_ip\").getAsJsonObject().get(\"address\").getAsString());\r\n                }\r\n                if (serverObj.has(\"volumes\") && serverObj.get(\"volumes\").getAsJsonObject().has(\"0\")) {\r\n                    BigInteger size = serverObj.get(\"volumes\").getAsJsonObject().get(\"0\").getAsJsonObject().get(\"size\").getAsBigInteger();\r\n                    server.setVolumeSize(size.divide(new BigInteger(\"1000000\")).toString() + \"MB\");\r\n                }\r\n                server.setStatus(serverObj.get(\"state\").getAsString());\r\n                server.setProvider(scaleway);\r\n                log.info(\"server: {} provider:{}\", server.getUuid(), server.getProvider().getUuid());\r\n                try {\r\n                    crossStorageApi.createOrUpdate(defaultRepo, server);\r\n                } catch (Exception ex) {\r\n                    log.error(\"error creating server {} :{}\", server.getUuid(), ex.getMessage());\r\n                }\r\n            }\r\n        }\r\n        response.close();\r\n    }\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}