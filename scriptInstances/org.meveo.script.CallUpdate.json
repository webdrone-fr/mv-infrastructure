{
  "code" : "org.meveo.script.CallUpdate",
  "description" : "Update server generic",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script;\r\n\r\nimport java.util.Map;\r\nimport java.util.List;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.customEntities.Server;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport javax.faces.application.FacesMessage;\r\nimport javax.faces.context.FacesContext;\r\nimport org.meveo.script.openstack.UpdateOVHServersScript;\r\n\r\npublic class CallUpdate extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(CallListing.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n  \r\n  \tprivate UpdateOVHServersScript updateOVHServersScript = new UpdateOVHServersScript();\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n        log.info(\"calling CallUpdate\");\r\n        Server server = CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance) parameters.get(CONTEXT_ENTITY), Server.class);\r\n        ServiceProvider openstack = server.getProvider();\r\n        Credential credential = CredentialHelperService.getCredential(openstack.getApiBaseUrl(), crossStorageApi, defaultRepo);\r\n        if (credential == null) {\r\n            throw new BusinessException(\"No credential found for \" + openstack.getApiBaseUrl());\r\n        } else {\r\n            log.info(\"using credential {} with username {}\", credential.getUuid(), credential.getUsername());\r\n            switch(credential.getDomainName()) {\r\n                case \"cloud.ovh.net\":\r\n                    updateOVHServersScript.updateServer(credential, openstack, server);\r\n                    break;\r\n              \tcase \"api.scaleway.com\":\r\n                \t//create\r\n                \tbreak;\r\n              \tcase \"api.gandi.net/v5/\":\r\n                \t//create\r\n                \tbreak;\r\n              \tdefault:\r\n                \tFacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, \"Warning : \", \"No update script found for \" + openstack.getCode()));\r\n            }\r\n        }\r\n    }\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.script.openstack.UpdateOVHServersScript",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.script.openstack;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.Server;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.script.openstack.CheckOVHToken;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport java.util.HashMap;\r\nimport com.google.gson.*;\r\nimport java.time.OffsetDateTime;\r\nimport org.meveo.model.customEntities.CustomEntityTemplate;\r\nimport org.meveo.service.custom.CustomEntityTemplateService;\r\nimport org.meveo.model.crm.CustomFieldTemplate;\r\nimport org.meveo.service.crm.impl.CustomFieldTemplateService;\r\n\r\npublic class UpdateOVHServersScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListOVHServersScript.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private CustomEntityTemplateService customEntityTemplateService = getCDIBean(CustomEntityTemplateService.class);\r\n\r\n    private CustomFieldTemplateService customFieldTemplateService = getCDIBean(CustomFieldTemplateService.class);\r\n\r\n    private CheckOVHToken checkOVHToken = new CheckOVHToken();\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n\r\n    public void updateServer(Credential credential, ServiceProvider openstack, Server server) throws BusinessException {\r\n        log.info(\"calling UpdateOVHServersScripts\");\r\n        // Check Token\r\n        checkOVHToken.checkOVHToken(credential, openstack);\r\n    \t// Retreive actual values from the server\r\n      \tHashMap<String, Object> oldServ = new HashMap<String, Object>();\r\n      \toldServ = retreiveValues(credential, server.getUuid(), server.getZone());\r\n      \tString codeClass = server.getClass().getSimpleName();\r\n\t\tCustomEntityTemplate newServCET = customEntityTemplateService.findByCode(codeClass);\r\n      \tMap<String, CustomFieldTemplate> newServCFT = customFieldTemplateService.findByAppliesTo(newServCET.getAppliesTo());\r\n      \tlog.info(newServCET.toString());\r\n      \tlog.info(oldServ.toString());\r\n      \tfor(Map.Entry<String, CustomFieldTemplate> entry : newServCFT.entrySet()) {\r\n          \t\r\n        }\r\n    }\r\n\r\n    private HashMap<String, Object> retreiveValues(Credential credential, String serverUuid, String zone) {\r\n        HashMap<String, Object> oldServ = new HashMap<String, Object>();\r\n        Client client = ClientBuilder.newClient();\r\n        WebTarget target = client.target(\"https://compute.\" + zone + \".cloud.ovh.net/v2.1/servers/\" + serverUuid);\r\n        Response response = target.request().header(\"X-Auth-Token\", credential.getToken()).get();\r\n        String value = response.readEntity(String.class);\r\n        Integer responseStatus = response.getStatus();\r\n        if (responseStatus < 300) {\r\n            JsonParser parserServer = new JsonParser();\r\n            JsonElement jsonServer = parserServer.parse(value);\r\n            JsonObject serverObj = jsonServer.getAsJsonObject();\r\n            serverObj = serverObj.get(\"server\").getAsJsonObject();\r\n            // Store values in hashMap\r\n            oldServ.put(\"uuid\", serverObj.get(\"id\").getAsString());\r\n            oldServ.put(\"instanceName\", serverObj.get(\"name\").getAsString());\r\n            oldServ.put(\"domainName\", serverObj.get(\"name\").getAsString().toLowerCase() + \".webdrone.fr\");\r\n            oldServ.put(\"organization\", serverObj.get(\"tenant_id\").getAsString());\r\n            String idImage = serverObj.get(\"image\").getAsJsonObject().get(\"id\").getAsString();\r\n            WebTarget targetImage = client.target(\"https://image.compute.\" + zone + \".cloud.ovh.net/v2/images/\" + idImage);\r\n            Response responseImage = targetImage.request().header(\"X-Auth-Token\", credential.getToken()).get();\r\n            String ImageValue = responseImage.readEntity(String.class);\r\n            if (!(ImageValue.startsWith(\"404\"))) {\r\n                JsonParser parser = new JsonParser();\r\n                JsonElement jsonE = parser.parse(ImageValue);\r\n                JsonObject ImageObj = jsonE.getAsJsonObject();\r\n                if (ImageObj != null) {\r\n                    oldServ.put(\"image\", ImageObj.get(\"name\").getAsString());\r\n                }\r\n            } else {\r\n                oldServ.put(\"image\", \"Image not found\");\r\n                log.error(\"Image with id : \" + idImage + \" cannot be found for the server : \" + serverObj.get(\"name\").getAsString());\r\n            }\r\n            oldServ.put(\"creationDate\", OffsetDateTime.parse(serverObj.get(\"created\").getAsString()).toInstant());\r\n            oldServ.put(\"lastUpdate\", OffsetDateTime.parse(serverObj.get(\"updated\").getAsString()).toInstant());\r\n            oldServ.put(\"zone\", zone);\r\n            JsonArray publicIpArray = serverObj.get(\"addresses\").getAsJsonObject().get(\"Ext-Net\").getAsJsonArray();\r\n            for (JsonElement ip : publicIpArray) {\r\n                JsonObject ipElement = ip.getAsJsonObject();\r\n                if (ipElement.get(\"version\").getAsInt() == 4) {\r\n                    oldServ.put(\"publicIp\", ipElement.get(\"addr\").getAsString());\r\n                }\r\n            }\r\n            oldServ.put(\"status\", serverObj.get(\"status\").getAsString());\r\n            String idFlavor = serverObj.get(\"flavor\").getAsJsonObject().get(\"id\").getAsString();\r\n            WebTarget targetVolume = client.target(\"https://compute.\" + zone + \".cloud.ovh.net/v2.1/flavors/\" + idFlavor);\r\n            Response responseVolume = targetVolume.request().header(\"X-Auth-Token\", credential.getToken()).get();\r\n            String flavorValue = responseVolume.readEntity(String.class);\r\n            if (response.getStatus() < 300) {\r\n                JsonParser parser = new JsonParser();\r\n                JsonElement jsonE = parser.parse(flavorValue);\r\n                JsonObject flavorObj = jsonE.getAsJsonObject();\r\n                flavorObj = flavorObj.get(\"flavor\").getAsJsonObject();\r\n                // flavor\r\n                oldServ.put(\"serverType\", flavorObj.get(\"name\").getAsString());\r\n                // volume\r\n                oldServ.put(\"volumeSize\", flavorObj.get(\"disk\").getAsString() + \" GiB\");\r\n            }\r\n        }\r\n        return oldServ;\r\n    }\r\n}\r\n",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ {
      "code" : "org.meveo.script.openstack.CheckOVHToken",
      "description" : "Check the openstack user token and create a new one if needed",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.script.openstack;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.time.OffsetDateTime;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport java.util.List;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.service.custom.CustomEntityTemplateService;\r\nimport org.meveo.service.crm.impl.CustomFieldTemplateService;\r\nimport org.meveo.model.customEntities.CustomEntityTemplate;\r\nimport org.meveo.model.crm.CustomFieldTemplate;\r\nimport org.meveo.security.PasswordUtils;\r\nimport org.meveo.model.crm.custom.CustomFieldValues;\r\nimport org.apache.commons.lang3.SerializationUtils;\r\n\r\npublic class CheckOVHToken extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListOVHServersScript.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private CustomEntityTemplateService customEntityTemplateService = getCDIBean(CustomEntityTemplateService.class);\r\n\r\n    private CustomFieldTemplateService customFieldTemplateService = getCDIBean(CustomFieldTemplateService.class);\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n\r\n    public void checkOVHToken(Credential credential, ServiceProvider openstack) {\r\n        log.info(\"call CheckOVHToken\");\r\n        // Verification of the token\r\n        OffsetDateTime currentDate = OffsetDateTime.now();\r\n        OffsetDateTime expireDate = OffsetDateTime.parse(credential.getTokenExpiry().toString());\r\n        if (currentDate.isAfter(expireDate)) {\r\n            try {\r\n                // Dechiffrement du mot de passe\r\n                //String stringToDecrypt = credential.getPasswordSecret();\r\n                //String codeClass = credential.getClass().getSimpleName();\r\n                //CustomEntityTemplate cet = customEntityTemplateService.findByCode(codeClass);\r\n                //List<Object> objectsToHash = new ArrayList<>();\r\n              \t//CustomEntityInstance credentialCEI = CEIUtils.pojoToCei(credential);\r\n                //Map<String, CustomFieldTemplate> customFieldTemplates = customFieldTemplateService.findByAppliesTo(cet.getAppliesTo());\r\n                //var hash = CEIUtils.getHash(credentialCEI, customFieldTemplates);\r\n                //String stringDecrypted = PasswordUtils.decryptNoSecret(hash, stringToDecrypt);\r\n                String stringDecrypted = "TODO";\r\n                // Creation du body\r\n                HashMap<String, Object> master = new HashMap<String, Object>();\r\n                HashMap<String, Object> auth = new HashMap<String, Object>();\r\n                HashMap<String, Object> identity = new HashMap<String, Object>();\r\n                HashMap<String, Object> password = new HashMap<String, Object>();\r\n                HashMap<String, Object> user = new HashMap<String, Object>();\r\n                HashMap<String, Object> domain = new HashMap<String, Object>();\r\n                ArrayList<String> method = new ArrayList<String>();\r\n                method.add(\"password\");\r\n                domain.put(\"id\", \"default\");\r\n                user.put(\"password\", stringDecrypted);\r\n                user.put(\"domain\", domain);\r\n                user.put(\"name\", credential.getUsername());\r\n                password.put(\"user\", user);\r\n                identity.put(\"methods\", method);\r\n                identity.put(\"password\", password);\r\n                auth.put(\"identity\", identity);\r\n                master.put(\"auth\", auth);\r\n                String resp = JacksonUtil.toStringPrettyPrinted(master);\r\n                // Creation of the identity token\r\n                Client client = ClientBuilder.newClient();\r\n                WebTarget target = client.target(\"https://auth.\" + openstack.getApiBaseUrl() + \"/v3/auth/tokens\");\r\n                Response response = target.request().post(Entity.json(resp));\r\n                credential.setToken(response.getHeaderString(\"X-Subject-Token\"));\r\n                credential.setTokenExpiry(currentDate.plusDays(1).toInstant());\r\n                try {\r\n                    crossStorageApi.createOrUpdate(defaultRepo, credential);\r\n                } catch (Exception ex) {\r\n                    log.error(\"error update credentials {} :{}\", credential.getUuid(), ex.getMessage());\r\n                }\r\n                response.close();\r\n            } catch (Exception ex) {\r\n                log.error(ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    } ]
  }, {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}
