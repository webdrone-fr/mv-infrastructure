{
  "code" : "org.meveo.script.CallUpdate",
  "description" : "Update server generic",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script;\r\n\r\nimport java.util.Map;\r\nimport java.util.List;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.script.CredentialsUtils;\r\nimport org.meveo.model.customEntities.Server;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport javax.faces.application.FacesMessage;\r\nimport javax.faces.context.FacesContext;\r\n\r\npublic class CallUpdate extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(CallListing.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private CredentialsUtils credentialsUtils = new CredentialsUtils();\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n        log.info(\"calling CallUpdate\");\r\n        Server server = CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance) parameters.get(CONTEXT_ENTITY), Server.class);\r\n        ServiceProvider openstack = server.getProvider();\r\n        Credential credential = credentialsUtils.getCredential(openstack.getApiBaseUrl());\r\n        if (credential == null) {\r\n            throw new BusinessException(\"No credential found for \" + openstack.getApiBaseUrl());\r\n        } else {\r\n            log.info(\"using credential {} with username {}\", credential.getUuid(), credential.getUsername());\r\n            switch(credential.getDomainName()) {\r\n                case \"cloud.ovh.net\":\r\n                    // updateOVHServerScript.createServer(credential, openstack, server);\r\n                    break;\r\n              \tcase \"api.scaleway.com\":\r\n                \t//create\r\n                \tbreak;\r\n              \tcase \"api.gandi.net/v5/\":\r\n                \t//create\r\n                \tbreak;\r\n              \tdefault:\r\n                \tFacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, \"Warning : \", \"No update script found for \" + openstack.getCode()));\r\n            }\r\n        }\r\n    }\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.script.CredentialsUtils",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.script;\r\n\r\nimport java.util.Map;\r\nimport java.util.List;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.model.customEntities.Credential;\r\n\r\npublic class CredentialsUtils extends Script {\r\n  \r\n    private static final Logger log = LoggerFactory.getLogger(CallListing.class);\r\n  \r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n  \r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n  \r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\t\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tsuper.execute(parameters);\r\n\t}\r\n  \r\n    public Credential getCredential(String domain) {\r\n        List<Credential> matchigCredentials = crossStorageApi.find(defaultRepo, Credential.class).by(\"domainName\", domain).getResults();\r\n        if (matchigCredentials.size() > 0) {\r\n            return matchigCredentials.get(0);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}