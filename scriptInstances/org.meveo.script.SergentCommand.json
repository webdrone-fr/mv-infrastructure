{
  "code" : "org.meveo.script.SergentCommand",
  "description" : "execute a sergent command",
  "inputs" : [ {
    "name" : "command",
    "type" : "String"
  } ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.time.Instant;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.model.customEntities.Server;\r\nimport org.meveo.model.customEntities.ServerAction;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.persistence.CEIUtils;\r\n\r\npublic class SergentCommand extends Script {\r\n  \r\n    private static final Logger log = LoggerFactory.getLogger(SergentCommand.class);\r\n\tprivate CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n  \r\n    private static List<String> allowedCommands = List.of(\"list\",\"gitpull\",\"dockerpull\");\r\n\r\n\tprivate String command;\r\n\r\n\tpublic void setCommand(String command) {\r\n\t\tthis.command = command;\r\n\t}\r\n\r\n\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n        if(command==null){\r\n          command=\"dockerpull\";\r\n        }\r\n\t\tif(!allowedCommands.contains(command)){\r\n\t\t\tthrow new BusinessException(\"invalid command, should be one of \"+allowedCommands);\r\n\t\t}\r\n\t\tServer server =  CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance)parameters.get(\"CONTEXT_ENTITY\"), Server.class);\r\n\t\tif(server.getDomainName()==null || server.getDomainName().isEmpty()){\r\n\t\t\tthrow new BusinessException(\"invalid server domain name\");\r\n\t\t}\r\n        ServerAction action = new ServerAction(); \r\n        action.setCreationDate(Instant.now());\r\n        action.setServer(server);\r\n        action.setAction(command);\r\n\t\tClient client = ClientBuilder.newClient();\r\n     \tWebTarget target = client.target(server.getSergentUrl()).queryParam(\"command\", command);\r\n      \tResponse response= target.request().get();\r\n\t\tString responseContent = \"\";\r\n        if(response.getStatus()==Response.Status.OK.getStatusCode()){\r\n          action.setResponseStatus(\"OK\");\r\n        } else {\r\n          action.setResponseStatus(\"ERROR\");\r\n          responseContent += \"Status:\"+response.getStatus()+\"\\n\";\r\n        }\r\n        responseContent+=response.readEntity(String.class);\r\n        action.setResponse(responseContent);\r\n        try {\r\n           crossStorageApi.createOrUpdate(defaultRepo,action);\r\n        } catch(Exception ex){\r\n            log.error(\"error creating action {} :{}\",action.getUuid(),ex.getMessage());\r\n        }\r\n\t}\r\n\t\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}