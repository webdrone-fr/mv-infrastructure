{
  "code" : "org.meveo.gandi.ListDnsRecords",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.gandi;\r\n\r\nimport java.util.Map;\r\nimport java.time.OffsetDateTime;\r\nimport java.time.Instant;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport com.google.gson.*;\r\n\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.DomainName;\r\nimport org.meveo.model.customEntities.DnsRecord;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\n\r\npublic class ListDnsRecords extends Script {\r\n\r\n\t\r\n    private static final Logger log = LoggerFactory.getLogger(ListDomains.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n\tstatic final private String GANDI_URL = \"api.gandi.net/v5/\";\r\n\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tDomainName domainName =  CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance)parameters.get(\"CONTEXT_ENTITY\"), DomainName.class);\r\n\t\tif(domainName.getNormedName()==null || domainName.getNormedName().isEmpty()){\r\n\t\t\tthrow new BusinessException(\"invalid normalized domain name\");\r\n\t\t}\r\n\t\tCredential credential  = CredentialHelperService.getCredential(GANDI_URL,crossStorageApi,defaultRepo);\r\n      \tif(credential==null){\r\n        \tthrow new BusinessException(\"No credential found for \"+GANDI_URL);\r\n      \t} else {\r\n        \tlog.info(\"using credential {} with username {}\",credential.getUuid(),credential.getUsername());\r\n      \t}\r\n\t\tClient client = ClientBuilder.newClient();\r\n\t\tclient.register(new CredentialHelperService.LoggingFilter());\r\n\t\tWebTarget target = client.target(\"https://api.gandi.net/v5/livedns/domains/\"+domainName.getNormedName()+\"/records\");\r\n\t\tResponse response = CredentialHelperService.setCredential(target.request(),credential).get();\r\n\t\tString value = response.readEntity(String.class);\r\n\t\tlog.info(\"response  :\" + value);\r\n\t\tlog.debug(\"response status : {}\", response.getStatus());\r\n\t\tif (response.getStatus() < 300) {\r\n\t\t\tJsonArray rootArray = new JsonParser().parse(value).getAsJsonArray();\r\n\t\t\tfor (JsonElement element : rootArray) {\r\n\t\t\t\tJsonObject serverObj = element.getAsJsonObject();\r\n\t\t\t\tDnsRecord record = new DnsRecord();\r\n\t\t\t\trecord.setDomainName(domainName);\r\n\t\t\t\tString type = serverObj.get(\"rrset_type\").getAsString();\r\n\t\t\t\tif(\"A\".equals(type)||\"CNAME\".equals(type)){\r\n\t\t\t\t\trecord.setRecordType(type);\r\n\t\t\t\t\trecord.setTtl(serverObj.get(\"rrset_ttl\").getAsLong());\r\n\t\t\t\t\trecord.setName(serverObj.get(\"rrset_name\").getAsString());\r\n\t\t\t\t\tJsonArray values = serverObj.get(\"rrset_values\").getAsJsonArray();\r\n\t\t\t\t\tif(values.size()==1){\r\n\t\t\t\t\t\trecord.setValue(values.get(0).getAsString());\r\n\t\t\t\t\t\trecord.setLastSyncDate(Instant.now());\r\n                        String ukey=domainName.getNormedName()+\"-\"+record.getRecordType()+\"-\"+record.getName();\r\n                \t\trecord.setUuid(DigestUtils.md5Hex(ukey));\r\n                        log.info(\"record :{} {} {}\", record.getRecordType(),record.getName(),record.getValue());\r\n                        try {\r\n                            crossStorageApi.createOrUpdate(defaultRepo, record);\r\n                        } catch (Exception ex) {\r\n                            log.error(\"error creating record {} :{}\", record.getUuid(), ex.getMessage());\r\n                        }\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//TODO notify of non imported records\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}