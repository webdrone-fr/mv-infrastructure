{
  "code" : "org.meveo.scaleway.PopulateProviderFields",
  "description" : "Populate Scaleway Provider Fields",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.scaleway;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport java.util.TreeMap;\r\n\r\nimport javax.ws.rs.client.*;\r\n\r\nimport com.google.gson.*;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.PublicIp;\r\nimport org.meveo.model.customEntities.ServerImage;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class PopulateProviderFields extends Script {\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(PopulateProviderFields.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n    \r\n    static final private String SCALEWAY_URL = \"api.scaleway.com\";\r\n    static final private String BASE_PATH = \"/instance/v1/zones/\";\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        ServiceProvider provider = CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance)parameters.get(CONTEXT_ENTITY), ServiceProvider.class);\r\n\r\n        Credential credential = CredentialHelperService.getCredential(SCALEWAY_URL, crossStorageApi, defaultRepo);\r\n        if (credential == null) {\r\n            throw new BusinessException(\"No credential found for \"+SCALEWAY_URL);\r\n        } else {\r\n            logger.info(\"Using Credential {} with username {}\", credential.getUuid(), credential.getUsername());\r\n        }\r\n\r\n        String[] zones = new String[] {\"fr-par-1\", \"fr-par-2\", \"fr-par-3\", \"nl-ams-1\", \"pl-waw-1\"};\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n\r\n        // Configuration\r\n        List<String> providerZones = new ArrayList<String>();\r\n        Map<String, String> providerOrganizations = new HashMap<String, String>();\r\n        // Webdrone ID = 6a0c2ca8-917a-418a-90a3-05949b55a7ae\r\n        Map<String, String> serverTypes = new HashMap<String, String>();\r\n        Map<String, String> images = new HashMap<String, String>();\r\n        List<String> publicIpRecords = new ArrayList<String>();\r\n        for(String zone : zones) {\r\n            providerZones.add(zone);\r\n            // Project/ Organization\r\n            String organizationName = \"Webdrone\";\r\n            String organizationId = \"6a0c2ca8-917a-418a-90a3-05949b55a7ae\";\r\n            providerOrganizations.put(organizationName, organizationId);\r\n            \r\n            // Server Types\r\n            JsonObject serverTypesObj = ScalewayHelperService.getProviderServerTypes(zone, provider, credential);\r\n            Set<Map.Entry<String, JsonElement>> entries = serverTypesObj.entrySet();\r\n            for(Map.Entry<String, JsonElement> entry: entries) {\r\n                JsonObject serverTypeObj =  entry.getValue().getAsJsonObject();\r\n                Map<String, Object> serverType = ScalewaySetters.setServerType(serverTypeObj);\r\n                serverTypes.put(entry.getKey(), JacksonUtil.toStringPrettyPrinted(serverType));\r\n            }\r\n            // Sort entries TODO\r\n            Map<String, String> treeMap = new TreeMap<String, String>(serverTypes);\r\n            \r\n            // Images\r\n            JsonArray imagesArr = ScalewayHelperService.getProviderImages(zone, provider, credential);\r\n            for (JsonElement imageEl : imagesArr) {\r\n                JsonObject imageObj = imageEl.getAsJsonObject();\r\n                String imageId = imageObj.get(\"id\").getAsString();\r\n                ServerImage image = null;\r\n                try {\r\n                    if(crossStorageApi.find(defaultRepo, ServerImage.class).by(\"providerSideId\", imageId).getResult()!=null)  {\r\n                        image = crossStorageApi.find(defaultRepo, ServerImage.class).by(\"providerSideId\", imageId).getResult();\r\n                    } else {\r\n                        image = new ServerImage();\r\n                        image.setUuid(imageId);\r\n                    }\r\n                    image = ScalewaySetters.setServerImage(imageObj, image, crossStorageApi, defaultRepo);\r\n                    crossStorageApi.createOrUpdate(defaultRepo, image);\r\n                } catch (Exception e) {\r\n                    logger.error(\"ERROR WITH IMAGE CREATION\", e);\r\n                    logger.error(\"Error creating image : {}\", imageId, e.getMessage());\r\n                }\r\n                String imageName = imageObj.get(\"name\").getAsString();\r\n                images.put(imageId, imageName+\" : \"+zone);\r\n            }\r\n            logger.info(\"IMAGES IN LIST COUNT: {}\", images.size());\r\n            \r\n            // Public Ips\r\n            JsonArray ipsArr = ScalewayHelperService.getProviderPublicIps(zone, provider, credential);\r\n            for (JsonElement ipEl : ipsArr) {\r\n                JsonObject publicIpObj = ipEl.getAsJsonObject();\r\n                String publicIpId = publicIpObj.get(\"id\").getAsString();\r\n                PublicIp publicIp = null;\r\n                try {\r\n                    if (crossStorageApi.find(defaultRepo, PublicIp.class).by(\"providerSideId\", publicIpId).getResult()!=null) {\r\n                        publicIp = crossStorageApi.find(defaultRepo, PublicIp.class).by(\"providerSideId\", publicIpId).getResult();\r\n                    } else {\r\n                        publicIp = new PublicIp();\r\n                        publicIp.setUuid(publicIpId);\r\n                    }\r\n                    publicIp = ScalewaySetters.setPublicIp(publicIpObj, publicIp, provider, crossStorageApi, defaultRepo);\r\n                    crossStorageApi.createOrUpdate(defaultRepo, publicIp);\r\n\r\n                    Map<String, String> publicIpRecord = new HashMap<String, String>();\r\n                    String address = publicIpObj.get(\"address\").getAsString();\r\n                    String serverName = null;\r\n                    if (!publicIpObj.get(\"server\").isJsonNull()) {\r\n                        serverName = publicIpObj.get(\"server\").getAsJsonObject().get(\"name\").getAsString();\r\n                    }\r\n                    publicIpRecord.put(address, serverName);\r\n                    publicIpRecords.add(String.valueOf(publicIpRecord));\r\n                } catch (Exception e) {\r\n                    logger.error(\"Error retrieving public ip : {}\", publicIpId, e.getMessage());\r\n                }\r\n            }\r\n        }\r\n        provider.setZones(providerZones);\r\n        provider.setOrganization(providerOrganizations);\r\n        provider.setServerType(serverTypes);\r\n        provider.setImages(images);\r\n        provider.setPublicIp(publicIpRecords);\r\n        try {\r\n            crossStorageApi.createOrUpdate(defaultRepo, provider);\r\n        } catch (Exception e) {\r\n            logger.error(\"Error retrieving provider details\", e.getMessage());\r\n        }\r\n    }\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}