{
  "code" : "org.meveo.script.CallListing",
  "description" : "List server generic",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport java.util.List;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.script.openstack.ListOVHServersScript;\r\nimport org.meveo.script.ListScalewayServersScript;\r\nimport javax.faces.application.FacesMessage;\r\nimport javax.faces.context.FacesContext;\r\nimport org.meveo.script.CredentialsUtils;\r\n\r\npublic class CallListing extends Script {\r\n  \r\n    private static final Logger log = LoggerFactory.getLogger(CallListing.class);\r\n  \r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n  \r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n  \r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n  \r\n    private ListOVHServersScript listOVHServerScript = new ListOVHServersScript();\r\n  \r\n    private ListScalewayServersScript listScalewayServersScript = new ListScalewayServersScript();\r\n  \r\n    private CredentialsUtils credentialsUtils = new CredentialsUtils();\r\n      \r\n    private ServiceProvider getProvider(String code) {\r\n\t\treturn crossStorageApi.find(defaultRepo, ServiceProvider.class).by(\"code\", code).getResult();\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tsuper.execute(parameters);\r\n        log.info(\"calling CallListing\");\r\n        ServiceProvider serviceProvider = CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance)parameters.get(CONTEXT_ENTITY), ServiceProvider.class);\r\n        Credential credential = credentialsUtils.getCredential(serviceProvider.getApiBaseUrl());\r\n        if (credential == null) {\r\n            throw new BusinessException(\"No credential found for \" + serviceProvider.getApiBaseUrl()); \r\n        } else {\r\n        \tlog.info(\"using credential {} with username {}\", credential.getUuid(), credential.getUsername());\r\n        }\r\n        switch(credential.getDomainName()) {\r\n          case \"cloud.ovh.net\":\r\n            listOVHServerScript.callOVH(credential, serviceProvider);\r\n            break;\r\n          case \"api.scaleway.com\":\r\n            listScalewayServersScript.listScaleway(credential, serviceProvider);\r\n            break;\r\n          case \"api.gandi.net/v5/\":\r\n            //listGandiServer\r\n            break;\r\n          default:\r\n            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, \"WArning : \", \"No listing found for \" + serviceProvider.getCode()));\r\n        }\r\n\t}\r\n\t\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.script.openstack.ListOVHServersScript",
    "description" : "List ovh dev server through openstack api",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.script.openstack;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport com.google.gson.*;\r\nimport java.time.OffsetDateTime;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.Server;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport java.util.ArrayList;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport org.meveo.security.PasswordUtils;\r\nimport org.meveo.script.openstack.CheckOVHToken;\r\n\r\npublic class ListOVHServersScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListOVHServersScript.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n  \r\n    private CheckOVHToken checkOVHToken = new CheckOVHToken();\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n\r\n    public void callOVH(Credential credential, ServiceProvider openstack) {\r\n        log.info(\"calling ListOVHServersScript\");\r\n        //Check the token\r\n        checkOVHToken.checkOVHToken(credential, openstack);\r\n        // Call every region to list server\r\n        Map<String, String> zones = new HashMap<String, String>();\r\n        zones = openstack.getZone();\r\n        for (String zone : zones.keySet()) {\r\n            Client clientListServers = ClientBuilder.newClient();\r\n            WebTarget targetListServer = clientListServers.target(\"https://compute.\" + zone + \".\" + openstack.getApiBaseUrl() + \"/v2.1/servers/detail\");\r\n            Response response = targetListServer.request().header(\"X-Auth-Token\", credential.getToken()).get();\r\n            String value = response.readEntity(String.class);\r\n            if (response.getStatus() < 300) {\r\n                JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(\"servers\");\r\n                for (JsonElement element : rootArray) {\r\n                    JsonObject serverObj = element.getAsJsonObject();\r\n                    // Create new servers\r\n                    Server server = new Server();\r\n                    // UUID\r\n                    server.setUuid(serverObj.get(\"id\").getAsString());\r\n                    // server name\r\n                    server.setInstanceName(serverObj.get(\"name\").getAsString());\r\n                    // domain name\r\n                    server.setDomainName(serverObj.get(\"name\").getAsString().toLowerCase() + \".webdrone.fr\");\r\n                    // tenant\r\n                    server.setOrganization(serverObj.get(\"tenant_id\").getAsString());\r\n                    // image\r\n                    String idImage = serverObj.get(\"image\").getAsJsonObject().get(\"id\").getAsString();\r\n                    WebTarget targetImage = clientListServers.target(\"https://image.compute.\" + zone + \".\" + openstack.getApiBaseUrl() + \"/v2/images/\" + idImage);\r\n                    Response responseImage = targetImage.request().header(\"X-Auth-Token\", credential.getToken()).get();\r\n                    String ImageValue = responseImage.readEntity(String.class);\r\n                    if (!(ImageValue.startsWith(\"404\"))) {\r\n                        JsonParser parser = new JsonParser();\r\n                        JsonElement jsonE = parser.parse(ImageValue);\r\n                        JsonObject ImageObj = jsonE.getAsJsonObject();\r\n                        if (ImageObj != null) {\r\n                            server.setImage(ImageObj.get(\"name\").getAsString());\r\n                        }\r\n                    } else {\r\n                        server.setImage(\"Image not found\");\r\n                        log.error(\"Image with id : \" + idImage + \" cannot be found for the server : \" + serverObj.get(\"name\").getAsString());\r\n                    }\r\n                    // Set the creation & updated date\r\n                    server.setCreationDate(OffsetDateTime.parse(serverObj.get(\"created\").getAsString()).toInstant());\r\n                    server.setLastUpdate(OffsetDateTime.parse(serverObj.get(\"updated\").getAsString()).toInstant());\r\n                    // zone\r\n                    server.setZone(zone);\r\n                    // public IP\r\n                    JsonArray publicIpArray = serverObj.get(\"addresses\").getAsJsonObject().get(\"Ext-Net\").getAsJsonArray();\r\n                    for (JsonElement ip : publicIpArray) {\r\n                        JsonObject ipElement = ip.getAsJsonObject();\r\n                        if (ipElement.get(\"version\").getAsInt() == 4) {\r\n                            server.setPublicIp(ipElement.get(\"addr\").getAsString());\r\n                        }\r\n                    }\r\n                    // status\r\n                    server.setStatus(serverObj.get(\"status\").getAsString());\r\n                    // provider\r\n                    server.setProvider(openstack);\r\n                    // volume & flavor\r\n                    String idFlavor = serverObj.get(\"flavor\").getAsJsonObject().get(\"id\").getAsString();\r\n                    WebTarget targetVolume = clientListServers.target(\"https://compute.\" + zone + \".\" + openstack.getApiBaseUrl() + \"/v2.1/flavors/\" + idFlavor);\r\n                    Response responseVolume = targetVolume.request().header(\"X-Auth-Token\", credential.getToken()).get();\r\n                    String flavorValue = responseVolume.readEntity(String.class);\r\n                    if (response.getStatus() < 300) {\r\n                        JsonParser parser = new JsonParser();\r\n                        JsonElement jsonE = parser.parse(flavorValue);\r\n                        JsonObject flavorObj = jsonE.getAsJsonObject();\r\n                        flavorObj = flavorObj.get(\"flavor\").getAsJsonObject();\r\n                        // flavor\r\n                        server.setServerType(flavorObj.get(\"name\").getAsString());\r\n                        // volume\r\n                        server.setVolumeSize(flavorObj.get(\"disk\").getAsString() + \" GiB\");\r\n                    }\r\n                    try {\r\n                        crossStorageApi.createOrUpdate(defaultRepo, server);\r\n                    } catch (Exception ex) {\r\n                        log.error(\"error creating server {} :{}\", server.getUuid(), ex.getMessage());\r\n                    }\r\n                }\r\n            }\r\n            response.close();\r\n        }\r\n    }\r\n}\r\n",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ {
      "code" : "org.meveo.script.openstack.CheckOVHToken",
      "description" : "Check the openstack user token and create a new one if needed",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.script.openstack;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.time.OffsetDateTime;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport java.util.List;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.service.custom.CustomEntityTemplateService;\r\nimport org.meveo.service.crm.impl.CustomFieldTemplateService;\r\nimport org.meveo.model.customEntities.CustomEntityTemplate;\r\nimport org.meveo.service.custom.CustomEntityInstanceService;\r\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\r\nimport org.meveo.persistence.CrossStorageService;\r\nimport org.meveo.model.crm.CustomFieldTemplate;\r\nimport org.meveo.security.PasswordUtils;\r\nimport org.meveo.model.crm.custom.CustomFieldValues;\r\nimport org.apache.commons.lang3.SerializationUtils;\r\n\r\npublic class CheckOVHToken extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListOVHServersScript.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private CustomEntityTemplateService customEntityTemplateService = getCDIBean(CustomEntityTemplateService.class);\r\n\r\n    private CustomFieldTemplateService customFieldTemplateService = getCDIBean(CustomFieldTemplateService.class);\r\n\r\n    private CustomEntityInstanceService customEntityInstanceService = getCDIBean(CustomEntityInstanceService.class);\r\n\r\n    private CustomFieldInstanceService customFieldInstanceService = getCDIBean(CustomFieldInstanceService.class);\r\n\r\n    private CrossStorageService crossStorageService = getCDIBean(CrossStorageService.class);\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n\r\n    public void checkOVHToken(Credential credential, ServiceProvider openstack) {\r\n        log.info(\"call CheckOVHToken\");\r\n        // Verification of the token\r\n        OffsetDateTime currentDate = OffsetDateTime.now();\r\n        OffsetDateTime expireDate = OffsetDateTime.parse(credential.getTokenExpiry().toString());\r\n        if (currentDate.isAfter(expireDate)) {\r\n            try {\r\n                // Dechiffrement du mot de passe\r\n                String stringToDecrypt = credential.getPasswordSecret();\r\n                String codeClass = credential.getClass().getSimpleName();\r\n                CustomEntityTemplate cet = customEntityTemplateService.findByCode(codeClass);\r\n                List<Object> objectsToHash = new ArrayList<>();\r\n              \tCustomEntityInstance credentialCEI = CEIUtils.pojoToCei(credential);\r\n                Map<String, CustomFieldTemplate> customFieldTemplates = customFieldTemplateService.findByAppliesTo(cet.getAppliesTo());\r\n                var hash = CEIUtils.getHash(credentialCEI, customFieldTemplates);\r\n                String stringDecrypted = PasswordUtils.decryptNoSecret(hash, stringToDecrypt);\r\n                // Creation du body\r\n                HashMap<String, Object> master = new HashMap<String, Object>();\r\n                HashMap<String, Object> auth = new HashMap<String, Object>();\r\n                HashMap<String, Object> identity = new HashMap<String, Object>();\r\n                HashMap<String, Object> password = new HashMap<String, Object>();\r\n                HashMap<String, Object> user = new HashMap<String, Object>();\r\n                HashMap<String, Object> domain = new HashMap<String, Object>();\r\n                ArrayList<String> method = new ArrayList<String>();\r\n                method.add(\"password\");\r\n                domain.put(\"id\", \"default\");\r\n                user.put(\"password\", stringDecrypted);\r\n                user.put(\"domain\", domain);\r\n                user.put(\"name\", credential.getUsername());\r\n                password.put(\"user\", user);\r\n                identity.put(\"methods\", method);\r\n                identity.put(\"password\", password);\r\n                auth.put(\"identity\", identity);\r\n                master.put(\"auth\", auth);\r\n                String resp = JacksonUtil.toStringPrettyPrinted(master);\r\n                // Creation of the identity token\r\n                Client client = ClientBuilder.newClient();\r\n                WebTarget target = client.target(\"https://auth.\" + openstack.getApiBaseUrl() + \"/v3/auth/tokens\");\r\n                Response response = target.request().post(Entity.json(resp));\r\n                credential.setToken(response.getHeaderString(\"X-Subject-Token\"));\r\n                credential.setTokenExpiry(currentDate.plusDays(1).toInstant());\r\n                try {\r\n                    crossStorageApi.createOrUpdate(defaultRepo, credential);\r\n                } catch (Exception ex) {\r\n                    log.error(\"error update credentials {} :{}\", credential.getUuid(), ex.getMessage());\r\n                }\r\n                response.close();\r\n            } catch (Exception ex) {\r\n                log.error(ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    } ]
  }, {
    "code" : "org.meveo.script.CredentialsUtils",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.script;\r\n\r\nimport java.util.Map;\r\nimport java.util.List;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.model.customEntities.Credential;\r\n\r\npublic class CredentialsUtils extends Script {\r\n  \r\n    private static final Logger log = LoggerFactory.getLogger(CallListing.class);\r\n  \r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n  \r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n  \r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\t\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tsuper.execute(parameters);\r\n\t}\r\n  \r\n    public Credential getCredential(String domain) {\r\n        List<Credential> matchigCredentials = crossStorageApi.find(defaultRepo, Credential.class).by(\"domainName\", domain).getResults();\r\n        if (matchigCredentials.size() > 0) {\r\n            return matchigCredentials.get(0);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  }, {
    "code" : "org.meveo.script.ListScalewayServersScript",
    "description" : "list scaleway servers",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.script;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.exception.BusinessApiException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport com.google.gson.*;\r\nimport java.math.BigInteger;\r\nimport java.time.OffsetDateTime;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.Server;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\n\r\npublic class ListScalewayServersScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListScalewayServersScript.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n\r\n    public void listScaleway(Credential credential, ServiceProvider scaleway) throws BusinessException {\r\n        log.info(\"Call ListScalewayServersScript\");\r\n        Client client = ClientBuilder.newClient();\r\n        WebTarget target = client.target(\"https://\" + scaleway.getApiBaseUrl() + \"/instance/v1/zones/fr-par-1/servers\");\r\n        Response response = CredentialHelperService.setCredential(target.request(), credential).get();\r\n        String value = response.readEntity(String.class);\r\n        log.info(\"response  :\" + value);\r\n        log.debug(\"response status : {}\", response.getStatus());\r\n        if (response.getStatus() < 300) {\r\n            JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(\"servers\");\r\n            /*if(rootObject.get(\"servers\")!=JsonNull.INSTANCE){\r\n            Object servers = rootObject.get(\"servers\");\r\n            log.info(\"received servers:{}\",servers);\r\n          }*/\r\n            for (JsonElement element : rootArray) {\r\n                JsonObject serverObj = element.getAsJsonObject();\r\n                Server server = new Server();\r\n                server.setUuid(serverObj.get(\"id\").getAsString());\r\n                String name = serverObj.get(\"name\").getAsString();\r\n                server.setInstanceName(name);\r\n                if (name.contains(\".\")) {\r\n                    int ldi = name.lastIndexOf(\".\");\r\n                    String ext = name.substring(ldi);\r\n                    String part = name.substring(0, ldi);\r\n                    if (part.contains(\".\")) {\r\n                        ldi = part.lastIndexOf(\".\");\r\n                        server.setDomainName(name.substring(ldi + 1));\r\n                    } else {\r\n                        server.setDomainName(name);\r\n                    }\r\n                }\r\n                if (serverObj.has(\"image\") && !serverObj.get(\"image\").isJsonNull()) {\r\n                    server.setImage(serverObj.get(\"image\").getAsJsonObject().get(\"name\").getAsString());\r\n                }\r\n                server.setCreationDate(OffsetDateTime.parse(serverObj.get(\"creation_date\").getAsString()).toInstant());\r\n                server.setLastUpdate(OffsetDateTime.parse(serverObj.get(\"modification_date\").getAsString()).toInstant());\r\n                server.setOrganization(serverObj.get(\"organization\").getAsString());\r\n                server.setServerType(serverObj.get(\"commercial_type\").getAsString());\r\n                server.setZone(serverObj.get(\"zone\").getAsString());\r\n                if (serverObj.has(\"public_ip\")) {\r\n                    server.setPublicIp(serverObj.get(\"public_ip\").getAsJsonObject().get(\"address\").getAsString());\r\n                }\r\n                if (serverObj.has(\"volumes\") && serverObj.get(\"volumes\").getAsJsonObject().has(\"0\")) {\r\n                    BigInteger size = serverObj.get(\"volumes\").getAsJsonObject().get(\"0\").getAsJsonObject().get(\"size\").getAsBigInteger();\r\n                    server.setVolumeSize(size.divide(new BigInteger(\"1000000\")).toString() + \"MB\");\r\n                }\r\n                server.setStatus(serverObj.get(\"state\").getAsString());\r\n                server.setProvider(scaleway);\r\n                log.info(\"server: {} provider:{}\", server.getUuid(), server.getProvider().getUuid());\r\n                try {\r\n                    crossStorageApi.createOrUpdate(defaultRepo, server);\r\n                } catch (Exception ex) {\r\n                    log.error(\"error creating server {} :{}\", server.getUuid(), ex.getMessage());\r\n                }\r\n            }\r\n        }\r\n        response.close();\r\n    }\r\n}\r\n",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ {
      "code" : "org.meveo.credentials.CredentialHelperService",
      "description" : "Helper function to build request with credentials",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    } ]
  } ]
}