{
  "code" : "org.meveo.script.openstack.CreateOVHServersScript",
  "description" : "Create ovh dev server through openstack api",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script.openstack;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.Server;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.script.openstack.CheckOVHToken;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport javax.faces.application.FacesMessage;\r\nimport javax.faces.context.FacesContext;\r\nimport java.util.HashMap;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport com.google.gson.*;\r\nimport java.time.OffsetDateTime;\r\n\r\npublic class CreateOVHServersScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListOVHServersScript.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private CheckOVHToken checkOVHToken = new CheckOVHToken();\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n\r\n    public void createServer(Credential credential, ServiceProvider openstack, Server server) throws BusinessException {\r\n        log.info(\"calling CreateOVHServersScript\");\r\n        // Check Token\r\n        checkOVHToken.checkOVHToken(credential, openstack);\r\n        // Check Input\r\n        if (server.getInstanceName() == null) {\r\n            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, \"Warning : \", \"Instance name not found for server: \" + server.getUuid()));\r\n            throw new BusinessException(\"Cannot create new server (missing instance name) for uuid : \" + server.getUuid());\r\n        } else if (!server.getInstanceName().startsWith(\"dev-\")) {\r\n            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, \"Warning : \", \"Instance Name needs to start by <dev-> : \" + server.getUuid()));\r\n            throw new BusinessException(\"Cannot create new server (missing image id) for uuid : \" + server.getUuid());\r\n        } else if (server.getImageRef() == null) {\r\n            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, \"Warning : \", \"Image id not found for server: \" + server.getUuid()));\r\n            throw new BusinessException(\"Cannot create new server (missing image id) for uuid : \" + server.getUuid());\r\n        } else if (server.getFlavorRef() == null) {\r\n            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, \"Warning : \", \"Flavor id not found for server: \" + server.getUuid()));\r\n            throw new BusinessException(\"Cannot create new server (missing flavor id) for uuid : \" + server.getUuid());\r\n        } else if (server.getNetworks() == null) {\r\n            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, \"Warning : \", \"Network id not found for server: \" + server.getUuid()));\r\n            throw new BusinessException(\"Cannot create new server (missing network id) for uuid : \" + server.getUuid());\r\n        } else if (server.getKeyName() == null) {\r\n            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, \"Warning : \", \"Key Name id not found for server: \" + server.getUuid()));\r\n            throw new BusinessException(\"Cannot create new server (missing key pair id) for uuid : \" + server.getUuid());\r\n        } else {\r\n            // Build the request\r\n            HashMap<String, Object> master = new HashMap<String, Object>();\r\n            HashMap<String, Object> newServer = new HashMap<String, Object>();\r\n            ArrayList<HashMap> networks = new ArrayList<HashMap>();\r\n            HashMap<String, String> network = new HashMap<String, String>();\r\n            List<String> networksList = new ArrayList<>();\r\n            networksList = server.getNetworks();\r\n            networksList.forEach((net) -> network.put(\"uuid\", net));\r\n            networks.add(network);\r\n            newServer.put(\"key_name\", server.getKeyName());\r\n            newServer.put(\"networks\", networks);\r\n            newServer.put(\"flavorRef\", server.getFlavorRef());\r\n            newServer.put(\"ImageRef\", server.getImageRef());\r\n            newServer.put(\"name\", server.getName());\r\n            master.put(\"server\", newServer);\r\n            String resp = JacksonUtil.toStringPrettyPrinted(master);\r\n            // Request\r\n            Client client = ClientBuilder.newClient();\r\n            WebTarget target = client.target(\"https://compute.\" + server.getZone() + \".cloud.ovh.net/v2.1/servers\");\r\n            Response response = target.request().header(\"X-Auth-Token\", credential.getToken()).post(Entity.json(resp));\r\n            String value = response.readEntity(String.class);\r\n            Integer responseStatus = response.getStatus();\r\n            // Verification\r\n            if (responseStatus < 300) {\r\n                JsonParser parserServer = new JsonParser();\r\n                JsonElement jsonServer = parserServer.parse(value);\r\n                JsonObject serverObj = jsonServer.getAsJsonObject();\r\n                serverObj = serverObj.get(\"server\").getAsJsonObject();\r\n                server.setUuid(serverObj.get(\"id\").getAsString());\r\n                try {\r\n                    crossStorageApi.createOrUpdate(defaultRepo, server);\r\n                } catch (Exception ex) {\r\n                    log.error(\"error updating server {} :{}\", server.getUuid(), ex.getMessage());\r\n                }\r\n                WebTarget targetNewServ = client.target(\"https://compute.\" + server.getZone() + \".cloud.ovh.net/v2.1/servers/\" + server.getUuid());\r\n                Response newServReponse = targetNewServ.request().header(\"X-Auth-Token\", credential.getToken()).get();\r\n                String valueNewServ = response.readEntity(String.class);\r\n                if (response.getStatus() < 300) {\r\n                    // Status\r\n                    server.setStatus(serverObj.get(\"status\").getAsString());\r\n                    // volume & flavor\r\n                    String idFlavor = serverObj.get(\"flavor\").getAsJsonObject().get(\"id\").getAsString();\r\n                    WebTarget targetVolume = client.target(\"https://compute.\" + server.getZone() + \".\" + openstack.getApiBaseUrl() + \"/v2.1/flavors/\" + idFlavor);\r\n                    Response responseVolume = targetVolume.request().header(\"X-Auth-Token\", credential.getToken()).get();\r\n                    String flavorValue = responseVolume.readEntity(String.class);\r\n                    if (response.getStatus() < 300) {\r\n                        JsonParser parserFlavor = new JsonParser();\r\n                        JsonElement jsonFlavor = parserFlavor.parse(flavorValue);\r\n                        JsonObject flavorObj = jsonFlavor.getAsJsonObject();\r\n                        flavorObj = flavorObj.get(\"flavor\").getAsJsonObject();\r\n                        // flavor\r\n                        server.setServerType(flavorObj.get(\"name\").getAsString());\r\n                        // volume\r\n                        server.setVolumeSize(flavorObj.get(\"disk\").getAsString() + \" GiB\");\r\n                    }\r\n                    // public IP\r\n                    JsonArray publicIpArray = serverObj.get(\"addresses\").getAsJsonObject().get(\"Ext-Net\").getAsJsonArray();\r\n                    for (JsonElement ip : publicIpArray) {\r\n                        JsonObject ipElement = ip.getAsJsonObject();\r\n                        if (ipElement.get(\"version\").getAsInt() == 4) {\r\n                            server.setPublicIp(ipElement.get(\"addr\").getAsString());\r\n                        }\r\n                    }\r\n                    // Set the creation & updated date\r\n                    server.setCreationDate(OffsetDateTime.parse(serverObj.get(\"created\").getAsString()).toInstant());\r\n                    server.setLastUpdate(OffsetDateTime.parse(serverObj.get(\"updated\").getAsString()).toInstant());\r\n                    // domain name\r\n                    server.setDomainName(serverObj.get(\"name\").getAsString().toLowerCase() + \".webdrone.fr\");\r\n                }\r\n            } else {\r\n                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, \"Warning : \", \"Error while creating the server : \" + server.getUuid()));\r\n                log.info(\"Error while creating the server : {}\", server.getUuid());\r\n            }\r\n            response.close();\r\n        }\r\n    }\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.script.openstack.CheckOVHToken",
    "description" : "Check the openstack user token and create a new one if needed",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.script.openstack;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.time.OffsetDateTime;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport java.util.List;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.service.custom.CustomEntityTemplateService;\r\nimport org.meveo.service.crm.impl.CustomFieldTemplateService;\r\nimport org.meveo.model.customEntities.CustomEntityTemplate;\r\nimport org.meveo.model.crm.CustomFieldTemplate;\r\nimport org.meveo.security.PasswordUtils;\r\nimport org.meveo.model.crm.custom.CustomFieldValues;\r\nimport org.apache.commons.lang3.SerializationUtils;\r\n\r\npublic class CheckOVHToken extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListOVHServersScript.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private CustomEntityTemplateService customEntityTemplateService = getCDIBean(CustomEntityTemplateService.class);\r\n\r\n    private CustomFieldTemplateService customFieldTemplateService = getCDIBean(CustomFieldTemplateService.class);\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n\r\n    public void checkOVHToken(Credential credential, ServiceProvider openstack) {\r\n        log.info(\"call CheckOVHToken\");\r\n        // Verification of the token\r\n        OffsetDateTime currentDate = OffsetDateTime.now();\r\n        OffsetDateTime expireDate = OffsetDateTime.parse(credential.getTokenExpiry().toString());\r\n        if (currentDate.isAfter(expireDate)) {\r\n            try {\r\n                // Dechiffrement du mot de passe\r\n                String stringToDecrypt = credential.getPasswordSecret();\r\n                String codeClass = credential.getClass().getSimpleName();\r\n                CustomEntityTemplate cet = customEntityTemplateService.findByCode(codeClass);\r\n                List<Object> objectsToHash = new ArrayList<>();\r\n              \tCustomEntityInstance credentialCEI = CEIUtils.pojoToCei(credential);\r\n                Map<String, CustomFieldTemplate> customFieldTemplates = customFieldTemplateService.findByAppliesTo(cet.getAppliesTo());\r\n                var hash = CEIUtils.getHash(credentialCEI, customFieldTemplates);\r\n                String stringDecrypted = PasswordUtils.decryptNoSecret(hash, stringToDecrypt);\r\n                // Creation du body\r\n                HashMap<String, Object> master = new HashMap<String, Object>();\r\n                HashMap<String, Object> auth = new HashMap<String, Object>();\r\n                HashMap<String, Object> identity = new HashMap<String, Object>();\r\n                HashMap<String, Object> password = new HashMap<String, Object>();\r\n                HashMap<String, Object> user = new HashMap<String, Object>();\r\n                HashMap<String, Object> domain = new HashMap<String, Object>();\r\n                ArrayList<String> method = new ArrayList<String>();\r\n                method.add(\"password\");\r\n                domain.put(\"id\", \"default\");\r\n                user.put(\"password\", stringDecrypted);\r\n                user.put(\"domain\", domain);\r\n                user.put(\"name\", credential.getUsername());\r\n                password.put(\"user\", user);\r\n                identity.put(\"methods\", method);\r\n                identity.put(\"password\", password);\r\n                auth.put(\"identity\", identity);\r\n                master.put(\"auth\", auth);\r\n                String resp = JacksonUtil.toStringPrettyPrinted(master);\r\n                // Creation of the identity token\r\n                Client client = ClientBuilder.newClient();\r\n                WebTarget target = client.target(\"https://auth.\" + openstack.getApiBaseUrl() + \"/v3/auth/tokens\");\r\n                Response response = target.request().post(Entity.json(resp));\r\n                credential.setToken(response.getHeaderString(\"X-Subject-Token\"));\r\n                credential.setTokenExpiry(currentDate.plusDays(1).toInstant());\r\n                try {\r\n                    crossStorageApi.createOrUpdate(defaultRepo, credential);\r\n                } catch (Exception ex) {\r\n                    log.error(\"error update credentials {} :{}\", credential.getUuid(), ex.getMessage());\r\n                }\r\n                response.close();\r\n            } catch (Exception ex) {\r\n                log.error(ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}