{
  "code" : "org.meveo.script.ListSecurityGroups",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.CustomEntityTemplate;\r\nimport org.meveo.service.custom.CustomEntityTemplateService;\r\nimport java.util.List;\r\nimport java.util.HashMap;\r\nimport org.meveo.persistence.CrossStorageService;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.script.openstack.CheckOVHToken;\r\nimport com.google.gson.*;\r\nimport org.meveo.script.openstack.OpenstackAPI;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.meveo.model.customEntities.SecurityGroup;\r\nimport java.time.OffsetDateTime;\r\n\r\npublic class ListSecurityGroups extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListServerImages.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private CustomEntityTemplateService customEntityTemplateService = getCDIBean(CustomEntityTemplateService.class);\r\n\r\n    private CrossStorageService crossStorageService = getCDIBean(CrossStorageService.class);\r\n  \r\n  \tprivate CheckOVHToken checkOVHToken = getCDIBean(CheckOVHToken.class);\r\n  \r\n  \tprivate OpenstackAPI openstackAPI = new OpenstackAPI();\r\n\t\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tsuper.execute(parameters);\r\n        ServiceProvider sp = new ServiceProvider();\r\n        String codeClass = sp.getClass().getSimpleName();\r\n        CustomEntityTemplate cet = customEntityTemplateService.findByCode(codeClass);\r\n        try {\r\n            List<Map<String, Object>> providers = crossStorageService.find(defaultRepo, cet, null);\r\n            for (Map<String, Object> provider : providers) {\r\n                log.info(provider.toString());\r\n                ServiceProvider matchingProvider = crossStorageApi.find(defaultRepo, ServiceProvider.class).by(\"uuid\", provider.get(\"uuid\").toString()).getResult();\r\n                Credential credential = CredentialHelperService.getCredential(matchingProvider.getApiBaseUrl(), crossStorageApi, defaultRepo);\r\n              \tif (credential.getDomainName().equalsIgnoreCase(\"cloud.ovh.net\")) {\r\n                    checkOVHToken.checkOVHToken(credential, matchingProvider);\r\n                    List<JsonObject> securityGroups = openstackAPI.networkAPI(\"security-groups\", credential, null, \"get\", \"security-group\");\r\n                    for (JsonObject securityGroup : securityGroups) {\r\n                      \tSecurityGroup secuGroup = new SecurityGroup();\r\n                      \tsecuGroup.setUuid(securityGroup.get(\"id\").getAsString());\r\n                      \tsecuGroup.setName(securityGroup.get(\"Name\").getAsString());\r\n                      \tsecuGroup.setProviderSideId(securityGroup.get(\"id\").getAsString());\r\n                      \tsecuGroup.setCreationDate(OffsetDateTime.parse(securityGroup.get(\"created_at\").getAsString()).toInstant());\r\n                      \tsecuGroup.setLastUpdated(OffsetDateTime.parse(securityGroup.get(\"updated_at\").getAsString()).toInstant());\r\n                      \tsecuGroup.setDescription(securityGroup.get(\"description\").getAsString());\r\n                      \tsecuGroup.setOrganization(securityGroup.get(\"tenant_id\").getAsString());\r\n                      \tsecuGroup.setProject(securityGroup.get(\"project_id\").getAsString());\r\n                      \tsecuGroup.setZone(\"GRA11\");\r\n                      \tHashMap<String, String> rules = new HashMap<String, String>();\r\n                      \tJsonArray rulesArray = (JsonArray)securityGroup.get(\"security_group_rules\");\r\n                      \tfor (JsonElement ruleElement : rulesArray) {\r\n                          \tJsonObject ruleObject = ruleElement.getAsJsonObject(); \r\n\t\t\t\t\t\t\trules.put(ruleObject.get(\"security_group_id\").getAsString(), ruleObject.get(\"direction\").getAsString());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (EntityDoesNotExistsException ex) {\r\n            log.error(\"Entity does not exist : {} : {}\", codeClass, ex.getMessage());\r\n        }\t\r\n\t}\r\n\t\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.script.openstack.OpenstackAPI",
    "description" : "Openstack \"factory\" for API's call",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.script.openstack;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport com.google.gson.*;\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\nimport org.meveo.model.customEntities.Credential;\r\n\r\npublic class OpenstackAPI extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListOVHServersScript.class);\r\n\r\n    private String computeBaseAPI = \"https://compute.gra11.cloud.ovh.net/v2.1/\";\r\n\r\n    private String networkBaseAPI = \"https://network.compute.gra11.cloud.ovh.net/v2.0/\";\r\n\r\n    private String imageBaseAPI = \"https://image.compute.gra11.cloud.ovh.net/v2/\";\r\n\r\n    private String identityBaseAPI = \"https://auth.cloud.ovh.net/\";\r\n\r\n    /**\r\n     * Do all of compute api call\r\n     * @param url the path of the call\r\n     * @param token the token currently used by the api\r\n     * @param jsonBody of the request. Can be null if no body is needed\r\n     * @param methodType GET, POST, DELETE, PUT\r\n     * @param objReturn to return is the json response\r\n     * @return the list of json object\r\n     * @throws if the methodType used is not supported\r\n     */\r\n    public List<JsonObject> computeAPI(String url, Credential token, String jsonBody, String methodType, String objReturn) throws BusinessException {\r\n        List<JsonObject> res = new ArrayList<>();\r\n        Client client = ClientBuilder.newClient();\r\n        if (methodType.equalsIgnoreCase(\"get\")) {\r\n            WebTarget target = client.target(this.computeBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token.getToken()).get();\r\n            String value = response.readEntity(String.class);\r\n            if (response.getStatus() < 300) {\r\n              \tString isList = \"\\\"\" + objReturn + \"s\\\": [\";\r\n                if (value.contains(isList)) {\r\n                  \tobjReturn += \"s\";\r\n                    JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n                    for (JsonElement element : rootArray) {\r\n                        JsonObject JObject = element.getAsJsonObject();\r\n                        res.add(JObject);\r\n                    }\r\n                } else {\r\n                    JsonObject JObject = new JsonParser().parse(value).getAsJsonObject();\r\n                    JObject = JObject.get(objReturn).getAsJsonObject();\r\n                  \tres.add(JObject);\r\n                }\r\n            }\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"post\")) {\r\n            WebTarget target = client.target(this.computeBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token.getToken()).post(Entity.json(jsonBody));\r\n            String value = response.readEntity(String.class);\r\n            if (response.getStatus() < 300) {\r\n              \tString isList = \"\\\"\" + objReturn + \"s\\\": [\";\r\n                if (value.contains(isList)) {\r\n                  \tobjReturn += \"s\";\r\n                    JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n                    for (JsonElement element : rootArray) {\r\n                        JsonObject JObject = element.getAsJsonObject();\r\n                        res.add(JObject);\r\n                    }\r\n                } else {\r\n                    JsonObject JObject = new JsonParser().parse(value).getAsJsonObject();\r\n                    JObject = JObject.get(objReturn).getAsJsonObject();\r\n                  \tres.add(JObject);\r\n                }\r\n            }\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"delete\")) {\r\n            WebTarget target = client.target(this.computeBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token.getToken()).delete();\r\n            String value = response.readEntity(String.class);\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"put\")) {\r\n          \t//TODO\r\n        } else {\r\n            throw new BusinessException(\"Cannot found \" + methodType + \" in method type request. Available methods : get, post, delete, put\");\r\n        }\r\n        client.close();\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Do all of network api call\r\n     * @param url the path of the call\r\n     * @param token the token currently used by the api\r\n     * @param jsonBody of the request. Can be null if no body is needed\r\n     * @param methodType GET, POST, DELETE, PUT\r\n     * @param objReturn to return is the json response\r\n     * @return the list of json object\r\n     * @throws if the methodType used is not supported\r\n     */\r\n    public List<JsonObject> networkAPI(String url, Credential token, String jsonBody, String methodType, String objReturn) throws BusinessException {\r\n        List<JsonObject> res = new ArrayList<>();\r\n        Client client = ClientBuilder.newClient();\r\n      \tif (methodType.equalsIgnoreCase(\"get\")) {\r\n            WebTarget target = client.target(this.networkBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token.getToken()).get();\r\n            String value = response.readEntity(String.class);\r\n            if (response.getStatus() < 300) {\r\n              \tString isList = \"\\\"\" + objReturn + \"s\\\": [\";\r\n                if (value.contains(isList)) {\r\n                  \tobjReturn += \"s\";\r\n                    JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n                    for (JsonElement element : rootArray) {\r\n                        JsonObject JObject = element.getAsJsonObject();\r\n                        res.add(JObject);\r\n                    }\r\n                } else {\r\n                    JsonObject JObject = new JsonParser().parse(value).getAsJsonObject();\r\n                    JObject = JObject.get(objReturn).getAsJsonObject();\r\n                  \tres.add(JObject);\r\n                }\r\n            }\r\n        \tresponse.close();\r\n        } else if (methodType.equalsIgnoreCase(\"post\")) {\r\n            WebTarget target = client.target(this.networkBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token.getToken()).post(Entity.json(jsonBody));\r\n            String value = response.readEntity(String.class);\r\n            if (response.getStatus() < 300) {\r\n              \tString isList = \"\\\"\" + objReturn + \"s\\\": [\";\r\n                if (value.contains(isList)) {\r\n                  \tobjReturn += \"s\";\r\n                    JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n                    for (JsonElement element : rootArray) {\r\n                        JsonObject JObject = element.getAsJsonObject();\r\n                        res.add(JObject);\r\n                    }\r\n                } else {\r\n                    JsonObject JObject = new JsonParser().parse(value).getAsJsonObject();\r\n                    JObject = JObject.get(objReturn).getAsJsonObject();\r\n                  \tres.add(JObject);\r\n                }\r\n            }\r\n        \tresponse.close();\r\n        } else if (methodType.equalsIgnoreCase(\"delete\")) {\r\n            WebTarget target = client.target(this.networkBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token.getToken()).delete();\r\n            String value = response.readEntity(String.class);\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"put\")) {\r\n          \t//TODO\r\n        } else {\r\n            throw new BusinessException(\"Cannot found \" + methodType + \" in method type request. Available methods : get, post, delete, put\");\r\n        }\r\n        client.close();\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Do all of image api call\r\n     * @param url the path of the call\r\n     * @param token the token currently used by the api\r\n     * @param jsonBody of the request. Can be null if no body is needed\r\n     * @param methodType GET, POST, DELETE, PUT\r\n     * @param objReturn to return is the json response\r\n     * @return the list of json object\r\n     * @throws if the methodType used is not supported\r\n     */\r\n    public List<JsonObject> imageAPI(String url, Credential token, String jsonBody, String methodType, String objReturn) throws BusinessException {\r\n        List<JsonObject> res = new ArrayList<>();\r\n        Client client = ClientBuilder.newClient();\r\n      \tif (methodType.equalsIgnoreCase(\"get\")) {\r\n            WebTarget target = client.target(this.imageBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token.getToken()).get();\r\n            String value = response.readEntity(String.class);\r\n            if (response.getStatus() < 300) {\r\n              \tString isList = \"\\\"\" + objReturn + \"s\\\": [\";\r\n                if (value.contains(isList)) {\r\n                  \tobjReturn += \"s\";\r\n                    JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n                    for (JsonElement element : rootArray) {\r\n                        JsonObject JObject = element.getAsJsonObject();\r\n                        res.add(JObject);\r\n                    }\r\n                } else {\r\n                    JsonObject JObject = new JsonParser().parse(value).getAsJsonObject();\r\n                    JObject = JObject.get(objReturn).getAsJsonObject();\r\n                  \tres.add(JObject);\r\n                }\r\n            }\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"post\")) {\r\n            WebTarget target = client.target(this.imageBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token.getToken()).post(Entity.json(jsonBody));\r\n            String value = response.readEntity(String.class);\r\n            if (response.getStatus() < 300) {\r\n              \tString isList = \"\\\"\" + objReturn + \"s\\\": [\";\r\n                if (value.contains(isList)) {\r\n                  \tobjReturn += \"s\";\r\n                    JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n                    for (JsonElement element : rootArray) {\r\n                        JsonObject JObject = element.getAsJsonObject();\r\n                        res.add(JObject);\r\n                    }\r\n                } else {\r\n                    JsonObject JObject = new JsonParser().parse(value).getAsJsonObject();\r\n                    JObject = JObject.get(objReturn).getAsJsonObject();\r\n                  \tres.add(JObject);\r\n                }\r\n            }\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"delete\")) {\r\n            WebTarget target = client.target(this.imageBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token.getToken()).delete();\r\n            String value = response.readEntity(String.class);\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"put\")) {\r\n          \t//TODO\r\n        } else {\r\n            throw new BusinessException(\"Cannot found \" + methodType + \" in method type request. Available methods : get, post, delete, put\");\r\n        }\r\n        client.close();\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Do all of identity api call\r\n     * @param url the path of the call\r\n     * @param token the token currently used by the api\r\n     * @param jsonBody of the request. Can be null if no body is needed\r\n     * @param methodType GET, POST, DELETE, PUT\r\n     * @param objReturn to return is the json response\r\n     * @return the list of json object\r\n     * @throws if the methodType used is not supported\r\n     */\r\n    public List<JsonObject> IdentityAPI(String url, Credential token, String jsonBody, String methodType, String objReturn) throws BusinessException {\r\n        List<JsonObject> res = new ArrayList<>();\r\n        Client client = ClientBuilder.newClient();\r\n      \tif (methodType.equalsIgnoreCase(\"get\")) {\r\n            WebTarget target = client.target(this.identityBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token.getToken()).get();\r\n            String value = response.readEntity(String.class);\r\n            if (response.getStatus() < 300) {\r\n              \tString isList = \"\\\"\" + objReturn + \"s\\\": [\";\r\n                if (value.contains(isList)) {\r\n                  \tobjReturn += \"s\";\r\n                    JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n                    for (JsonElement element : rootArray) {\r\n                        JsonObject JObject = element.getAsJsonObject();\r\n                        res.add(JObject);\r\n                    }\r\n                } else {\r\n                    JsonObject JObject = new JsonParser().parse(value).getAsJsonObject();\r\n                    JObject = JObject.get(objReturn).getAsJsonObject();\r\n                  \tres.add(JObject);\r\n                }\r\n            }\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"post\")) {\r\n            WebTarget target = client.target(this.identityBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token.getToken()).post(Entity.json(jsonBody));\r\n            String value = response.readEntity(String.class);\r\n            if (response.getStatus() < 300) {\r\n              \tString isList = \"\\\"\" + objReturn + \"s\\\": [\";\r\n                if (value.contains(isList)) {\r\n                  \tobjReturn += \"s\";\r\n                    JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(objReturn);\r\n                    for (JsonElement element : rootArray) {\r\n                        JsonObject JObject = element.getAsJsonObject();\r\n                        res.add(JObject);\r\n                    }\r\n                } else {\r\n                    JsonObject JObject = new JsonParser().parse(value).getAsJsonObject();\r\n                    JObject = JObject.get(objReturn).getAsJsonObject();\r\n                  \tres.add(JObject);\r\n                }\r\n            }\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"delete\")) {\r\n            WebTarget target = client.target(this.identityBaseAPI + url);\r\n            Response response = target.request().header(\"X-Auth-Token\", token.getToken()).delete();\r\n            String value = response.readEntity(String.class);\r\n            response.close();\r\n        } else if (methodType.equalsIgnoreCase(\"put\")) {\r\n          \t//TODO\r\n        } else {\r\n            throw new BusinessException(\"Cannot found \" + methodType + \" in method type request. Available methods : get, post, delete, put\");\r\n        }\r\n        client.close();\r\n        return res;\r\n    }\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n}\r\n",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  }, {
    "code" : "org.meveo.script.openstack.CheckOVHToken",
    "description" : "Check the openstack user token and create a new one if needed",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.script.openstack;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.time.OffsetDateTime;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport java.util.List;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.service.custom.CustomEntityTemplateService;\r\nimport org.meveo.service.crm.impl.CustomFieldTemplateService;\r\nimport org.meveo.model.customEntities.CustomEntityTemplate;\r\nimport org.meveo.model.crm.CustomFieldTemplate;\r\nimport org.meveo.security.PasswordUtils;\r\nimport org.meveo.model.crm.custom.CustomFieldValues;\r\nimport org.apache.commons.lang3.SerializationUtils;\r\n\r\npublic class CheckOVHToken extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListOVHServersScript.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private CustomEntityTemplateService customEntityTemplateService = getCDIBean(CustomEntityTemplateService.class);\r\n\r\n    private CustomFieldTemplateService customFieldTemplateService = getCDIBean(CustomFieldTemplateService.class);\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n\r\n    public void checkOVHToken(Credential credential, ServiceProvider openstack) {\r\n        log.info(\"call CheckOVHToken\");\r\n        // Verification of the token\r\n        OffsetDateTime currentDate = OffsetDateTime.now();\r\n        OffsetDateTime expireDate = OffsetDateTime.parse(credential.getTokenExpiry().toString());\r\n        if (currentDate.isAfter(expireDate)) {\r\n            try {\r\n                // Dechiffrement du mot de passe\r\n                String stringToDecrypt = credential.getPasswordSecret();\r\n                String codeClass = credential.getClass().getSimpleName();\r\n                CustomEntityTemplate cet = customEntityTemplateService.findByCode(codeClass);\r\n                List<Object> objectsToHash = new ArrayList<>();\r\n              \tCustomEntityInstance credentialCEI = CEIUtils.pojoToCei(credential);\r\n                Map<String, CustomFieldTemplate> customFieldTemplates = customFieldTemplateService.findByAppliesTo(cet.getAppliesTo());\r\n                var hash = CEIUtils.getHash(credentialCEI, customFieldTemplates);\r\n                String stringDecrypted = PasswordUtils.decryptNoSecret(hash, stringToDecrypt);\r\n                // Creation du body\r\n                HashMap<String, Object> master = new HashMap<String, Object>();\r\n                HashMap<String, Object> auth = new HashMap<String, Object>();\r\n                HashMap<String, Object> identity = new HashMap<String, Object>();\r\n                HashMap<String, Object> password = new HashMap<String, Object>();\r\n                HashMap<String, Object> user = new HashMap<String, Object>();\r\n                HashMap<String, Object> domain = new HashMap<String, Object>();\r\n                ArrayList<String> method = new ArrayList<String>();\r\n                method.add(\"password\");\r\n                domain.put(\"id\", \"default\");\r\n                user.put(\"password\", stringDecrypted);\r\n                user.put(\"domain\", domain);\r\n                user.put(\"name\", credential.getUsername());\r\n                password.put(\"user\", user);\r\n                identity.put(\"methods\", method);\r\n                identity.put(\"password\", password);\r\n                auth.put(\"identity\", identity);\r\n                master.put(\"auth\", auth);\r\n                String resp = JacksonUtil.toStringPrettyPrinted(master);\r\n                // Creation of the identity token\r\n                Client client = ClientBuilder.newClient();\r\n                WebTarget target = client.target(\"https://auth.\" + openstack.getApiBaseUrl() + \"/v3/auth/tokens\");\r\n                Response response = target.request().post(Entity.json(resp));\r\n                credential.setToken(response.getHeaderString(\"X-Subject-Token\"));\r\n                credential.setTokenExpiry(currentDate.plusDays(1).toInstant());\r\n                try {\r\n                    crossStorageApi.createOrUpdate(defaultRepo, credential);\r\n                } catch (Exception ex) {\r\n                    log.error(\"error update credentials {} :{}\", credential.getUuid(), ex.getMessage());\r\n                }\r\n                response.close();\r\n            } catch (Exception ex) {\r\n                log.error(ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  }, {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}