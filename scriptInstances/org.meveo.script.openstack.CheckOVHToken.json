{
  "code" : "org.meveo.script.openstack.CheckOVHToken",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script.openstack;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.time.OffsetDateTime;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport java.util.List;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.security.PasswordUtils;\r\n\r\npublic class CheckOVHToken extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ListOVHServersScript.class);\r\n  \r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n  \r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n  \r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        super.execute(parameters);\r\n    }\r\n\r\n    public void checkOVHToken(Credential credential, ServiceProvider openstack) {\r\n        log.info(\"call CheckOVHToken\");\r\n        // Verification of the token\r\n        OffsetDateTime currentDate = OffsetDateTime.now();\r\n        OffsetDateTime expireDate = OffsetDateTime.parse(credential.getTokenExpiry().toString());\r\n        if (currentDate.isAfter(expireDate)) {\r\n            // Dechiffrement du mot de passe\r\n            String stringToDecrypt = credential.getPasswordSecret();\r\n            List<Object> objectsToHash = new ArrayList<>();\r\n            CustomEntityInstance credentialCEI = CEIUtils.pojoToCei(credential);\r\n            credentialCEI.getCfValuesAsValues().forEach((key, value) -> {\r\n                if(value != null) {\r\n                    objectsToHash.add(value);\r\n                }\r\n            });\r\n            var hash = PasswordUtils.getSalt(objectsToHash.toArray());\r\n            String decryptedString = PasswordUtils.decrypt(hash, stringToDecrypt);\r\n            log.info(stringToDecrypt + \" converted to \" + decryptedString);\r\n            // Creation du body\r\n            HashMap<String, Object> master = new HashMap<String, Object>();\r\n            HashMap<String, Object> auth = new HashMap<String, Object>();\r\n            HashMap<String, Object> identity = new HashMap<String, Object>();\r\n            HashMap<String, Object> password = new HashMap<String, Object>();\r\n            HashMap<String, Object> user = new HashMap<String, Object>();\r\n            HashMap<String, Object> domain = new HashMap<String, Object>();\r\n            ArrayList<String> method = new ArrayList<String>();\r\n            method.add(\"password\");\r\n            domain.put(\"id\", \"default\");\r\n            user.put(\"password\", decryptedString);\r\n            user.put(\"domain\", domain);\r\n            user.put(\"name\", credential.getUsername());\r\n            password.put(\"user\", user);\r\n            identity.put(\"methods\", method);\r\n            identity.put(\"password\", password);\r\n            auth.put(\"identity\", identity);\r\n            master.put(\"auth\", auth);\r\n            String resp = JacksonUtil.toStringPrettyPrinted(master);\r\n            // Creation of the identity token\r\n            Client client = ClientBuilder.newClient();\r\n            WebTarget target = client.target(\"https://auth.\" + openstack.getApiBaseUrl() + \"/v3/auth/tokens\");\r\n            Response response = target.request().post(Entity.json(resp));\r\n            credential.setToken(response.getHeaderString(\"X-Subject-Token\"));\r\n            credential.setTokenExpiry(currentDate.plusDays(1).toInstant());\r\n            try {\r\n                crossStorageApi.createOrUpdate(defaultRepo, credential);\r\n            } catch (Exception ex) {\r\n                log.error(\"error update credentials {} :{}\", credential.getUuid(), ex.getMessage());\r\n            }\r\n            response.close();\r\n        }\r\n    }\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}