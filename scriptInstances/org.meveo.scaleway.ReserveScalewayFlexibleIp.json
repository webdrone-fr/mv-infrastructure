{
  "code" : "org.meveo.scaleway.ReserveScalewayFlexibleIp",
  "description" : "Reserver Scaleway Flexible Ip",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.scaleway;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.Response;\r\n\r\nimport com.google.gson.*;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.PublicIp;\r\nimport org.meveo.model.customEntities.Server;\r\nimport org.meveo.model.customEntities.ServiceProvider;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class ReserveScalewayFlexibleIp extends Script {\r\n\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(ReserveScalewayFlexibleIp.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n    \r\n    static final private String SCALEWAY_URL = \"api.scaleway.com\";\r\n    static final private String BASE_PATH = \"/instance/v1/zones/\";\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        PublicIp publicIp = CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance)parameters.get(CONTEXT_ENTITY), PublicIp.class);\r\n\r\n        if (publicIp.getZone() == null) {\r\n            throw new BusinessException(\"Invalid Public Ip Zone\");\r\n        } else if (publicIp.getProvider() == null) {\r\n            throw new BusinessException(\"Invalid Public Ip Provider\");\r\n        }\r\n        \r\n        Credential credential = CredentialHelperService.getCredential(SCALEWAY_URL, crossStorageApi, defaultRepo);\r\n        if (credential == null) {\r\n            throw new BusinessException(\"No credential found for \"+SCALEWAY_URL);\r\n        } else {\r\n            logger.info(\"using credential {}({}) with username {}\", credential.getDomainName(), credential.getUuid(), credential.getUsername());\r\n        }\r\n\r\n        String zone = publicIp.getZone();\r\n        ServiceProvider provider = publicIp.getProvider();\r\n\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        WebTarget target = client.target(\"https://\"+SCALEWAY_URL+BASE_PATH+zone+\"/ips\");\r\n\r\n        Map<String, Object> body = new HashMap<String, Object>();\r\n        //Project\r\n        // Webdrone ID = 6a0c2ca8-917a-418a-90a3-05949b55a7ae\r\n        String projectId = \"6a0c2ca8-917a-418a-90a3-05949b55a7ae\";\r\n        if (publicIp.getProject() != null) {\r\n            projectId = publicIp.getProject();\r\n        }\r\n        body.put(\"project\", projectId);\r\n\r\n        // Tags\r\n        if (publicIp.getTags().size() > 1) {\r\n            ArrayList<String> ipTags = new ArrayList<String>();\r\n            for (String tag : publicIp.getTags()) {\r\n                ipTags.add(tag);\r\n            }\r\n            body.put(\"tags\", ipTags);\r\n        }\r\n\r\n        // Id of Server to attach IP to\r\n        if (publicIp.getServer() != null) {\r\n            String serverId = publicIp.getServer().getProviderSideId();\r\n            body.put(\"server\", serverId);\r\n        }\r\n\r\n        String resp = JacksonUtil.toStringPrettyPrinted(body);\r\n        Response response = \r\n            CredentialHelperService.setCredential(target.request(\"application/json\"), credential)\r\n                .post(Entity.json(resp));\r\n        String value = response.readEntity(String.class);\r\n        logger.info(\"response : {}\", value);\r\n        logger.debug(\"response status : {}\", response.getStatus());\r\n        parameters.put(RESULT_GUI_MESSAGE, \"Status: \"+response.getStatus()+\", response: \"+value);\r\n\r\n        if (response.getStatus()<300) {\r\n            JsonObject flexibleIpObj = new JsonParser().parse(value).getAsJsonObject();\r\n            JsonObject publicIpObj = flexibleIpObj.get(\"ip\").getAsJsonObject();\r\n            \r\n            // Default Values\r\n            publicIp.setProviderSideId(publicIpObj.get(\"id\").getAsString());\r\n            publicIp.setIpVFourAddress(publicIpObj.get(\"address\").getAsString());\r\n            publicIp.setOrganization(publicIpObj.get(\"organization\").getAsString());\r\n            publicIp.setProject(publicIpObj.get(\"project\").getAsString());\r\n            publicIp.setProvider(provider);\r\n\r\n            // Reverse - nullable\r\n            if (!publicIpObj.get(\"reverse\").isJsonNull()) {\r\n                publicIp.setReverse(publicIpObj.get(\"reverse\").getAsString());\r\n            }\r\n\r\n            // Server\r\n            if (!publicIpObj.get(\"server\").isJsonNull()) {\r\n                String serverId = publicIpObj.get(\"server\").getAsJsonObject().get(\"id\").getAsString();\r\n                try {\r\n                    Server server = crossStorageApi.find(defaultRepo, Server.class).by(\"providerSideId\", serverId).getResult();\r\n                    publicIp.setServer(server);\r\n                } catch (Exception e) {\r\n                    logger.error(\"Error retrieving Server for Public Ip : {} : {} \", publicIp.getProviderSideId(), e.getMessage());\r\n                }\r\n            }\r\n\r\n            // Tags\r\n            if (!publicIpObj.get(\"tags\").isJsonNull()) {\r\n                ArrayList<String> ipTags = new ArrayList<String>();\r\n                for (JsonElement tag : publicIpObj.get(\"tags\").getAsJsonArray()) {\r\n                    ipTags.add(tag.getAsString());\r\n                }\r\n                publicIp.setTags(ipTags);\r\n            }\r\n\r\n            // Location Definition\r\n            String locationDefinition = \"zone_id/platform_id/cluster_id/hypervisor_id/node_id\";\r\n            publicIp.setLocationDefinition(locationDefinition);\r\n\r\n            // Location\r\n            if (!flexibleIpObj.get(\"Location\").isJsonNull()) {\r\n                String location = flexibleIpObj.get(\"Location\").getAsString();\r\n                publicIp.setLocation(location);\r\n            }\r\n\r\n            try {\r\n                crossStorageApi.createOrUpdate(defaultRepo, publicIp);\r\n                logger.info(\"Public Ip : {} successfully created\", publicIp.getProviderSideId());\r\n            } catch (Exception e) {\r\n                logger.error(\"Error reserving Public IP for Public Ip : {} : {} \", publicIp.getProviderSideId(), e.getMessage());\r\n            }\r\n            response.close();\r\n        }\r\n    }\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}