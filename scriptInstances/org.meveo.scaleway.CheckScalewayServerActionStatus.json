{
  "code" : "org.meveo.scaleway.CheckScalewayServerActionStatus",
  "description" : "Check Scaleway Server Action Status",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.scaleway;\r\n\r\nimport java.time.Duration;\r\nimport java.time.OffsetDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.Map;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.Response;\r\n\r\nimport com.google.gson.*;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.ScalewayServer;\r\nimport org.meveo.model.customEntities.ServerAction;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CheckScalewayServerActionStatus extends Script{\r\n    \r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(CheckScalewayServerActionStatus.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    static final private String SCALEWAY_URL = \"api.scaleway.com\";\r\n    static final private String BASE_PATH = \"/instance/v1/zones/\";\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        ServerAction action = CEIUtils.ceiToPojo((org.meveo.model.customEntities.CustomEntityInstance) parameters.get(\"event\"), ServerAction.class);\r\n        \r\n        if (action.getProviderSideId()==null){\r\n            throw new BusinessException(\"Invalid Action ID\");\r\n        } else if (action.getServer()== null){\r\n            throw new BusinessException(\"Action not affected to server\");\r\n        }\r\n\r\n        String actionId = action.getProviderSideId();\r\n        String serverId = action.getServer().getUuid();\r\n        ScalewayServer server = null;\r\n        String zone = null;\r\n        try {\r\n            server = crossStorageApi.find(defaultRepo, serverId, ScalewayServer.class);\r\n            zone = server.getZone();\r\n        } catch (Exception e) {\r\n            logger.error(\"Error retrieving server : {}\", serverId, e.getMessage());\r\n            throw new BusinessException(\"Server not found\");\r\n        }\r\n\r\n        Credential credential = CredentialHelperService.getCredential(SCALEWAY_URL, crossStorageApi, defaultRepo);\r\n        if (credential == null) {\r\n            throw new BusinessException(\"No credential found for \"+SCALEWAY_URL);\r\n        } else {\r\n            logger.info(\"Using Credential {} with username {}\", credential.getUuid(), credential.getUsername());\r\n        }\r\n\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(new CredentialHelperService.LoggingFilter());\r\n        WebTarget target = client.target(\"https://\"+SCALEWAY_URL+BASE_PATH+zone+\"/tasks/\"+actionId);\r\n        Boolean actionComplete = false;\r\n        do {\r\n            Response response = CredentialHelperService.setCredential(target.request(), credential).get();\r\n            String value = response.readEntity(String.class);\r\n            logger.info(\"response : \" + value);\r\n            logger.debug(\"response status : {}\", response.getStatus());\r\n            if(response.getStatus()<300) {\r\n                JsonObject taskObj = new JsonParser().parse(value).getAsJsonObject().get(\"task\").getAsJsonObject();\r\n                if (!taskObj.get(\"terminated_at\").isJsonNull()) {\r\n                    action.setResponse(taskObj.get(\"status\").getAsString());\r\n                    Duration timeElapsed = Duration.between(\r\n                        OffsetDateTime.parse(taskObj.get(\"started_at\").getAsString()).toInstant(),\r\n                        OffsetDateTime.parse(taskObj.get(\"terminated_at\").getAsString()).toInstant()); \r\n                    action.setElapsedTimeMs(timeElapsed.toMillis());\r\n                    action.setProgress(taskObj.get(\"progress\").getAsLong());\r\n                    actionComplete = true;\r\n                    parameters.put(RESULT_GUI_MESSAGE, \"Action :\"+action.getAction() +\" terminated in : \"+action.getElapsedTimeMs()+\" with status : \"+action.getResponse());\r\n                } else if (action.getResponse().equalsIgnoreCase(\"failure\")) {\r\n                    throw new BusinessException(\"Task failed\");\r\n                } else {\r\n                    action.setProgress(taskObj.get(\"progress\").getAsLong());\r\n                    action.setResponse(taskObj.get(\"status\").getAsString());\r\n                }\r\n                try {\r\n                    crossStorageApi.createOrUpdate(defaultRepo, action);\r\n                } catch (Exception e) {\r\n                    logger.error(\"Error with Action Status : {}\", e.getMessage());\r\n                }\r\n            }\r\n            response.close();\r\n        } while (actionComplete != true);\r\n\r\n        if (action.getResponse().equalsIgnoreCase(\"success\")) {\r\n            JsonObject serverDetailsObj = ScalewayHelperService.getServerDetailsAfterSuccessfulAction(zone, server.getProviderSideId(), credential);\r\n            // Values to update\r\n            // Default Server values\r\n            String publicIp = null;\r\n            JsonArray allowedActions = new JsonArray();\r\n            ArrayList<String> serverActions = new ArrayList<String>();\r\n            String location = null;\r\n            // Scaleway specific values\r\n            String privateIp = null;\r\n            String ipVSix = null;\r\n            String status = null;\r\n\r\n            switch (action.getAction()) {\r\n                case \"poweron\": \r\n                    // Public Ip\r\n                    if(!serverDetailsObj.get(\"public_ip\").isJsonNull()){\r\n                        publicIp = serverDetailsObj.get(\"public_ip\").getAsJsonObject().get(\"address\").getAsString();\r\n                    }\r\n                    // Server Actions\r\n                    allowedActions = serverDetailsObj.get(\"allowed_actions\").getAsJsonArray();\r\n                    for (JsonElement allowedAction : allowedActions) {\r\n                        serverActions.add(allowedAction.getAsString());\r\n                    }\r\n                    // Location\r\n                    if (!serverDetailsObj.get(\"location\").isJsonNull()) {\r\n                        JsonObject locationObj = serverDetailsObj.get(\"location\").getAsJsonObject();\r\n                        String zone_id = locationObj.get(\"zone_id\").getAsString();\r\n                        String platform_id = locationObj.get(\"platform_id\").getAsString();\r\n                        String cluster_id = locationObj.get(\"cluster_id\").getAsString();\r\n                        String hypervisor_id = locationObj.get(\"hypervisor_id\").getAsString();\r\n                        String node_id = locationObj.get(\"node_id\").getAsString();\r\n                        location = zone_id+\"/\"+platform_id+\"/\"+cluster_id+\"/\"+hypervisor_id+\"/\"+node_id;\r\n                    }\r\n                    if(!serverDetailsObj.get(\"private_ip\").isJsonNull()) {\r\n                        privateIp = serverDetailsObj.get(\"private_ip\").getAsString();\r\n                    }\r\n                    \r\n                    if (!serverDetailsObj.get(\"ipv6\").isJsonNull()) {\r\n                        ipVSix = serverDetailsObj.get(\"ipv6\").getAsJsonObject().get(\"address\").getAsString();\r\n                    }\r\n                    \r\n                    status = \"running\";\r\n                    break;\r\n                case \"poweroff\":\r\n                    // Server Actions\r\n                    allowedActions = serverDetailsObj.get(\"allowed_actions\").getAsJsonArray();\r\n                    for (JsonElement allowedAction : allowedActions) {\r\n                        serverActions.add(allowedAction.getAsString());\r\n                    }\r\n                    status = \"stopped\";\r\n                    break;\r\n                case \"stop_in_place\":\r\n                    // Public Ip\r\n                    if(!serverDetailsObj.get(\"public_ip\").isJsonNull()){\r\n                        publicIp = serverDetailsObj.get(\"public_ip\").getAsJsonObject().get(\"address\").getAsString();\r\n                    }\r\n                    // Server Actions\r\n                    allowedActions = serverDetailsObj.get(\"allowed_actions\").getAsJsonArray();\r\n                    for (JsonElement allowedAction : allowedActions) {\r\n                        serverActions.add(allowedAction.getAsString());\r\n                    }\r\n                    // Location\r\n                    if (!serverDetailsObj.get(\"location\").isJsonNull()) {\r\n                        JsonObject locationObj = serverDetailsObj.get(\"location\").getAsJsonObject();\r\n                        String zone_id = locationObj.get(\"zone_id\").getAsString();\r\n                        String platform_id = locationObj.get(\"platform_id\").getAsString();\r\n                        String cluster_id = locationObj.get(\"cluster_id\").getAsString();\r\n                        String hypervisor_id = locationObj.get(\"hypervisor_id\").getAsString();\r\n                        String node_id = locationObj.get(\"node_id\").getAsString();\r\n                        location = zone_id+\"/\"+platform_id+\"/\"+cluster_id+\"/\"+hypervisor_id+\"/\"+node_id;\r\n                    }\r\n                    if(!serverDetailsObj.get(\"private_ip\").isJsonNull()) {\r\n                        privateIp = serverDetailsObj.get(\"private_ip\").getAsString();\r\n                    }\r\n                    \r\n                    if (!serverDetailsObj.get(\"ipv6\").isJsonNull()) {\r\n                        ipVSix = serverDetailsObj.get(\"ipv6\").getAsJsonObject().get(\"address\").getAsString();\r\n                    }\r\n\r\n                    status = \"stopped in place\";\r\n                    break;\r\n            }\r\n            server.setLastUpdate(OffsetDateTime.parse(serverDetailsObj.get(\"modification_date\").getAsString()).toInstant());\r\n            server.setPublicIp(publicIp);\r\n            server.setServerActions(serverActions);\r\n            server.setLocation(location);\r\n            server.setPrivateIp(privateIp);\r\n            server.setIpVSix(ipVSix);\r\n            server.setStatus(status);\r\n            try {\r\n                crossStorageApi.createOrUpdate(defaultRepo, server);\r\n            }catch(Exception e){\r\n                logger.error(\"Error updating server after action\", e.getMessage());\r\n            }\r\n        } else if(action.getResponse().equalsIgnoreCase(\"pending\")) {\r\n            String serverStatus = null;\r\n            switch(action.getAction()) {\r\n                case \"poweron\":\r\n                    serverStatus = \"starting\";\r\n                    break;\r\n                case \"poweroff\":\r\n                    serverStatus = \"stopping\";\r\n                    break;\r\n                case \"stop_in_place\":\r\n                    serverStatus = \"stopping\";\r\n                    break;\r\n                case \"reboot\":\r\n                    serverStatus = \"rebooting\";\r\n                    break;\r\n                case \"backup\":\r\n                    serverStatus = \"backing up\";\r\n                    break;\r\n            }\r\n            server.setStatus(serverStatus);\r\n            try {\r\n                crossStorageApi.createOrUpdate(defaultRepo, server);\r\n            }catch(Exception e){\r\n                logger.error(\"Error updating server after action\", e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}