[ {
  "active" : true,
  "code" : "GEOLITE",
  "description" : "Geolite IP services",
  "license" : "GPL",
  "currentVersion" : "0.1",
  "transient" : true,
  "codeOnly" : false,
  "inDraft" : true,
  "moduleItems" : [ {
    "dtoClassName" : "org.meveo.api.dto.job.JobInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "UpdateIPLocalizationDBJob",
      "description" : "Execute geolite local db files update",
      "jobCategory" : "MEDIATION",
      "jobTemplate" : "ScriptingJob",
      "customFields" : {
        "customField" : [ {
          "code" : "ScriptingJob_script",
          "entityReferenceValue" : {
            "classname" : "org.meveo.model.scripts.ScriptInstance",
            "classnameCode" : null,
            "code" : "com.webdrone.geolite.UpdateIPLocalizationDBScript",
            "id" : 9,
            "empty" : false
          },
          "empty" : false
        } ],
        "inheritedCustomField" : [ ],
        "empty" : false
      },
      "timerCode" : "Monthly",
      "limitToSingleNode" : true
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "com.webdrone.geolite.UpdateIPLocalizationDBScript",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package com.webdrone.geolite;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.Map;\r\nimport java.util.zip.GZIPInputStream;\r\n\r\nimport org.apache.commons.compress.archivers.tar.TarArchiveEntry;\r\nimport org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.apache.commons.io.IOUtils;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport com.webdrone.geolite.GeoliteScript;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.commons.utils.ParamBean;\r\nimport org.meveo.commons.utils.ParamBeanFactory;\r\n\r\npublic class UpdateIPLocalizationDBScript extends Script {\r\n\r\n    private static String URL_IP_DB_DOWNLOAD = \"https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=twMvvOt2cflp&suffix=tar.gz\";\r\n    private static String URL_IP_DB_CHECKSUM = \"https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=twMvvOt2cflp&suffix=tar.gz.md5\";\r\n    private static String URL_IP_CITY_DB_DOWNLOAD = \"https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=twMvvOt2cflp&suffix=tar.gz\";\r\n    private static String URL_IP_CITY_DB_CHECKSUM = \"https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=twMvvOt2cflp&suffix=tar.gz.md5\";\r\n    private static String URL_IP_ISP_DB_DOWNLOAD = \"https://download.maxmind.com/app/geoip_download?edition_id=GeoIP2-ISP&license_key=twMvvOt2cflp&suffix=tar.gz\";\r\n    private static String URL_IP_ISP_DB_CHECKSUM = \"https://download.maxmind.com/app/geoip_download?edition_id=GeoIP2-ISP&license_key=twMvvOt2cflp&suffix=tar.gz.md5\";\r\n\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(UpdateIPLocalizationDBScript.class);\r\n\r\n  \r\n\tprivate ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\r\n\tprivate ParamBean config = paramBeanFactory.getInstance();\r\n    private String rootPath = config.getChrootDir(null);\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n        LOGGER.info(\"rootPath={}\",rootPath);\r\n\t\tsuper.execute(parameters);\r\n        String checkSumSystem = null;\r\n        updateDb(rootPath, checkSumSystem, GeoliteScript.GEOLITE_DATABASE_FILE, GeoliteScript.GEOLITE_DATABASE_ARCHIVE_FILE, GeoliteScript.GEOLITE_CHECKSUM_FILE, URL_IP_DB_DOWNLOAD, URL_IP_DB_CHECKSUM);\r\n        updateDb(rootPath, checkSumSystem, GeoliteScript.GEOLITE_CITY_DATABASE_FILE, GeoliteScript.GEOLITE_CITY_DATABASE_ARCHIVE_FILE, GeoliteScript.GEOLITE_CITY_CHECKSUM_FILE, URL_IP_CITY_DB_DOWNLOAD, URL_IP_CITY_DB_CHECKSUM);\r\n        updateDb(rootPath, checkSumSystem, GeoliteScript.GEOLITE_ISP_DATABASE_FILE, GeoliteScript.GEOLITE_ISP_DATABASE_ARCHIVE_FILE, GeoliteScript.GEOLITE_ISP_CHECKSUM_FILE, URL_IP_ISP_DB_DOWNLOAD, URL_IP_ISP_DB_CHECKSUM);\r\n    }\r\n\r\n    protected void updateDb(String wdConfigurationPath, String checkSumSystem, String databaseFile, String archiveFile, String checkSumFile, String urlDb, String urlCheckSum) {\r\n        try {\r\n            try {\r\n                checkSumSystem = FileUtils.readFileToString(new File(rootPath + checkSumFile));\r\n            } catch (FileNotFoundException e) {\r\n                LOGGER.info(\"UpdateLocalizationDBJob - no checksum file found - db will be downloaded \" + checkSumFile);\r\n            }\r\n            boolean isSameCheckSum = false;\r\n            String checkSumOnline = IOUtils.toString(new URL(urlCheckSum));;\r\n            if(StringUtils.isNotBlank(checkSumSystem)){\r\n                isSameCheckSum = checkSumSystem.equals(checkSumOnline);\r\n            }\r\n\r\n            if (!isSameCheckSum){\r\n                File archiveFile_ = new File(wdConfigurationPath + archiveFile);\r\n\r\n                FileUtils.copyURLToFile(new URL(urlDb), archiveFile_);\r\n\r\n                File destinationFile = new File(rootPath + databaseFile);\r\n\r\n                if (archiveFile.endsWith(\"tar.gz\")) {\r\n\r\n                    File tarFile_ = new File(rootPath + archiveFile.substring(0, archiveFile.length()-3));\r\n\r\n                    unZipIt(archiveFile_,tarFile_);\r\n\r\n                    untarIt(tarFile_, destinationFile);\r\n\r\n                } else {\r\n\r\n                    unZipIt(archiveFile_,destinationFile);\r\n\r\n                }\r\n\r\n                FileUtils.write(new File(rootPath + checkSumFile), checkSumOnline);\r\n\r\n//                GeoliteService.invalidate(databaseFile);\r\n\r\n            }else{\r\n\r\n                LOGGER.info(\"UpdateLocalizationDBJob : localization database not updated - check sum is the same\");\r\n\r\n            }\r\n\r\n        } catch (IOException e) {\r\n\r\n            LOGGER.error(\"UpdateLocalizationDBJob : localization database not update - file download failed\",e);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public void unZipIt(File zipFile, File outputFile) throws IOException{\r\n\r\n        byte[] buffer = new byte[1024];\r\n\r\n        GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(zipFile));\r\n\r\n        FileOutputStream out = new FileOutputStream(outputFile);\r\n\r\n        int len;\r\n\r\n        while ((len = gzis.read(buffer)) > 0) {\r\n\r\n            out.write(buffer, 0, len);\r\n\r\n        }\r\n\r\n        gzis.close();\r\n\r\n        out.close();\r\n\r\n    }\r\n\r\n    private static void untarIt(File tarFile, File outFile) throws IOException{\r\n\r\n            TarArchiveInputStream myTarFile=new TarArchiveInputStream(new FileInputStream(tarFile));\r\n\r\n                TarArchiveEntry entry = null;\r\n\r\n                int offset;\r\n\r\n                FileOutputStream outputFile=null;\r\n\r\n                //the following two lines remove the .tar.gz extension for the folder name\r\n\r\n                String tarFolderName = tarFile.getName().substring(0, tarFile.getName().lastIndexOf('.'));\r\n\r\n                tarFolderName = tarFolderName.substring(0, tarFolderName.lastIndexOf('.'));\r\n\r\n                //read every single entry in TAR file\r\n\r\n                while ((entry = myTarFile.getNextTarEntry()) != null) {\r\n\r\n                    File outputDir =  new File(tarFile.getParent() + \"/\" + tarFolderName + \"/\" + entry.getName());\r\n\r\n                    if(! outputDir.getParentFile().exists()){\r\n\r\n                        outputDir.getParentFile().mkdirs();\r\n\r\n                    }\r\n\r\n                    //if the entry in the tar is a directory, it needs to be created, only files can be extracted\r\n\r\n                    if(entry.isDirectory()){\r\n\r\n                        outputDir.mkdirs();\r\n\r\n                    }else{\r\n\r\n                        byte[] content = new byte[(int) entry.getSize()];\r\n\r\n                        offset=0;\r\n\r\n                        myTarFile.read(content, offset, content.length - offset);\r\n\r\n                        outputFile=new FileOutputStream(outputDir);\r\n\r\n                        IOUtils.write(content,outputFile);\r\n\r\n                        outputFile.close();\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                //close and delete the tar files, leaving the original .tar.gz and the extracted folders\r\n\r\n                myTarFile.close();\r\n\r\n            File tarFolder = new File(tarFile.getParent() + \"/\" + tarFolderName);\r\n\r\n            if (!searchDBFileInTarFolder(outFile, tarFolder)) {\r\n\r\n                throw new IllegalStateException(outFile.getName() + \" DB file not found in tar \" + tarFolderName);\r\n\r\n            }\r\n\r\n            FileUtils.forceDelete(tarFolder);\r\n\r\n    }\r\n\r\n    protected static boolean searchDBFileInTarFolder(File outFile, File tarFolder) {\r\n\r\n        File[] files = tarFolder.listFiles();\r\n\r\n        for ( int i = 0; i < files.length; i++ ) {\r\n\r\n             if (files[i].isDirectory()) {\r\n\r\n                 if (searchDBFileInTarFolder(outFile, files[i]))\r\n\r\n                     return true;\r\n\r\n             } else {\r\n\r\n                 if (files[i].getName().equalsIgnoreCase(outFile.getName())) {\r\n\r\n                     files[i].renameTo(outFile);\r\n\r\n                     return true;\r\n\r\n                 }\r\n\r\n             }\r\n\r\n         }\r\n\r\n         return false;\r\n\r\n    }\r\n\r\n\t\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ {
        "groupId" : "org.apache.commons",
        "artifactId" : "commons-compress",
        "version" : "1.5",
        "coordinates" : "org.apache.commons:commons-compress:1.5"
      } ],
      "importScriptInstances" : [ {
        "active" : true,
        "code" : "com.webdrone.geolite.GeoliteScript",
        "inputs" : [ ],
        "outputs" : [ {
          "name" : "geoLiteCountryDatabase",
          "type" : "GeoLiteReader",
          "description" : null
        }, {
          "name" : "geoLiteCityDatabase",
          "type" : "GeoLiteReader",
          "description" : null
        }, {
          "name" : "geoLiteISPDatabase",
          "type" : "GeoLiteReader",
          "description" : null
        }, {
          "name" : "geoliteDatabaseInputStream",
          "type" : "InputStream",
          "description" : null
        } ],
        "generateOutputs" : false,
        "type" : "JAVA",
        "transactionType" : "SAME",
        "script" : "package com.webdrone.geolite;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport java.io.IOException;\r\nimport java.net.InetAddress;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.node.JsonNodeFactory;\r\nimport com.fasterxml.jackson.databind.node.ObjectNode;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.Date;\r\nimport java.util.Properties;\r\n\r\nimport org.apache.commons.io.FileUtils;\r\nimport com.maxmind.db.Reader;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.commons.utils.ParamBean;\r\nimport org.meveo.commons.utils.ParamBeanFactory;\r\n\r\n\r\npublic class GeoliteScript extends Script {\r\n\t\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tsuper.execute(parameters);\r\n\t}\r\n\r\n    public static final String GEOLITE_DATABASE_FILE = \"geolite/GeoLite2-Country.mmdb\";\r\n    public static final String GEOLITE_DATABASE_ARCHIVE_FILE = \"geolite/GeoLite2-Country.mmdb.tar.gz\";\r\n    public static final String GEOLITE_CHECKSUM_FILE = \"geolite/GeoLite2-Country.tar.gz.md5\";\r\n    public static final String GEOLITE_CITY_DATABASE_FILE = \"geolite/GeoLite2-City.mmdb\";\r\n    public static final String GEOLITE_CITY_DATABASE_ARCHIVE_FILE = \"geolite/GeoLite2-City.mmdb.tar.gz\";\r\n    public static final String GEOLITE_CITY_CHECKSUM_FILE = \"geolite/GeoLite2-City.tar.gz.md5\";\r\n    public static final String GEOLITE_ISP_DATABASE_FILE = \"geolite/GeoIP2-ISP.mmdb\";\r\n    public static final String GEOLITE_ISP_DATABASE_ARCHIVE_FILE = \"geolite/GeoIP2-ISP.mmdb.tar.gz\";\r\n    public static final String GEOLITE_ISP_CHECKSUM_FILE = \"geolite/GeoIP2-ISP.tar.gz.md5\";\r\n\r\n    private static GeoLiteReader geoLiteCountryReader;\r\n    private static GeoLiteReader geoLiteCityReader;\r\n    private static GeoLiteReader geoLiteISPReader;\r\n\r\n    private static Properties SYST_PROPS = System.getProperties();\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(GeoliteScript.class);\r\n  \r\n\tprivate ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\r\n\tprivate ParamBean config = paramBeanFactory.getInstance();\r\n    private String rootPath = config.getChrootDir(\"default\");\r\n  \r\n  \r\n    public class GeoLiteReader {\r\n      private Reader reader;\r\n      public GeoLiteReader(Reader reader){\r\n          this.reader = reader;\r\n      }\r\n      public JsonNode get(InetAddress ipAddress) throws IOException{\r\n          JsonNode jsonNode = reader.get(ipAddress,JsonNode.class);\r\n          if(jsonNode !=null){\r\n              JsonNode country = jsonNode.get(\"country\");\r\n              if(country!=null){\r\n                  String countryCode = country.get(\"iso_code\").asText();\r\n                  if(countryCode.equals(\"HK\")){\r\n                      ObjectNode countryNames = JsonNodeFactory.instance.objectNode();\r\n                      countryNames.put(\"en\", \"China\");\r\n                      countryNames.put(\"fr\", \"Chine\");\r\n                      countryNames.put(\"de\", \"China\");\r\n                      countryNames.put(\"ru\", \"Китай\");\r\n                      countryNames.put(\"ja\", \"中国\");\r\n                      countryNames.put(\"es\", \"China\");\r\n                      countryNames.put(\"zh-CN\", \"中国\");\r\n                      countryNames.put(\"pt-BR\", \"China\");\r\n                      ObjectNode countryNode = JsonNodeFactory.instance.objectNode();\r\n                      countryNode.put(\"iso_code\",\"CN\");\r\n                      countryNode.put(\"geoname_id\",1814991);\r\n                      countryNode.set(\"names\", countryNames);\r\n                      ObjectNode node = JsonNodeFactory.instance.objectNode();\r\n                      node.set(\"continent\", jsonNode.get(\"continent\"));\r\n                      node.set(\"country\", countryNode);\r\n                      node.set(\"registered_country\", countryNode);\r\n                      jsonNode = node;\r\n                      LOGGER.warn(\"Country HK override\");\r\n                  }\r\n              }\r\n          }\r\n          return jsonNode;\r\n    }\r\n\r\n    public void close() throws IOException {\r\n        if(this.reader!=null){\r\n            this.reader.close();\r\n        }\r\n    }\r\n  }\r\n\r\n\r\n    public  GeoLiteReader getGeoLiteCountryDatabase() throws IOException {\r\n        if (geoLiteCountryReader == null) {\r\n            File database = new File(rootPath + GEOLITE_DATABASE_FILE);\r\n            //DatabaseReader reader = new DatabaseReader.Builder(database).build();\r\n            InputStream databaseStream = FileUtils.openInputStream(database);\r\n            Reader reader = new Reader(databaseStream);\r\n            geoLiteCountryReader = new GeoLiteReader(reader);\r\n            checkBddBuilDate(reader, GeoliteScript.GEOLITE_CHECKSUM_FILE);\r\n        }\r\n        return geoLiteCountryReader;\r\n    }\r\n\r\n    public  GeoLiteReader getGeoLiteCityDatabase() throws IOException {\r\n        if (geoLiteCityReader == null) {\r\n            File database = new File(rootPath + GEOLITE_CITY_DATABASE_FILE);\r\n            //DatabaseReader reader = new DatabaseReader.Builder(database).build();\r\n            InputStream databaseStream = FileUtils.openInputStream(database);\r\n            Reader reader = new Reader(databaseStream);\r\n            geoLiteCityReader = new GeoLiteReader(reader);\r\n            checkBddBuilDate(reader, GeoliteScript.GEOLITE_CITY_CHECKSUM_FILE);\r\n        }\r\n        return geoLiteCityReader;\r\n    }\r\n\r\n    public GeoLiteReader getGeoLiteISPDatabase() throws IOException {\r\n        if (geoLiteISPReader == null) {\r\n            File database = new File(rootPath + GEOLITE_ISP_DATABASE_FILE);\r\n            //DatabaseReader reader = new DatabaseReader.Builder(database).build();\r\n            InputStream databaseStream = FileUtils.openInputStream(database);\r\n            Reader reader = new Reader(databaseStream);\r\n            geoLiteISPReader = new GeoLiteReader(reader);\r\n            checkBddBuilDate(reader, GeoliteScript.GEOLITE_ISP_CHECKSUM_FILE);\r\n        }\r\n        return geoLiteISPReader;\r\n    }\r\n\r\n    protected void checkBddBuilDate(Reader reader, String checkSumFile) {\r\n        Date geoLiteBddBuildDate = reader.getMetadata().getBuildDate();\r\n        if ((System.currentTimeMillis() - geoLiteBddBuildDate.getTime()) > (31l /* <= nb jours*/ *24*3600*1000)) {\r\n            LOGGER.error(\"Geolite BDD is not up to date :\" + geoLiteBddBuildDate + \". Program will remove checksumfile to force download\");\r\n            LOGGER.info(\"Geolite BDD should be updated each month\");\r\n            try {\r\n                FileUtils.forceDelete(new File(rootPath + checkSumFile));\r\n            } catch (FileNotFoundException e) {\r\n                //ignored\r\n            } catch (Exception e) {\r\n                LOGGER.error(e.getMessage(),e);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void invalidateCountryReader() {\r\n        if(geoLiteCountryReader!=null){\r\n            try {\r\n                geoLiteCountryReader.close();\r\n            } catch (IOException e) {\r\n                LOGGER.error(\" geoLiteCountryReader close failed \",e);\r\n            }\r\n        }\r\n        geoLiteCountryReader = null;\r\n    }\r\n\r\n    public static void invalidateCityReader() {\r\n        if(geoLiteCityReader!=null){\r\n            try {\r\n                geoLiteCityReader.close();\r\n            } catch (IOException e) {\r\n                LOGGER.error(\" geoLiteCityReader close failed \",e);\r\n            }\r\n        }\r\n        geoLiteCityReader = null;\r\n    }\r\n\r\n    public static void invalidateISPReader() {\r\n        if(geoLiteISPReader!=null){\r\n            try {\r\n                geoLiteISPReader.close();\r\n            } catch (IOException e) {\r\n                LOGGER.error(\" geoLiteISPReader close failed \",e);\r\n            }\r\n        }\r\n        geoLiteISPReader = null;\r\n    }\r\n\r\n    public InputStream getGeoliteDatabaseInputStream() throws IOException{\r\n        File database = new File(rootPath + GEOLITE_DATABASE_FILE);\r\n        InputStream databaseStream = new FileInputStream(database);\r\n        return databaseStream;\r\n    }\r\n\r\n    public static void invalidate(String databaseFile) {\r\n        if (GEOLITE_DATABASE_FILE.equals(databaseFile))\r\n            invalidateCountryReader();\r\n        else if (GEOLITE_CITY_DATABASE_FILE.equals(databaseFile))\r\n            invalidateCityReader();\r\n        else\r\n            invalidateISPReader();\r\n    }\r\n}",
        "executionRoles" : [ ],
        "sourcingRoles" : [ ],
        "mavenDependencies" : [ {
          "groupId" : "com.maxmind.db",
          "artifactId" : "maxmind-db",
          "version" : "2.0.0",
          "coordinates" : "com.maxmind.db:maxmind-db:2.0.0"
        } ],
        "importScriptInstances" : [ ]
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "com.webdrone.geolite.GeoliteScript",
      "inputs" : [ ],
      "outputs" : [ {
        "name" : "geoLiteCountryDatabase",
        "type" : "GeoLiteReader",
        "description" : null
      }, {
        "name" : "geoLiteCityDatabase",
        "type" : "GeoLiteReader",
        "description" : null
      }, {
        "name" : "geoLiteISPDatabase",
        "type" : "GeoLiteReader",
        "description" : null
      }, {
        "name" : "geoliteDatabaseInputStream",
        "type" : "InputStream",
        "description" : null
      } ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package com.webdrone.geolite;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport java.io.IOException;\r\nimport java.net.InetAddress;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.node.JsonNodeFactory;\r\nimport com.fasterxml.jackson.databind.node.ObjectNode;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.Date;\r\nimport java.util.Properties;\r\n\r\nimport org.apache.commons.io.FileUtils;\r\nimport com.maxmind.db.Reader;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.commons.utils.ParamBean;\r\nimport org.meveo.commons.utils.ParamBeanFactory;\r\n\r\n\r\npublic class GeoliteScript extends Script {\r\n\t\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tsuper.execute(parameters);\r\n\t}\r\n\r\n    public static final String GEOLITE_DATABASE_FILE = \"geolite/GeoLite2-Country.mmdb\";\r\n    public static final String GEOLITE_DATABASE_ARCHIVE_FILE = \"geolite/GeoLite2-Country.mmdb.tar.gz\";\r\n    public static final String GEOLITE_CHECKSUM_FILE = \"geolite/GeoLite2-Country.tar.gz.md5\";\r\n    public static final String GEOLITE_CITY_DATABASE_FILE = \"geolite/GeoLite2-City.mmdb\";\r\n    public static final String GEOLITE_CITY_DATABASE_ARCHIVE_FILE = \"geolite/GeoLite2-City.mmdb.tar.gz\";\r\n    public static final String GEOLITE_CITY_CHECKSUM_FILE = \"geolite/GeoLite2-City.tar.gz.md5\";\r\n    public static final String GEOLITE_ISP_DATABASE_FILE = \"geolite/GeoIP2-ISP.mmdb\";\r\n    public static final String GEOLITE_ISP_DATABASE_ARCHIVE_FILE = \"geolite/GeoIP2-ISP.mmdb.tar.gz\";\r\n    public static final String GEOLITE_ISP_CHECKSUM_FILE = \"geolite/GeoIP2-ISP.tar.gz.md5\";\r\n\r\n    private static GeoLiteReader geoLiteCountryReader;\r\n    private static GeoLiteReader geoLiteCityReader;\r\n    private static GeoLiteReader geoLiteISPReader;\r\n\r\n    private static Properties SYST_PROPS = System.getProperties();\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(GeoliteScript.class);\r\n  \r\n\tprivate ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\r\n\tprivate ParamBean config = paramBeanFactory.getInstance();\r\n    private String rootPath = config.getChrootDir(\"default\");\r\n  \r\n  \r\n    public class GeoLiteReader {\r\n      private Reader reader;\r\n      public GeoLiteReader(Reader reader){\r\n          this.reader = reader;\r\n      }\r\n      public JsonNode get(InetAddress ipAddress) throws IOException{\r\n          JsonNode jsonNode = reader.get(ipAddress,JsonNode.class);\r\n          if(jsonNode !=null){\r\n              JsonNode country = jsonNode.get(\"country\");\r\n              if(country!=null){\r\n                  String countryCode = country.get(\"iso_code\").asText();\r\n                  if(countryCode.equals(\"HK\")){\r\n                      ObjectNode countryNames = JsonNodeFactory.instance.objectNode();\r\n                      countryNames.put(\"en\", \"China\");\r\n                      countryNames.put(\"fr\", \"Chine\");\r\n                      countryNames.put(\"de\", \"China\");\r\n                      countryNames.put(\"ru\", \"Китай\");\r\n                      countryNames.put(\"ja\", \"中国\");\r\n                      countryNames.put(\"es\", \"China\");\r\n                      countryNames.put(\"zh-CN\", \"中国\");\r\n                      countryNames.put(\"pt-BR\", \"China\");\r\n                      ObjectNode countryNode = JsonNodeFactory.instance.objectNode();\r\n                      countryNode.put(\"iso_code\",\"CN\");\r\n                      countryNode.put(\"geoname_id\",1814991);\r\n                      countryNode.set(\"names\", countryNames);\r\n                      ObjectNode node = JsonNodeFactory.instance.objectNode();\r\n                      node.set(\"continent\", jsonNode.get(\"continent\"));\r\n                      node.set(\"country\", countryNode);\r\n                      node.set(\"registered_country\", countryNode);\r\n                      jsonNode = node;\r\n                      LOGGER.warn(\"Country HK override\");\r\n                  }\r\n              }\r\n          }\r\n          return jsonNode;\r\n    }\r\n\r\n    public void close() throws IOException {\r\n        if(this.reader!=null){\r\n            this.reader.close();\r\n        }\r\n    }\r\n  }\r\n\r\n\r\n    public  GeoLiteReader getGeoLiteCountryDatabase() throws IOException {\r\n        if (geoLiteCountryReader == null) {\r\n            File database = new File(rootPath + GEOLITE_DATABASE_FILE);\r\n            //DatabaseReader reader = new DatabaseReader.Builder(database).build();\r\n            InputStream databaseStream = FileUtils.openInputStream(database);\r\n            Reader reader = new Reader(databaseStream);\r\n            geoLiteCountryReader = new GeoLiteReader(reader);\r\n            checkBddBuilDate(reader, GeoliteScript.GEOLITE_CHECKSUM_FILE);\r\n        }\r\n        return geoLiteCountryReader;\r\n    }\r\n\r\n    public  GeoLiteReader getGeoLiteCityDatabase() throws IOException {\r\n        if (geoLiteCityReader == null) {\r\n            File database = new File(rootPath + GEOLITE_CITY_DATABASE_FILE);\r\n            //DatabaseReader reader = new DatabaseReader.Builder(database).build();\r\n            InputStream databaseStream = FileUtils.openInputStream(database);\r\n            Reader reader = new Reader(databaseStream);\r\n            geoLiteCityReader = new GeoLiteReader(reader);\r\n            checkBddBuilDate(reader, GeoliteScript.GEOLITE_CITY_CHECKSUM_FILE);\r\n        }\r\n        return geoLiteCityReader;\r\n    }\r\n\r\n    public GeoLiteReader getGeoLiteISPDatabase() throws IOException {\r\n        if (geoLiteISPReader == null) {\r\n            File database = new File(rootPath + GEOLITE_ISP_DATABASE_FILE);\r\n            //DatabaseReader reader = new DatabaseReader.Builder(database).build();\r\n            InputStream databaseStream = FileUtils.openInputStream(database);\r\n            Reader reader = new Reader(databaseStream);\r\n            geoLiteISPReader = new GeoLiteReader(reader);\r\n            checkBddBuilDate(reader, GeoliteScript.GEOLITE_ISP_CHECKSUM_FILE);\r\n        }\r\n        return geoLiteISPReader;\r\n    }\r\n\r\n    protected void checkBddBuilDate(Reader reader, String checkSumFile) {\r\n        Date geoLiteBddBuildDate = reader.getMetadata().getBuildDate();\r\n        if ((System.currentTimeMillis() - geoLiteBddBuildDate.getTime()) > (31l /* <= nb jours*/ *24*3600*1000)) {\r\n            LOGGER.error(\"Geolite BDD is not up to date :\" + geoLiteBddBuildDate + \". Program will remove checksumfile to force download\");\r\n            LOGGER.info(\"Geolite BDD should be updated each month\");\r\n            try {\r\n                FileUtils.forceDelete(new File(rootPath + checkSumFile));\r\n            } catch (FileNotFoundException e) {\r\n                //ignored\r\n            } catch (Exception e) {\r\n                LOGGER.error(e.getMessage(),e);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void invalidateCountryReader() {\r\n        if(geoLiteCountryReader!=null){\r\n            try {\r\n                geoLiteCountryReader.close();\r\n            } catch (IOException e) {\r\n                LOGGER.error(\" geoLiteCountryReader close failed \",e);\r\n            }\r\n        }\r\n        geoLiteCountryReader = null;\r\n    }\r\n\r\n    public static void invalidateCityReader() {\r\n        if(geoLiteCityReader!=null){\r\n            try {\r\n                geoLiteCityReader.close();\r\n            } catch (IOException e) {\r\n                LOGGER.error(\" geoLiteCityReader close failed \",e);\r\n            }\r\n        }\r\n        geoLiteCityReader = null;\r\n    }\r\n\r\n    public static void invalidateISPReader() {\r\n        if(geoLiteISPReader!=null){\r\n            try {\r\n                geoLiteISPReader.close();\r\n            } catch (IOException e) {\r\n                LOGGER.error(\" geoLiteISPReader close failed \",e);\r\n            }\r\n        }\r\n        geoLiteISPReader = null;\r\n    }\r\n\r\n    public InputStream getGeoliteDatabaseInputStream() throws IOException{\r\n        File database = new File(rootPath + GEOLITE_DATABASE_FILE);\r\n        InputStream databaseStream = new FileInputStream(database);\r\n        return databaseStream;\r\n    }\r\n\r\n    public static void invalidate(String databaseFile) {\r\n        if (GEOLITE_DATABASE_FILE.equals(databaseFile))\r\n            invalidateCountryReader();\r\n        else if (GEOLITE_CITY_DATABASE_FILE.equals(databaseFile))\r\n            invalidateCityReader();\r\n        else\r\n            invalidateISPReader();\r\n    }\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ {
        "groupId" : "com.maxmind.db",
        "artifactId" : "maxmind-db",
        "version" : "2.0.0",
        "coordinates" : "com.maxmind.db:maxmind-db:2.0.0"
      } ],
      "importScriptInstances" : [ ]
    }
  } ],
  "moduleDependencies" : [ ],
  "moduleFiles" : [ ]
} ]