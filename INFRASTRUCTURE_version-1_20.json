[ {
  "active" : true,
  "code" : "INFRASTRUCTURE",
  "description" : "Infrastructure management",
  "license" : "GPL",
  "currentVersion" : "1.20",
  "meveoVersionBase" : "6.9.0",
  "transient" : true,
  "inDraft" : true,
  "codeOnly" : false,
  "moduleItems" : [ {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityCategoryDto",
    "dtoData" : {
      "code" : "PROXY",
      "name" : "Proxies"
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.meveo.script.ScalewayServerCreationScript",
      "description" : "create scaleway server",
      "inputs" : [ ],
      "outputs" : [ {
        "name" : "entityClass",
        "type" : "Class<SERVER>",
        "description" : null
      } ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.script;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.model.customEntities.SERVER;\r\nimport org.meveo.model.customEntities.CrudEventListenerScript;\r\n\r\npublic class ScalewayServerCreationScript extends Script implements CrudEventListenerScript<SERVER> {\r\n    private static final Logger log = LoggerFactory.getLogger(ScalewayServerCreationScript.class);\r\n\r\n\tprivate CrossStorageApi crossStorageApi;\r\n\tprivate RepositoryService rService;\r\n\r\n\tpublic ScalewayServerCreationScript() {\r\n\t\tcrossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\t\trService = getCDIBean(RepositoryService.class);\r\n\t}\r\n\r\n\tpublic Class<SERVER> getEntityClass() {\r\n\t\treturn SERVER.class;\r\n\t}\r\n\r\n\t/**\r\n\t * Called just before entity persistence\r\n\t * \r\n\t * @param entity entity being persisted\r\n\t */\r\n\tpublic void prePersist(SERVER entity) {\r\n\t\tlog.info(\"prePersist \"+entity);\r\n\t}\r\n\r\n\t/**\r\n\t * Called just before entity update\r\n\t * \r\n\t * @param entity entity being updated\r\n\t */\r\n\tpublic void preUpdate(SERVER entity) {\r\n\t\tlog.info(\"preUpdate \"+entity);\r\n\t}\r\n\r\n\t/**\r\n\t * Called just before entity removal\r\n\t * \r\n\t * @param entity entity being removed\r\n\t */\r\n\tpublic void preRemove(SERVER entity) {\r\n\t\tlog.info(\"preRemove \"+entity);\r\n\t}\r\n\r\n\t/**\r\n\t * Called just after entity persistence\r\n\t * \r\n\t * @param entity persisted entity\r\n\t */\r\n\tpublic void postPersist(SERVER entity) {\r\n\t\tlog.info(\"postPersist \"+entity);\r\n\t}\r\n\r\n\t/**\r\n\t * Called just after entity update\r\n\t * \r\n\t * @param entity updated entity\r\n\t */\r\n\tpublic void postUpdate(SERVER entity) {\r\n\t\tlog.info(\"postUpdate \"+entity);\r\n\t}\r\n\r\n\t/**\r\n\t * Called just after entity removal\r\n\t * \r\n\t * @param entity removed entity\r\n\t */\r\n\tpublic void postRemove(SERVER entity) {\r\n\t\tlog.info(\"postRemove \"+entity);\r\n\t}\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "com.webdrone.proxy.deployment.WebdroneApiV1",
      "description" : "manage proxies on v1 API app instance",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package com.webdrone.proxy.deployment;\r\n\r\nimport java.time.Instant;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.customEntities.ApplicationInstance;\r\nimport org.meveo.model.customEntities.PROXY_DEPLOYMNT;\r\nimport org.meveo.model.customEntities.PROXY_GROUP;\r\nimport org.meveo.model.customEntities.PROXY_PROVIDER;\r\nimport org.meveo.model.customEntities.PROXY;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.api.persistence.CrossStorageRequest;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\n\r\nimport org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport com.google.gson.*;\r\n\r\npublic class WebdroneApiV1 extends Script {\r\n    private static final Logger log = LoggerFactory.getLogger(WebdroneApiV1.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private String getAsJsonDomaineArray(List<String> l){\r\n        String result  = \"[\";\r\n        if(l!=null){\r\n            String sep=\"\";\r\n            for(String domain:l){\r\n                int type=0;//website, i.e. subdomain, like www.google.com that match www.google.com only\r\n                if(domain.startsWith(\"*\")){\r\n                    if(domain.endsWith(\"*\")){\r\n                        type=2;// pattern like google that match google.com, maps.google.com, google.fr, ...\r\n                        domain = domain.substring(1, domain.length()-1);\r\n                    } else {\r\n                        type=1; // domain like google.com that match google.com, www.google.com,\r\n                        domain = domain.substring(1, domain.length());\r\n                    }\r\n                }\r\n                result+=sep+\"{\\\"pattern\\\":\\\"\"+domain+\"\\\",\\\"type\\\":\"+type+\"}\";\r\n                sep=\",\";\r\n            }\r\n        }\r\n        result+=\" ]\";\r\n        return result;\r\n    }\r\n\r\n    private String getAsJsonArray(List<String> l){\r\n        String result  = \"[\";\r\n        if(l!=null){\r\n            String sep=\"\";\r\n            for(String repo:l){\r\n                result+=sep+\"\\\"\"+repo+\"\\\"\";\r\n                sep=\",\";\r\n            }\r\n        }\r\n        result+=\" ]\";\r\n        return result;\r\n    }\r\n\r\n    \r\n    private void setValuesFromJson(JsonObject proxyDepObj,PROXY_DEPLOYMNT proxyDeployment){\r\n        proxyDeployment.setAvailable(Boolean.valueOf(proxyDepObj.get(\"available\").getAsString()));\r\n        proxyDeployment.setActive(Boolean.valueOf(proxyDepObj.get(\"active\").getAsString()));\r\n        if(proxyDepObj.get(\"lastGeoLocTestDate\")!=null && !proxyDepObj.get(\"lastGeoLocTestDate\").isJsonNull()){\r\n            long lastGeoLocTestDate = proxyDepObj.get(\"lastGeoLocTestDate\").getAsLong();\r\n            proxyDeployment.setLastGeoLocTestDate(Instant.ofEpochMilli(lastGeoLocTestDate));\r\n        }\r\n        if(proxyDepObj.get(\"lastFailedDate\")!=null && !proxyDepObj.get(\"lastFailedDate\").isJsonNull()){\r\n            long lastFailedDate = proxyDepObj.get(\"lastFailedDate\").getAsLong();\r\n            proxyDeployment.setLastFailedDate(Instant.ofEpochMilli(lastFailedDate));\r\n        }\r\n        if(proxyDepObj.get(\"lastSuccesDate\")!=null && !proxyDepObj.get(\"lastSuccesDate\").isJsonNull()){\r\n            long lastSuccesDate = proxyDepObj.get(\"lastSuccesDate\").getAsLong();\r\n            proxyDeployment.setLastSuccesDate(Instant.ofEpochMilli(lastSuccesDate));\r\n        }\r\n        if(proxyDepObj.get(\"repositoryExclus\")!=null && !proxyDepObj.get(\"repositoryExclus\").isJsonNull()){\r\n            List<String> repositoryExclus = new ArrayList<>();\r\n            JsonArray array = proxyDepObj.get(\"repositoryExclus\").getAsJsonArray();\r\n            for(JsonElement element:array){\r\n                repositoryExclus.add(element.getAsString());\r\n            }\r\n            proxyDeployment.setExcludedRepos(repositoryExclus);\r\n        }\r\n        if(proxyDepObj.get(\"repositoryInclus\")!=null && !proxyDepObj.get(\"repositoryInclus\").isJsonNull()){\r\n            List<String> repositoryInclus = new ArrayList<>();\r\n            JsonArray array = proxyDepObj.get(\"repositoryInclus\").getAsJsonArray();\r\n            for(JsonElement element:array){\r\n                repositoryInclus.add(element.getAsString());\r\n            }\r\n            proxyDeployment.setIncludedRepos(repositoryInclus);\r\n        }\r\n        \r\n        if(proxyDepObj.get(\"domainesExclus\")!=null && !proxyDepObj.get(\"domainesExclus\").isJsonNull()){\r\n            List<String> domainesExclus = new ArrayList<>();\r\n            JsonArray array = proxyDepObj.get(\"domainesExclus\").getAsJsonArray();\r\n            for(JsonElement element:array){\r\n                String pattern = element.getAsJsonObject().get(\"pattern\").getAsString();\r\n                int type = element.getAsJsonObject().get(\"type\").getAsInt();\r\n                if(type>0){\r\n                    pattern=\"*\"+pattern;\r\n                    if(type>1){\r\n                        pattern+=\"*\";\r\n                    }\r\n                }\r\n                domainesExclus.add(pattern);\r\n            }\r\n            proxyDeployment.setExcludedDomains(domainesExclus);\r\n        }\r\n        if(proxyDepObj.get(\"domainesInclus\")!=null && !proxyDepObj.get(\"domainesInclus\").isJsonNull()){\r\n            List<String> domainesInclus = new ArrayList<>();\r\n            JsonArray array = proxyDepObj.get(\"domainesInclus\").getAsJsonArray();\r\n            for(JsonElement element:array){\r\n                String pattern = element.getAsJsonObject().get(\"pattern\").getAsString();\r\n                int type = element.getAsJsonObject().get(\"type\").getAsInt();\r\n                if(type>0){\r\n                    pattern=\"*\"+pattern;\r\n                    if(type>1){\r\n                        pattern+=\"*\";\r\n                    }\r\n                }\r\n                domainesInclus.add(pattern);\r\n            }\r\n            proxyDeployment.setIncludedDomains(domainesInclus);\r\n        }\r\n    }\r\n\r\n    private String getJsonProxyDeployment(PROXY_DEPLOYMNT p){\r\n        String result  = \"  {\"\r\n            +\"\\\"_id\\\": \\\"\"+p.getUuid()+\"\\\",\"\r\n            +\"\\\"ip\\\": \\\"\"+p.getProxy().getIp()+\"\\\",\"\r\n            +\"\\\"port\\\": \"+p.getProxy().getPort()+\",\"\r\n            //+\"\\\"continent\\\": null,\"\r\n            //+\"\\\"country\\\": null,\"\r\n            +\"\\\"isoCountryCode\\\": \\\"\"+p.getProxy().getGroup().getLocation()+\"\\\",\"\r\n            //+\"\\\"region\\\": null,\"\r\n            //+\"\\\"department\\\": null,\"\r\n            +\"\\\"login\\\": \\\"\"+p.getLogin()+\"\\\",\"\r\n            +\"\\\"password\\\": \\\"\"+p.getPassword()+\"\\\",\"\r\n            +\"\\\"webZone\\\": \\\"\"+p.getWebZone()+\"\\\",\"\r\n            +\"\\\"available\\\": \"+(Boolean.TRUE.equals(p.getAvailable()))+\",\"\r\n            +\"\\\"active\\\": \"+(Boolean.TRUE.equals(p.getActive()))+\",\"\r\n            +\"\\\"lastModifiedDate\\\": \"+System.currentTimeMillis()+\",\";\r\n        if(p.getProxy().getProvider()!=null && p.getProxy().getProvider().getName()!=null){\r\n            result += \"\\\"provider\\\": \\\"\"+p.getProxy().getProvider().getName().toUpperCase()+\"\\\",\";\r\n        }\r\n        if(p.getLastGeoLocTestDate()!=null){\r\n            result += \"\\\"lastGeoLocTestDate\\\": \"+p.getLastGeoLocTestDate().toEpochMilli()+\",\";\r\n        }\r\n        if(p.getLastFailedDate()!=null){\r\n            result +=\"\\\"lastFailedDate\\\": \"+p.getLastFailedDate().toEpochMilli()+\",\";\r\n        }\r\n        result +=\"\\\"locationKO\\\": \"+(Boolean.TRUE.equals(p.getLocationKo()))+\",\";\r\n        if(p.getLastSuccesDate()!=null){\r\n            result +=\"\\\"lastSuccesDate\\\": \"+p.getLastSuccesDate().toEpochMilli()+\",\";\r\n        }\r\n        result += \"\\\"repositoryInclus\\\": \"+getAsJsonArray(p.getIncludedRepos())+\",\"\r\n            +\"\\\"repositoryExclus\\\": \"+getAsJsonArray(p.getExcludedRepos())+\",\"\r\n            +\"\\\"domainesInclus\\\": \"+getAsJsonDomaineArray(p.getIncludedDomains())+\",\"\r\n            +\"\\\"domainesExclus\\\": \"+getAsJsonDomaineArray(p.getExcludedDomains())\r\n        +\"}\";\r\n        return result;\r\n    }\r\n\r\n    private List<String> getAsStringList(JsonElement node){\r\n        List<String> result=null;\r\n        if(node != null && node.isJsonArray()){\r\n            JsonArray array = node.getAsJsonArray();\r\n            result = new ArrayList<>();\r\n            for(JsonElement item : array){\r\n                result.add(item.getAsString());\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private String getApiBaseUrl(String domain,Long port){\r\n        String result = domain;\r\n        if(!domain.startsWith(\"http\")){\r\n            result=\"http://\"+domain;\r\n        }\r\n        if(port>0){\r\n            result+=\":\"+port;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private void fillAndGetDetail(PROXY_DEPLOYMNT proxyDeployment)  throws Exception {\r\n        ApplicationInstance appInstance = crossStorageApi.find(defaultRepo, proxyDeployment.getAppInstance().getUuid(), ApplicationInstance.class);\r\n        String proxyUuid = proxyDeployment.getProxy().getUuid();\r\n        PROXY proxy = crossStorageApi.find(defaultRepo, proxyUuid, PROXY.class);\r\n        String proxyGroupUuid = proxy.getGroup().getUuid();\r\n        PROXY_GROUP proxyGroup = crossStorageApi.find(defaultRepo, proxyGroupUuid, PROXY_GROUP.class);\r\n        proxyGroup.setDeployedAppInstance(appInstance);\r\n        proxy.setGroup(proxyGroup);\r\n        proxyDeployment.setAppInstance(appInstance);\r\n        proxyDeployment.setProxy(proxy);\r\n        getDetail(proxyDeployment);\r\n    }\r\n\r\n    private void getDetail(PROXY_DEPLOYMNT proxyDeployment) throws Exception {\r\n        ResteasyClientBuilder builder= new ResteasyClientBuilder();\r\n        Client client = builder.build();\r\n        String endpointUrl = getApiBaseUrl(proxyDeployment.getAppInstance().getDomain(),proxyDeployment.getAppInstance().getPort())+\"/API/ipproxy/get/detail/\";\r\n        String id = proxyDeployment.getProxy().getIp()+\":\"+ proxyDeployment.getProxy().getPort();\r\n        log.info(\"endpointUrl: {} , id: {}\",endpointUrl,id);\r\n        WebTarget target = client.target(endpointUrl);\r\n        Form form = new Form();\r\n        form.param(\"id\", id);\r\n        Entity<Form> entity = Entity.form(form);\r\n        Response response = target.request(MediaType.APPLICATION_JSON).post(entity);\r\n        if (response.getStatus() < 300){\r\n            String value = response.readEntity(String.class);\r\n            log.info(\"response : {}\",value);\r\n            JsonObject proxyObj = new JsonParser().parse(value).getAsJsonObject();\r\n            setValuesFromJson(proxyObj,proxyDeployment);\r\n            try{\r\n                crossStorageApi.createOrUpdate(defaultRepo,proxyDeployment);   \r\n            } catch (Exception e){\r\n                e.printStackTrace();\r\n                log.error(\"cannot persist proxyDeployment\");\r\n                throw new Exception(\"cannot persist proxyDeployment :\"+e.getMessage());\r\n            }\r\n        } else {\r\n            log.error(\"response status : {}\",response.getStatus());\r\n            throw new Exception(\"response status :\"+response.getStatus());\r\n        }\r\n    }\r\n\r\n    private void deployProxy(PROXY_DEPLOYMNT proxyDeployment, ApplicationInstance appInstance, boolean isCreation,Client client)  throws Exception{\r\n        String proxyJson = getJsonProxyDeployment(proxyDeployment);\r\n        String endpointUrl = getApiBaseUrl(appInstance.getDomain(),appInstance.getPort())+\"/API/ipproxy/\";\r\n        WebTarget target = client.target(endpointUrl+(isCreation?\"create\":\"update\"));\r\n        Form form = new Form();\r\n        form.param(\"context\", appInstance.getJsonContext());\r\n        form.param(\"proxy\", proxyJson);\r\n        log.info(\"send context:{}, proxy: {}\",appInstance.getJsonContext(),proxyJson);\r\n        Entity<Form> entity = Entity.form(form);\r\n        Response response = target.request(MediaType.APPLICATION_JSON).post(entity);\r\n        String value = response.readEntity(String.class);\r\n        log.info(\"response : {}\",value);\r\n        crossStorageApi.createOrUpdate(defaultRepo,proxyDeployment);\r\n    }\r\n\r\n    private void deployProxy(PROXY proxy, Client client) throws Exception {\r\n        CrossStorageRequest<PROXY_DEPLOYMNT> csRequest = crossStorageApi.find(defaultRepo,PROXY_DEPLOYMNT.class);\r\n        String proxyDeploymentUuid = proxy.getIp()+\":\"+proxy.getPort();\r\n        csRequest.by(\"uuid\",proxyDeploymentUuid);\r\n        List<PROXY_DEPLOYMNT> proxyDeployments = csRequest.getResults();\r\n        PROXY_DEPLOYMNT proxyDeployment = null;\r\n        PROXY_GROUP proxyGroup = proxy.getGroup();\r\n        ApplicationInstance appInstance = proxyGroup.getDeployedAppInstance();\r\n        boolean isCreation=true;\r\n        if(proxyDeployments.size()>0){\r\n            proxyDeployment = proxyDeployments.get(0);\r\n            if(!appInstance.getUuid().equals(proxyDeployment.getAppInstance().getUuid())){\r\n                String error =\"Proxy \"+proxy.getUuid()+\" already deployed on another appInstance : \"+proxyDeployment.getAppInstance().getDomain();\r\n                log.error(error);\r\n                throw new Exception(error);\r\n            }\r\n            isCreation =false;\r\n        } else {\r\n            proxyDeployment = new PROXY_DEPLOYMNT();\r\n            proxyDeployment.setUuid(proxyDeploymentUuid);\r\n            proxyDeployment.setAppInstance(appInstance);\r\n            proxyDeployment.setActive(true);\r\n            proxyDeployment.setAvailable(true);\r\n            proxyDeployment.setExcludedDomains(List.of());\r\n            proxyDeployment.setExcludedRepos(List.of());\r\n            proxyDeployment.setIncludedRepos(List.of());\r\n            proxyDeployment.setWebZone(\"WEB\");\r\n        }\r\n        proxyDeployment.setProxy(proxy);\r\n        proxyDeployment.setLogin(proxyGroup.getUsername());\r\n        proxyDeployment.setPassword(proxyGroup.getPassword());\r\n        deployProxy(proxyDeployment,appInstance,isCreation,client);\r\n    }\r\n\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tlog.info(\"calling WebdroneApiV1\");\r\n        String actionCode = (String)parameters.get(\"CONTEXT_ACTION\");\r\n        String output=\" action:\"+actionCode;\r\n\t\tif(parameters.containsKey(\"CONTEXT_ENTITY\")){\r\n\t\t\tlog.info(\"action called on a specific custom entity instance\");\r\n\t\t\tCustomEntityInstance cei = (CustomEntityInstance)parameters.get(\"CONTEXT_ENTITY\");\r\n\t\t\tMap<String,Object> cftMap=cei.getCfValuesAsValues();\r\n            if(\"getDetail\".equals(actionCode)){//apply yo PROXY_DEPLOYMNT\r\n                    log.info(\"get Detail\");\r\n                    try {\r\n                        PROXY_DEPLOYMNT proxyDeployment = crossStorageApi.find(defaultRepo, cei.getUuid(), PROXY_DEPLOYMNT.class);\r\n                        fillAndGetDetail(proxyDeployment);\r\n                    } catch(Exception ex){\r\n                        ex.printStackTrace();\r\n                        output+=\" failed :\"+ex.getMessage();\r\n                    }\r\n            } else if(\"sendToApp\".equals(actionCode)){//apply yo PROXY_DEPLOYMNT\r\n                log.info(\"sendToApp\");\r\n                try {\r\n                    PROXY_DEPLOYMNT proxyDeployment = crossStorageApi.find(defaultRepo, cei.getUuid(), PROXY_DEPLOYMNT.class);\r\n                    String appInstanceUuid = ((CustomEntityInstance)cftMap.get(\"appInstance\")).getUuid();\r\n                    ApplicationInstance appInstance = crossStorageApi.find(defaultRepo, appInstanceUuid, ApplicationInstance.class);\r\n                    ResteasyClientBuilder builder= new ResteasyClientBuilder();\r\n                    Client client = builder.build();\r\n                    deployProxy(proxyDeployment,appInstance,false,client);\r\n                } catch(Exception ex){\r\n                    ex.printStackTrace();\r\n                    output+=\" failed :\"+ex.getMessage();\r\n                }\r\n            } else if(\"getDetails\".equals(actionCode)){//apply to PROXY_GROUP\r\n                log.info(\"get Details\");\r\n                String proxyGroupUuid = cei.getUuid();\r\n                String appInstanceUuid = ((CustomEntityInstance)cftMap.get(\"deployedAppInstance\")).getUuid();\r\n                CrossStorageRequest<PROXY> csRequest = crossStorageApi.find(defaultRepo,PROXY.class);\r\n                csRequest.by(\"group\",proxyGroupUuid);\r\n                List<PROXY> proxies = csRequest.getResults();\r\n                int count = proxies.size();\r\n                int success= 0;\r\n                log.info(\"synchronize {} proxy, proxyGroup:{}\",count,cftMap);\r\n                for(PROXY proxy:proxies){\r\n                    try {\r\n                        CrossStorageRequest<PROXY_DEPLOYMNT> csRequest2 = crossStorageApi.find(defaultRepo,PROXY_DEPLOYMNT.class);\r\n                        csRequest2.by(\"proxy\",proxy.getUuid());\r\n                        List<PROXY_DEPLOYMNT> proxyDeployments = csRequest2.getResults();\r\n                        int count2 = proxyDeployments.size();\r\n                        if(count2==1){\r\n                            PROXY_DEPLOYMNT proxyDeployment = proxyDeployments.get(0);\r\n                            try {\r\n                                fillAndGetDetail(proxyDeployment);\r\n                                success++;\r\n                            } catch(Exception ex){\r\n                                ex.printStackTrace();\r\n                                output+=\" failed :\"+ex.getMessage();\r\n                            }\r\n                        } else {\r\n                            if(count2 == 0){\r\n                                output+=\" proxy :\"+proxy.getUuid()+\" is not deployed. \";\r\n                            } else {\r\n                                output+=\" proxy :\"+proxy.getUuid()+\" is deployed more than once. \";\r\n                            }\r\n                        }\r\n                    } catch (Exception e){\r\n                        e.printStackTrace();\r\n                        log.error(\"cannot synchronize proxy \"+proxy.getUuid()+\" to appInstance \");\r\n                    }\r\n                }\r\n                output+=\" deployed \"+success+\" proxies / \"+count;\r\n            }\r\n            else if(\"listCount\".equals(actionCode)){// apply to ApplicationInstance\r\n              log.info(\"listCount \");\r\n              String domain = (String) cftMap.get(\"domain\");\r\n              Long port = (Long) cftMap.get(\"port\");\r\n              ResteasyClientBuilder builder= new ResteasyClientBuilder();\r\n              Client client = builder.build();\r\n              if(!domain.startsWith(\"http\")){\r\n                  domain=\"http://\"+domain;\r\n              }\r\n              if(port>0){\r\n                  domain+=\":\"+port;\r\n              }\r\n              log.info(\"domain=\"+domain);\r\n              WebTarget target = client.target(domain+\"/API/ipproxy/list/context/filters/count/\");\r\n              Response response= target.request().build(\"post\").invoke();\r\n              String value = response.readEntity(String.class);\r\n              log.info(\"result=\"+value);\r\n              if (response.getStatus() < 300){\r\n                JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(\"data\");\r\n                //log.debug(\"rootArray: {}\",rootArray);\r\n                /*if(rootObject.get(\"servers\")!=JsonNull.INSTANCE){\r\n                  Object servers = rootObject.get(\"servers\");\r\n                  log.info(\"received servers:{}\",servers);\r\n                }*/\r\n                for(JsonElement element:rootArray){\r\n                  JsonObject proxyDeploymentObj = element.getAsJsonObject();\r\n                  PROXY_DEPLOYMNT proxyDeployment = new PROXY_DEPLOYMNT();\r\n                  proxyDeployment.setUuid(proxyDeploymentObj.get(\"_id\").getAsString());\r\n                  String ip = proxyDeploymentObj.get(\"ip\").getAsString();\r\n                  PROXY proxy = null;\r\n                  try{\r\n                        proxy = crossStorageApi.find(defaultRepo, ip, PROXY.class);\r\n                        log.info(\"found proxy: uuid=\"+proxy.getUuid());\r\n                  } catch (EntityDoesNotExistsException e){}\r\n                  proxyDeployment.setProxy(proxy);\r\n                  ApplicationInstance appInstance = new ApplicationInstance();\r\n                  appInstance.setUuid(cei.getUuid());\r\n                  proxyDeployment.setAppInstance(appInstance);\r\n                  setValuesFromJson(proxyDeploymentObj,proxyDeployment);\r\n                  log.info(\"proxyDeployment: {} appInstance:{}\",proxyDeployment.getUuid(),proxyDeployment.getAppInstance().getUuid());\r\n                  try {\r\n                      crossStorageApi.createOrUpdate(defaultRepo,proxyDeployment);\r\n                  } catch(Exception ex){\r\n                    log.error(\"error creating proxyDeployment {} :{}\",proxyDeployment.getUuid(),ex.getMessage());\r\n                  }\r\n                }\r\n            }\r\n            } else if(\"DeployToApp\".equals(actionCode)){\r\n                String appInstanceUuid = ((CustomEntityInstance)cftMap.get(\"deployedAppInstance\")).getUuid();\r\n                String providerUuid = ((CustomEntityInstance)cftMap.get(\"provider\")).getUuid();\r\n                log.info(\"DeployToApp:{}, proxy provider : {}\",appInstanceUuid,providerUuid);\r\n                \r\n                if(appInstanceUuid!=null && appInstanceUuid.length()>0){}\r\n                    ApplicationInstance appInstance =null;\r\n                    try {\r\n                        appInstance = crossStorageApi.find(defaultRepo, appInstanceUuid, ApplicationInstance.class);\r\n                    } catch (EntityDoesNotExistsException e){\r\n                        e.printStackTrace();\r\n                    }\r\n                    PROXY_PROVIDER provider = null;\r\n                    if(providerUuid!=null){\r\n                        try {\r\n                            provider = crossStorageApi.find(defaultRepo, providerUuid, PROXY_PROVIDER.class);\r\n                            log.info(\"load provider, name={}\",provider.getName());\r\n                        } catch (EntityDoesNotExistsException e){\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n                    if(appInstance!=null){\r\n                        String proxyGroupUuid = cei.getUuid();\r\n                        CrossStorageRequest<PROXY> csRequest = crossStorageApi.find(defaultRepo,PROXY.class);\r\n                        csRequest.by(\"group\",proxyGroupUuid);\r\n                        List<PROXY> proxies = csRequest.getResults();\r\n                        int count = proxies.size();\r\n                        int success= 0;\r\n                        log.info(\"deploy {} proxy, proxyGroup:{}\",count,cftMap);\r\n                        ResteasyClientBuilder builder= new ResteasyClientBuilder();\r\n                        Client client = builder.build();\r\n                        for(PROXY proxy:proxies){\r\n                            try {\r\n                                proxy.getGroup().setUsername(\"\"+cftMap.get(\"username\"));\r\n                                proxy.getGroup().setPassword(\"\"+cftMap.get(\"password\"));\r\n                                proxy.getGroup().setLocation(\"\"+cftMap.get(\"location\"));\r\n                                proxy.getGroup().setDeployedAppInstance(appInstance);\r\n                                proxy.getGroup().setProvider(provider);\r\n                                deployProxy(proxy,client);\r\n                                success++;\r\n                            } catch (Exception e){\r\n                                e.printStackTrace();\r\n                                log.error(\"cannot deploy proxy \"+proxy.getUuid()+\" to appInstance \");\r\n                            }\r\n                        }\r\n                        output+=\" deployed \"+success+\" proxies / \"+count;\r\n                    } else {\r\n                        output+=\" cannot deploy proxy group if it is not associated to an existing AppInstance\";\r\n                    }\r\n                } else {\r\n                    output+=\" cannot deploy proxy group if it is not associated to an AppInstance or a proxy provider\";\r\n                }\r\n            } else {\r\n                output+=\"action called on a list of custom entity instances\";\r\n\t\t\t   //action called on a list of custom entity instances\r\n               if(\"getDetail\".equals(actionCode)){\r\n                   log.info(\"getDetails : {}\",parameters);\r\n               }\r\n\t\t}\r\n\t\tlog.info(\"output:\"+output);\r\n        parameters.put(\"RESULT_GUI_MESSAGE\",output);\r\n\t}\r\n\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.EntityCustomActionDto",
    "dtoData" : {
      "code" : "LIST_SERVER",
      "description" : "List servers",
      "appliesTo" : "CE_SERVICE_PROVIDER",
      "applicableOnEl" : "#{entity.getCfValuesAsValues().get(\"CODE\") eq 'SCALEWAY'}",
      "label" : "List Servers",
      "script" : "org.meveo.script.ListScalewayServersScript",
      "applicableToEntityList" : false,
      "applicableToEntityInstance" : true
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "com.webdrone.proxy.proxyDomainCommandCRUDScript",
      "description" : "add or remove domains to the proxy deployments of a proxy group",
      "inputs" : [ ],
      "outputs" : [ {
        "name" : "entityClass",
        "type" : "Class<proxyDomainCommand>",
        "description" : null
      } ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package com.webdrone.proxy;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport java.util.List;\r\nimport javax.management.RuntimeErrorException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.model.customEntities.proxyDomainCommand;\r\nimport org.meveo.model.customEntities.CrudEventListenerScript;\r\nimport org.meveo.api.persistence.CrossStorageRequest;\r\nimport org.meveo.model.customEntities.PROXY_DEPLOYMNT;\r\nimport org.meveo.model.customEntities.PROXY_GROUP;\r\nimport org.meveo.model.customEntities.PROXY_PROVIDER;\r\nimport org.meveo.model.customEntities.PROXY;\r\n\r\n\r\npublic class proxyDomainCommandCRUDScript extends Script implements CrudEventListenerScript<proxyDomainCommand> {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(proxyDomainCommandCRUDScript.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    public Class<proxyDomainCommand> getEntityClass() {\r\n        return proxyDomainCommand.class;\r\n    }\r\n\r\n    /**\r\n     *  Called just before entity persistence\r\n     *\r\n     *  @param entity entity being persisted\r\n     */\r\n    public void prePersist(proxyDomainCommand entity) {\r\n    }\r\n\r\n    /**\r\n     *  Called just before entity update\r\n     *\r\n     *  @param entity entity being updated\r\n     */\r\n    public void preUpdate(proxyDomainCommand entity) {\r\n        throw new RuntimeException(\"no no no, you cannot update a command\");\r\n    }\r\n\r\n    /**\r\n     *  Called just before entity removal\r\n     *\r\n     *  @param entity entity being removed\r\n     */\r\n    public void preRemove(proxyDomainCommand entity) {\r\n        throw new RuntimeException(\"no no no, you cannot delete a command\");\r\n    }\r\n\r\n    public void postPersist(proxyDomainCommand entity) {\r\n        // TODO\r\n        PROXY_GROUP group = entity.getProxyGroup();\r\n        String proxyGroupUuid = group.getUuid();\r\n        // String appInstanceUuid = ((CustomEntityInstance)cftMap.get(\"deployedAppInstance\")).getUuid();\r\n        CrossStorageRequest<PROXY> csRequest = crossStorageApi.find(defaultRepo, PROXY.class);\r\n        csRequest.by(\"group\", proxyGroupUuid);\r\n        List<PROXY> proxies = csRequest.getResults();\r\n\t\tlog.info(\"postPersist , #proxies = {}\",proxies.size());\r\n        for (PROXY proxy : proxies) {\r\n            try {\r\n                CrossStorageRequest<PROXY_DEPLOYMNT> csRequest2 = crossStorageApi.find(defaultRepo, PROXY_DEPLOYMNT.class);\r\n                csRequest2.by(\"proxy\", proxy.getUuid());\r\n                List<PROXY_DEPLOYMNT> proxyDeployments = csRequest2.getResults();\r\n                int count2 = proxyDeployments.size();\r\n\t\t\t\tlog.info(\"proxy {}, #proxyDeployments = {}\",proxy.getUuid(),count2);\r\n                if (count2 == 1) {\r\n                    PROXY_DEPLOYMNT proxyDeployment = proxyDeployments.get(0);\r\n                    if (\"addExcludedDomain\".equals(entity.getCommand())) {\r\n                        List<String> pded = proxyDeployment.getExcludedDomains();\r\n                        for (String domainToAdd : entity.getDomains()) {\r\n                            if (!pded.contains(domainToAdd)) {\r\n                                pded.add(domainToAdd);\r\n\t\t\t\t\t\t\t\tlog.info(\"addExcludedDomain {}, to = {}\",domainToAdd,proxyDeployment.getUuid());\r\n                            }\r\n                        }\r\n                    } else if (\"removeExcludedDomain\".equals(entity.getCommand())) {\r\n                        proxyDeployment.getExcludedDomains().removeAll(entity.getDomains());\r\n                    }\r\n                    try {\r\n                        crossStorageApi.createOrUpdate(defaultRepo, proxyDeployment);\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                        log.error(\"cannot persist proxyDeployment\");\r\n                        throw new Exception(\"cannot persist proxyDeployment :\" + e.getMessage());\r\n                    }\r\n                } else if (count2 == 0) {\r\n                    log.info(\" proxy :\" + proxy.getUuid() + \" is not deployed. \");\r\n                } else {\r\n                    log.info(\" proxy :\" + proxy.getUuid() + \" is deployed more than once. \");\r\n                }\r\n            } catch (Exception ex) {\r\n                ex.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Called just after entity update\r\n     *\r\n     *  @param entity updated entity\r\n     */\r\n    public void postUpdate(proxyDomainCommand entity) {\r\n    }\r\n\r\n    /**\r\n     *  Called just after entity removal\r\n     *\r\n     *  @param entity removed entity\r\n     */\r\n    public void postRemove(proxyDomainCommand entity) {\r\n    }\r\n}\r\n",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "PROXY_PROVIDER",
      "name" : "Provider",
      "description" : "provider of dedicated proxies",
      "customEntityCategoryCode" : "PROXY",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "apiScriptCode",
        "description" : "provisionning API Script",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY_PROVIDER",
        "appliesTo" : "CE_PROXY_PROVIDER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy provider:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "domain",
        "description" : "Domain name",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY_PROVIDER",
        "appliesTo" : "CE_PROXY_PROVIDER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy provider:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "name",
        "description" : "name",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY_PROVIDER",
        "appliesTo" : "CE_PROXY_PROVIDER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : true,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : false,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy provider:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "token",
        "description" : "API token",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY_PROVIDER",
        "appliesTo" : "CE_PROXY_PROVIDER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy provider:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.meveo.script.ListScalewayServersScript",
      "description" : "list scaleway servers",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.script;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.exception.BusinessApiException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport com.google.gson.*;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.SERVICE_PROVIDER;\r\nimport org.meveo.model.customEntities.SERVER;\r\nimport org.meveo.model.customEntities.CREDENTIAL;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\n\r\npublic class ListScalewayServersScript extends Script {\r\n\t\r\n    private static final Logger log = LoggerFactory.getLogger(ListScalewayServersScript.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n  \r\n    private SERVICE_PROVIDER getProvider(String code){\r\n      return crossStorageApi.find(defaultRepo, SERVICE_PROVIDER.class)\r\n    \t\t.by(\"CODE\", code)\r\n    \t\t.getResult();\r\n    }\r\n      \r\n    private CREDENTIAL getCredential(String domain){\r\n      List<CREDENTIAL> matchigCredentials = crossStorageApi.find(defaultRepo, CREDENTIAL.class)\r\n                .by(\"DOMAIN\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t  log.info(\"calling ListScalewayServersScript\");\r\n      SERVICE_PROVIDER scaleway=null;\r\n      try {\r\n        scaleway = getProvider(\"SCALEWAY\");\r\n      } catch(Exception e){\r\n        throw new BusinessException(e);\r\n      }\r\n      String domain=\"api.scaleway.com\";\r\n      CREDENTIAL credential  = getCredential(domain);\r\n      if(credential==null){\r\n        throw new BusinessException(\"No credential found for \"+domain);\r\n      } else {\r\n        log.info(\"using credential {} with username {}\",credential.getUuid(),credential.getUSERNAME());\r\n      }\r\n      ResteasyClientBuilder builder= new ResteasyClientBuilder();\r\n      Client client = builder.build();\r\n      WebTarget target = client.target(\"https://\"+domain+\"/instance/v1/zones/fr-par-1/servers\");\r\n      \r\n      Response response= target.request().header(credential.getHEADER_KEY(), credential.getHEADER_VALUE()).get();\r\n      String value = response.readEntity(String.class);\r\n      log.info(\"response  :\"+value);\r\n      log.debug(\"response status : {}\",response.getStatus());\r\n      \r\n      if (response.getStatus() < 300){\r\n          JsonArray rootArray = new JsonParser().parse(value).getAsJsonObject().getAsJsonArray(\"servers\");\r\n          //log.debug(\"rootArray: {}\",rootArray);\r\n          /*if(rootObject.get(\"servers\")!=JsonNull.INSTANCE){\r\n            Object servers = rootObject.get(\"servers\");\r\n            log.info(\"received servers:{}\",servers);\r\n          }*/\r\n          for(JsonElement element:rootArray){\r\n            JsonObject serverObj = element.getAsJsonObject();\r\n            SERVER server = new SERVER();\r\n            server.setUuid(serverObj.get(\"id\").getAsString());\r\n            server.setINSTANCE_NAME(serverObj.get(\"name\").getAsString());\r\n            server.setPROVIDER(scaleway);\r\n            log.info(\"server: {} provider:{}\",server.getUuid(),server.getPROVIDER().getUuid());\r\n            try {\r\n            \tcrossStorageApi.createOrUpdate(defaultRepo,server);\r\n            } catch(Exception ex){\r\n              log.error(\"error creating server {} :{}\",server.getUuid(),ex.getMessage());\r\n            }\r\n          }\r\n      }\r\n      response.close();\r\n\t}\r\n\t\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "ProxyLocalizationTest",
      "name" : "Localization test",
      "description" : "Localization test using a tier API",
      "customEntityCategoryCode" : "PROXY",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "active",
        "description" : "Active",
        "fieldType" : "BOOLEAN",
        "accountLevel" : "CE_ProxyLocalizationTest",
        "appliesTo" : "CE_ProxyLocalizationTest",
        "defaultValue" : "true",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Localization test:0;field:5",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "domain",
        "description" : "Domain",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ProxyLocalizationTest",
        "appliesTo" : "CE_ProxyLocalizationTest",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Localization test:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "proxy",
        "description" : "proxy",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_ProxyLocalizationTest",
        "appliesTo" : "CE_ProxyLocalizationTest",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - PROXY",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Localization test:0;field:6",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "entityClazzCetCode" : "PROXY",
        "matrixColumns" : [ ]
      }, {
        "code" : "queryEL",
        "description" : "query expression (use #{proxy.ip}) ",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ProxyLocalizationTest",
        "appliesTo" : "CE_ProxyLocalizationTest",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 1000,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Localization test:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "queryScriptCode",
        "description" : "script to execute, assume result param is boolean",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ProxyLocalizationTest",
        "appliesTo" : "CE_ProxyLocalizationTest",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 155,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Localization test:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "testIP",
        "description" : "IP to run unit test",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ProxyLocalizationTest",
        "appliesTo" : "CE_ProxyLocalizationTest",
        "defaultValue" : "45.95.118.95",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Localization test:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "testResult",
        "description" : "Unit test result",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ProxyLocalizationTest",
        "appliesTo" : "CE_ProxyLocalizationTest",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Localization test:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ {
        "code" : "testIp",
        "description" : "test localization of test Ip",
        "appliesTo" : "CE_ProxyLocalizationTest",
        "label" : "Test IP",
        "script" : "com.webdrone.proxy.test.UnitProxyLocalizationTestScript",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityInstanceDto",
    "dtoData" : {
      "code" : "SCALEWAY",
      "cetCode" : "SERVICE_PROVIDER",
      "disabled" : false,
      "customFields" : {
        "customField" : [ {
          "code" : "AUTH_HEADER",
          "stringValue" : "X-Auth-Token",
          "empty" : false
        }, {
          "code" : "TYPES",
          "mapValue" : {
            "DEV1-S" : {
              "dateValue" : null,
              "doubleValue" : null,
              "longValue" : null,
              "stringValue" : "x86_64 2c 2g 20g 2.99eur",
              "entityReferenceValue" : null,
              "childEntityValue" : null,
              "objectValue" : null,
              "empty" : false
            },
            "DEV1-M" : {
              "dateValue" : null,
              "doubleValue" : null,
              "longValue" : null,
              "stringValue" : "x86_64 3c 4g 40g 7.99eur",
              "entityReferenceValue" : null,
              "childEntityValue" : null,
              "objectValue" : null,
              "empty" : false
            }
          },
          "empty" : true
        }, {
          "code" : "CODE",
          "stringValue" : "SCALEWAY",
          "empty" : false
        }, {
          "code" : "STATUS",
          "empty" : true
        }, {
          "code" : "DESCRIPTION",
          "stringValue" : "Scaleway",
          "empty" : false
        }, {
          "code" : "IMAGES",
          "empty" : true
        }, {
          "code" : "ORGANIZATIONS",
          "mapValue" : {
            "7f0540a5-ca54-4484-9323-b60e080dfa51" : {
              "dateValue" : null,
              "doubleValue" : null,
              "longValue" : null,
              "stringValue" : "Manaty",
              "entityReferenceValue" : null,
              "childEntityValue" : null,
              "objectValue" : null,
              "empty" : false
            }
          },
          "empty" : true
        }, {
          "code" : "AUTH_VALUE_PREFIX",
          "empty" : true
        }, {
          "code" : "AUTH_VALUE_KEY",
          "stringValue" : "55303cf3-bc35-4e58-98d4-57ea8ade22e2",
          "empty" : false
        }, {
          "code" : "ZONES",
          "mapValue" : {
            "fr-par-1" : {
              "dateValue" : null,
              "doubleValue" : null,
              "longValue" : null,
              "stringValue" : "Paris",
              "entityReferenceValue" : null,
              "childEntityValue" : null,
              "objectValue" : null,
              "empty" : false
            }
          },
          "empty" : true
        } ],
        "inheritedCustomField" : [ ],
        "empty" : false
      }
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "SERVICE_PROVIDER",
      "name" : "Server provider",
      "description" : "Server provider",
      "customEntityCategoryCode" : "INFRA",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "AUTH_HEADER",
        "description" : "Authorization header name",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVICE_PROVIDER",
        "appliesTo" : "CE_SERVICE_PROVIDER",
        "defaultValue" : "Authorization",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Authorisation:1;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "AUTH_VALUE_KEY",
        "description" : "Authorization value key, like API Key, token",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVICE_PROVIDER",
        "appliesTo" : "CE_SERVICE_PROVIDER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 500,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Authorisation:1;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "AUTH_VALUE_PREFIX",
        "description" : "Authorization value prefix",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVICE_PROVIDER",
        "appliesTo" : "CE_SERVICE_PROVIDER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Authorisation:1;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "CODE",
        "description" : "Code",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVICE_PROVIDER",
        "appliesTo" : "CE_SERVICE_PROVIDER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Configuration:0;field:0",
        "identifier" : true,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "DESCRIPTION",
        "description" : "Description",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVICE_PROVIDER",
        "appliesTo" : "CE_SERVICE_PROVIDER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Configuration:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "IMAGES",
        "description" : "Images",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVICE_PROVIDER",
        "appliesTo" : "CE_SERVICE_PROVIDER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "MAP",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server Types:2;field:1",
        "identifier" : false,
        "mapKeyType" : "STRING",
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "ORGANIZATIONS",
        "description" : "Organizations",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVICE_PROVIDER",
        "appliesTo" : "CE_SERVICE_PROVIDER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "MAP",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Configuration:0;field:2",
        "identifier" : false,
        "mapKeyType" : "STRING",
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "STATUS",
        "description" : "Status",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVICE_PROVIDER",
        "appliesTo" : "CE_SERVICE_PROVIDER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "LIST",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Configuration:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "TYPES",
        "description" : "Types",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVICE_PROVIDER",
        "appliesTo" : "CE_SERVICE_PROVIDER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "MAP",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server Types:2;field:0",
        "identifier" : false,
        "mapKeyType" : "STRING",
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "ZONES",
        "description" : "Zones",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVICE_PROVIDER",
        "appliesTo" : "CE_SERVICE_PROVIDER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "MAP",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Configuration:0;field:3",
        "identifier" : false,
        "mapKeyType" : "STRING",
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ {
        "code" : "LIST_SERVER",
        "description" : "List servers",
        "appliesTo" : "CE_SERVICE_PROVIDER",
        "applicableOnEl" : "#{entity.getCfValuesAsValues().get(\"CODE\") eq 'SCALEWAY'}",
        "label" : "List Servers",
        "script" : "org.meveo.script.ListScalewayServersScript",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.EntityCustomActionDto",
    "dtoData" : {
      "code" : "listCount",
      "description" : "List proxy deployments",
      "appliesTo" : "CE_ApplicationInstance",
      "label" : "List proxy deployments",
      "script" : "com.webdrone.proxy.deployment.WebdroneApiV1",
      "applicableToEntityList" : false,
      "applicableToEntityInstance" : true
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "com.webdrone.proxy.test.ProxyTestScript",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package com.webdrone.proxy.test;\r\n\r\nimport java.util.Map;\r\nimport java.net.Inet4Address;\r\n\r\nimport java.net.InetAddress;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException\r\n;import org.apache.commons.net.util.SubnetUtils;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\n\r\npublic class ProxyTestScript extends Script {\r\n    private static final Logger log = LoggerFactory.getLogger(ProxyTestScript.class);\r\n\tpublic static boolean isIpReserved(InetAddress ip){\r\n        if (ip instanceof Inet4Address) {\r\n            String[] rangeIpToCheck = {\"10.0.0.0/8\",\"172.16.0.0/12\",\"192.168.0.0/16\", \"224.0.0.0/4\", \"240.0.0.0/4\", \"127.0.0.0/8\"};\r\n            for(String rangeIp : rangeIpToCheck){\r\n                if (new SubnetUtils(rangeIp).getInfo().isInRange(ip.getHostAddress()))\r\n                    return true;\r\n            }\r\n            return false;\r\n        } else {\r\n            // TODO tests ipv6\r\n            log.warn(\"cannot test of IPv6 {}\",ip);\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tsuper.execute(parameters);\r\n\t}\r\n\t\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "com.webdrone.proxy.provider.Buyproxies",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package com.webdrone.proxy.provider;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.StringReader;\r\nimport java.io.IOException;\r\nimport java.util.Map;\r\nimport java.time.Instant;\r\n\r\nimport com.webdrone.proxy.ProxyActionHandler;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport com.google.gson.*;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.meveo.model.customEntities.PROXY;\r\nimport org.meveo.model.customEntities.PROXY_GROUP;\r\nimport org.meveo.model.customEntities.PROXY_PROVIDER;\r\n\r\npublic class Buyproxies extends Script {\r\n\t\r\n    private static final Logger log = LoggerFactory.getLogger(Buyproxies.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tlog.info(\"calling Buyproxies\");\r\n\t\tCustomEntityInstance cei = (CustomEntityInstance)parameters.get(\"CONTEXT_ENTITY\");\r\n\t\tString pid=cei.getCfValues().getCfValue(\"code\").getStringValue();\r\n\t\tString proxyGroupUuid = cei.getUuid();\r\n\t\tPROXY_GROUP proxyGroup = null;\r\n\t\ttry {\r\n\t\t\tproxyGroup=crossStorageApi.find(defaultRepo, proxyGroupUuid, PROXY_GROUP.class);;\r\n\t\t} catch (EntityDoesNotExistsException e){\r\n\t\t\tlog.error(\"Cant load proxy group\");\r\n\t\t\te.printStackTrace();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tproxyGroup.setUuid(proxyGroupUuid);\r\n        PROXY_PROVIDER proxyProvider = (PROXY_PROVIDER) parameters.get(\"proxy_provider\");\r\n\t\tString tocken = proxyProvider.getToken();\r\n\t\tResteasyClientBuilder builder= new ResteasyClientBuilder();\r\n        Client client = builder.build();\r\n        WebTarget target = client.target(\"http://api.buyproxies.org/?a=showProxies&key=\"+tocken+\"&pid=\"+pid);\r\n\t\tResponse response= target.request().get();\r\n\t\tString value = response.readEntity(String.class);\r\n\t\tlog.info(\"response  :\"+value);\r\n\t\tlog.debug(\"response status : {}\",response.getStatus());\r\n\t\tString login=null,password=null;\r\n      \r\n      \tif (response.getStatus() < 300){\r\n\t\t\ttry (BufferedReader br = new BufferedReader(new StringReader(value))) {\r\n\t\t\t\t// CSV file delimiter\r\n\t\t\t\tString DELIMITER = \":\";\r\n\t\t\t\t// read the file line by line\r\n\t\t\t\tString line;\r\n\t\t\t\twhile ((line = br.readLine()) != null) {\r\n\t\t\t\t\t// convert line into columns\r\n\t\t\t\t\tString[] columns = line.split(DELIMITER);\r\n\t\t\t\t\tPROXY proxy = new PROXY();\r\n                    proxy.setCreationDate(Instant.now());\r\n                    proxy.setLastUpdate(Instant.now());\r\n            \t\tproxy.setUuid(columns[0]);\r\n\t\t\t\t\tproxy.setGroup(proxyGroup);\r\n\t\t\t\t\tproxy.setIp(columns[0]);\r\n\t\t\t\t\tproxy.setPort(Long.parseLong(columns[1]));\r\n\t\t\t\t\tlogin=columns[2];\r\n\t\t\t\t\tpassword=columns[3];\r\n\t\t\t\t\tproxy.setProvider(proxyProvider);\r\n            \t\tlog.info(\"proxy: {} provider:{}\",proxy.getUuid());\r\n            \t\ttry {\r\n            \t\t\tcrossStorageApi.createOrUpdate(defaultRepo,proxy);\r\n            \t\t} catch(Exception ex){\r\n              \t\t\tlog.error(\"error creating proxy {} :{}\",proxy.getUuid(),ex.getMessage());\r\n            \t\t}\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t} catch (IOException ex) {\r\n\t\t\t\tex.printStackTrace();\r\n\t\t\t}\r\n\t\t\tif(login!=null){\r\n\t\t\t\tproxyGroup.setUsername(login);\r\n\t\t\t\tproxyGroup.setPassword(password);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcrossStorageApi.createOrUpdate(defaultRepo,proxyGroup);\r\n\t\t\t\t} catch(Exception ex){\r\n\t\t\t\t\t  log.error(\"error updating proxygroup {} :{}\",proxyGroup.getUuid(),ex.getMessage());\r\n\t\t\t\t}\r\n\t\t\t}\r\n            \r\n          \r\n      }\r\n      response.close();\r\n\t}\r\n\t\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "proxyDomainCommand",
      "name" : "Domain command",
      "description" : "Add or remove an exluded proxy on a proxy group",
      "crudEventListenerScript" : "com.webdrone.proxy.proxyDomainCommandCRUDScript",
      "customEntityCategoryCode" : "PROXY",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "command",
        "description" : "Command",
        "fieldType" : "LIST",
        "accountLevel" : "CE_proxyDomainCommand",
        "appliesTo" : "CE_proxyDomainCommand",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : {
          "addExcludedDomain" : "Add Excluded domain",
          "removeExcludedDomain" : "Remove Excluded domain"
        },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy domain command:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "creationDate",
        "description" : "Date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_proxyDomainCommand",
        "appliesTo" : "CE_proxyDomainCommand",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : true,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : false,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy domain command:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "domains",
        "description" : "Domains",
        "fieldType" : "STRING",
        "accountLevel" : "CE_proxyDomainCommand",
        "appliesTo" : "CE_proxyDomainCommand",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "LIST",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : false,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy domain command:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "proxyGroup",
        "description" : "Proxy group",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_proxyDomainCommand",
        "appliesTo" : "CE_proxyDomainCommand",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - PROXY_GROUP",
        "listValues" : { },
        "allowEdit" : false,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy domain command:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "entityClazzCetCode" : "PROXY_GROUP",
        "matrixColumns" : [ ]
      } ],
      "actions" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "ApplicationInstance",
      "name" : "Apps",
      "description" : "Application instance",
      "customEntityCategoryCode" : "INFRA",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "application",
        "description" : "name of the application deployed",
        "fieldType" : "LIST",
        "accountLevel" : "CE_ApplicationInstance",
        "appliesTo" : "CE_ApplicationInstance",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : {
          "API_V1" : "API V1"
        },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Apps:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "domain",
        "description" : "url domain",
        "fieldType" : "STRING",
        "accountLevel" : "CE_ApplicationInstance",
        "appliesTo" : "CE_ApplicationInstance",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Apps:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "jsonContext",
        "description" : "Json context to call v1 API",
        "fieldType" : "LONG_TEXT",
        "accountLevel" : "CE_ApplicationInstance",
        "appliesTo" : "CE_ApplicationInstance",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Apps:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "port",
        "description" : "port",
        "fieldType" : "LONG",
        "accountLevel" : "CE_ApplicationInstance",
        "appliesTo" : "CE_ApplicationInstance",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Apps:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ {
        "code" : "listCount",
        "description" : "List proxy deployments",
        "appliesTo" : "CE_ApplicationInstance",
        "label" : "List proxy deployments",
        "script" : "com.webdrone.proxy.deployment.WebdroneApiV1",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "PROXY_DEPLOYMNT",
      "name" : "Deployment",
      "description" : "Proxy deployment on application instance",
      "customEntityCategoryCode" : "PROXY",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "active",
        "description" : "active",
        "fieldType" : "BOOLEAN",
        "accountLevel" : "CE_PROXY_DEPLOYMNT",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "defaultValue" : "false",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy Deployment:0;field:6",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "appInstance",
        "description" : "application instance",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_PROXY_DEPLOYMNT",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - ApplicationInstance",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy Deployment:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "entityClazzCetCode" : "ApplicationInstance",
        "matrixColumns" : [ ]
      }, {
        "code" : "available",
        "description" : "available",
        "fieldType" : "BOOLEAN",
        "accountLevel" : "CE_PROXY_DEPLOYMNT",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "defaultValue" : "false",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy Deployment:0;field:7",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "excludedDomains",
        "description" : "excluded domains",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY_DEPLOYMNT",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "LIST",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy Deployment:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "excludedRepos",
        "description" : "excluded repos",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY_DEPLOYMNT",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "LIST",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy Deployment:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "includedDomains",
        "description" : "included domains",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY_DEPLOYMNT",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "LIST",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy Deployment:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "includedRepos",
        "description" : "included repos",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY_DEPLOYMNT",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "LIST",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy Deployment:0;field:5",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "lastFailedDate",
        "description" : "last Failed",
        "fieldType" : "DATE",
        "accountLevel" : "CE_PROXY_DEPLOYMNT",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy Deployment:0;field:11",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "lastGeoLocTestDate",
        "description" : "Last geoloc test",
        "fieldType" : "DATE",
        "accountLevel" : "CE_PROXY_DEPLOYMNT",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy Deployment:0;field:10",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "lastSuccesDate",
        "description" : "last success",
        "fieldType" : "DATE",
        "accountLevel" : "CE_PROXY_DEPLOYMNT",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy Deployment:0;field:12",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "locationKo",
        "description" : "location ko",
        "fieldType" : "BOOLEAN",
        "accountLevel" : "CE_PROXY_DEPLOYMNT",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "defaultValue" : "false",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy Deployment:0;field:9",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "login",
        "description" : "login",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY_DEPLOYMNT",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy Deployment:0;field:13",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "password",
        "description" : "password",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY_DEPLOYMNT",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy Deployment:0;field:14",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "proxy",
        "description" : "proxy",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_PROXY_DEPLOYMNT",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - PROXY",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy Deployment:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "entityClazzCetCode" : "PROXY",
        "matrixColumns" : [ ]
      }, {
        "code" : "webZone",
        "description" : "Web zone",
        "fieldType" : "LIST",
        "accountLevel" : "CE_PROXY_DEPLOYMNT",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : {
          "DARK" : "Darknet",
          "WEB" : "Web"
        },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy Deployment:0;field:8",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ {
        "code" : "getDetail",
        "description" : "get detail from app",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "label" : "Get detail",
        "script" : "com.webdrone.proxy.deployment.WebdroneApiV1",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      }, {
        "code" : "sendToApp",
        "description" : "Send the proxy to the app",
        "appliesTo" : "CE_PROXY_DEPLOYMNT",
        "label" : "Deploy to App",
        "script" : "com.webdrone.proxy.deployment.WebdroneApiV1",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityInstanceDto",
    "dtoData" : {
      "code" : "23940bfe-7a6e-487b-843a-9cae760e2e7e",
      "cetCode" : "PROXY_PROVIDER",
      "disabled" : false,
      "customFields" : {
        "customField" : [ {
          "code" : "apiScriptCode",
          "stringValue" : "com.webdrone.proxy.provider.Buyproxies",
          "empty" : false
        }, {
          "code" : "domain",
          "stringValue" : "buyproxies.org",
          "empty" : false
        }, {
          "code" : "name",
          "stringValue" : "buyproxies",
          "empty" : false
        }, {
          "code" : "token",
          "stringValue" : "2892b15c0f33fc315b840b95ed5ec7c8",
          "empty" : false
        } ],
        "inheritedCustomField" : [ ],
        "empty" : false
      }
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityCategoryDto",
    "dtoData" : {
      "code" : "INFRA",
      "name" : "INFRA"
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityInstanceDto",
    "dtoData" : {
      "code" : "2e681256-e9fe-44dc-b9b9-392c4f247eb4",
      "cetCode" : "CREDENTIAL",
      "disabled" : false,
      "customFields" : {
        "customField" : [ {
          "code" : "CREDIT",
          "empty" : true
        }, {
          "code" : "DOMAIN",
          "stringValue" : "api.scaleway.com",
          "empty" : false
        }, {
          "code" : "LAST_CONNECTION",
          "empty" : true
        }, {
          "code" : "TOKEN_EXPIRY",
          "empty" : true
        }, {
          "code" : "AUTHENTICATION_TYPE",
          "stringValue" : "HEADER",
          "empty" : false
        }, {
          "code" : "PRIVATE_KEY",
          "empty" : true
        }, {
          "code" : "PUBLIC_KEY",
          "empty" : true
        }, {
          "code" : "HEADER_VALUE",
          "empty" : true
        }, {
          "code" : "REFRESH_TOKEN",
          "empty" : true
        }, {
          "code" : "HEADER_KEY",
          "stringValue" : "X-API-KEY",
          "empty" : false
        }, {
          "code" : "STATUS",
          "stringValue" : "ACTIVE",
          "empty" : false
        }, {
          "code" : "PASSWORD",
          "empty" : true
        }, {
          "code" : "USERNAME",
          "stringValue" : "manaty",
          "empty" : false
        }, {
          "code" : "TOKEN",
          "stringValue" : "55303cf3-bc35-4e58-98d4-57ea8ade22e2",
          "empty" : false
        } ],
        "inheritedCustomField" : [ ],
        "empty" : false
      }
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.EntityCustomActionDto",
    "dtoData" : {
      "code" : "DeployToApp",
      "description" : "Deploy to application instance",
      "appliesTo" : "CE_PROXY_GROUP",
      "applicableOnEl" : "#{(entity != null)}",
      "label" : "Deploy to App",
      "script" : "com.webdrone.proxy.deployment.WebdroneApiV1",
      "applicableToEntityList" : false,
      "applicableToEntityInstance" : true
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "SERVER",
      "name" : "Server",
      "description" : "Server ",
      "crudEventListenerScript" : "org.meveo.script.ScalewayServerCreationScript",
      "customEntityCategoryCode" : "INFRA",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "CREATION_DATE",
        "description" : "Creation date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_SERVER",
        "appliesTo" : "CE_SERVER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:6",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "IMAGE",
        "description" : "Image",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVER",
        "appliesTo" : "CE_SERVER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "INSTANCE_NAME",
        "description" : "Instance name",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVER",
        "appliesTo" : "CE_SERVER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "LAST_UPDATE",
        "description" : "Last update",
        "fieldType" : "DATE",
        "accountLevel" : "CE_SERVER",
        "appliesTo" : "CE_SERVER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:7",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "ORGANIZATION",
        "description" : "Organization",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVER",
        "appliesTo" : "CE_SERVER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "PROVIDER",
        "description" : "Server provider",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_SERVER",
        "appliesTo" : "CE_SERVER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - SERVICE_PROVIDER",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "entityClazzCetCode" : "SERVICE_PROVIDER",
        "matrixColumns" : [ ]
      }, {
        "code" : "STATUS",
        "description" : "Status",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVER",
        "appliesTo" : "CE_SERVER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:8",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "TYPE",
        "description" : "Type",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVER",
        "appliesTo" : "CE_SERVER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "ZONE",
        "description" : "Zone",
        "fieldType" : "STRING",
        "accountLevel" : "CE_SERVER",
        "appliesTo" : "CE_SERVER",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Server:0;field:5",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "com.webdrone.proxy.ProxyActionHandler",
      "description" : "Scirpt handing all actions that can be executed on proxy, proxy provider or proxy group",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package com.webdrone.proxy;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n//import javax.inject.Inject;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.script.ScriptInstanceService;\r\nimport org.meveo.service.script.ScriptInterface;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.customEntities.PROXY_PROVIDER;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\n\r\npublic class ProxyActionHandler extends Script {\r\n\t\r\n    private static final Logger log = LoggerFactory.getLogger(ProxyActionHandler.class);\r\n    \r\n    private ScriptInstanceService scriptInstanceService= getCDIBean(ScriptInstanceService.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\t//@Inject\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n\t\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tlog.info(\"calling ProxyActionHandler\");\r\n        String actionCode = (String)parameters.get(\"CONTEXT_ACTION\");\r\n        String output=\"\";\r\n\t\tif(parameters.containsKey(\"CONTEXT_ENTITY\")){\r\n\t\t\t//action called on a specific custom entity instance\r\n\t\t\tCustomEntityInstance cei = (CustomEntityInstance)parameters.get(\"CONTEXT_ENTITY\");\r\n\t\t\tMap<String,Object> cftMap=cei.getCfValuesAsValues();\r\n\t\t\tlog.info(\"proxyProvider=\"+cftMap.get(\"provider\"));\r\n\t\t\tString proxyProviderUuid = ((CustomEntityInstance)cftMap.get(\"provider\")).getUuid();\r\n\t\t\tlog.info(\"proxyProviderUuid=\"+proxyProviderUuid);\r\n\t\t\ttry {\r\n\t\t\t\tPROXY_PROVIDER proxyProvider = crossStorageApi.find(defaultRepo, proxyProviderUuid, PROXY_PROVIDER.class);\r\n\t\t\t\ttry{\r\n\t\t\t\t\tScriptInterface apiScript = scriptInstanceService.getScriptInterface(proxyProvider.getApiScriptCode());\r\n\t\t\t\t    parameters.put(\"proxy_provider\",proxyProvider);\r\n\t\t\t\t    apiScript.execute(parameters);\r\n                } catch (Exception ex){\r\n                    output+=\"Cant find proxy provider script,\";\r\n                    ex.printStackTrace();\r\n                }\r\n\t\t\t} catch (EntityDoesNotExistsException e){\r\n\t\t\t\toutput+=\"Cant load proxy provider,\";\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t//action called on a list of custom entity instances\r\n\t\t}\r\n        output+=\" action:\"+actionCode;\r\n\t\tlog.info(\"output:\"+output);\r\n        parameters.put(\"RESULT_GUI_MESSAGE\",output);\r\n\t}\r\n\r\n\tvoid listProxyGroups(){\r\n\r\n\t}\r\n\t\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.EntityCustomActionDto",
    "dtoData" : {
      "code" : "getDetail",
      "description" : "get detail from app",
      "appliesTo" : "CE_PROXY_DEPLOYMNT",
      "label" : "Get detail",
      "script" : "com.webdrone.proxy.deployment.WebdroneApiV1",
      "applicableToEntityList" : false,
      "applicableToEntityInstance" : true
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "com.webdrone.proxy.test.UnitProxyLocalizationTestScript",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package com.webdrone.proxy.test;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport org.meveo.service.script.Script;\nimport org.meveo.admin.exception.BusinessException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport fr.webdrone.analyzers.HTTPCallAnalyzer;\nimport fr.webdrone.connectors.HTTPCall;\nimport fr.webdrone.connectors.HTTPCall.HTTPMethod;\nimport fr.webdrone.exceptions.CrawlException;\nimport fr.webdrone.model.virtualagent.Proxy;\nimport fr.webdrone.variables.ExecutionContext;\nimport fr.webdrone.variables.NodeContext;\n\nimport org.meveo.persistence.CrossStorageService;\nimport org.meveo.api.persistence.CrossStorageApi;\nimport org.meveo.api.persistence.CrossStorageRequest;\nimport org.meveo.service.storage.RepositoryService;\nimport org.meveo.model.storage.Repository;\nimport org.meveo.model.customEntities.ProxyLocalizationTest;\nimport org.meveo.model.customEntities.CustomEntityInstance;\nimport org.meveo.model.customEntities.PROXY;\nimport org.meveo.model.persistence.CEIUtils;\nimport org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;\nimport javax.ws.rs.client.*;\nimport javax.ws.rs.core.*;\n\npublic class UnitProxyLocalizationTestScript extends Script {\n  \n    private static final Logger log = LoggerFactory.getLogger(UnitProxyLocalizationTestScript.class);\n    \n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\n    private CrossStorageService crossStorageService = getCDIBean(CrossStorageService.class);\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\n    \n\n\t@Override\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\n\t\tlog.info(\"calling ProxyActionHandler\");\n        String actionCode = (String)parameters.get(\"CONTEXT_ACTION\");\n        String output=\"\";\n\t\tif(parameters.containsKey(\"CONTEXT_ENTITY\")){\n\t\t\t//action called on a specific custom entity instance\n\t\t\tCustomEntityInstance cei = (CustomEntityInstance)parameters.get(\"CONTEXT_ENTITY\");\n\t\t\tMap<String,Object> cftMap=cei.getCfValuesAsValues();\n            String testIp = (String)cftMap.get(\"testIP\");\n            int testPort = -1;\n            PROXY proxy = crossStorageApi.find(defaultRepo, PROXY.class)\n                .by(\"uuid\", ((CustomEntityInstance)cftMap.get(\"proxy\")).getUuid()).fetch(\"group\").getResult();\n            log.info(\"testIp={}, proxy={}\",testIp,proxy);\n            String queryEL = (String) cftMap.get(\"queryEL\");\n            String result = executeProxyRequest(testIp,proxy,queryEL);\n            cei.getCfValues().setValue(\"testResult\",result);\n            try {\n            \tcrossStorageService.createOrUpdate(defaultRepo,cei);\n            } catch(Exception e){\n              e.printStackTrace();\n            }\n            parameters.put(\"RESULT_GUI_MESSAGE\", \"test result:\"+result);\n        }\n    }\n\n    public static String executeProxyRequest(String ip,PROXY proxy, String queryEL){\n        String result=\"\";\n        String query = queryEL.replaceAll(\"#\\\\{proxy.ip\\\\}\", ip);\n        log.info(\"query : {}\",query);\n        HTTPCall call = new HTTPCall();\n        call.setMethod(HTTPMethod.GET);\n        call.setUrl(query);\n        if(proxy!=null){\n            Proxy ceProxy = new Proxy();\n            ceProxy.setIp(proxy.getIp());\n            ceProxy.setPort(\"\"+proxy.getPort());\n            ceProxy.setLogin(proxy.getGroup().getUsername());\n            ceProxy.setPassword(proxy.getGroup().getPassword());\n            call.setProxy(ceProxy);\n        }\n        HTTPCallAnalyzer analyzer = new HTTPCallAnalyzer();\n        ExecutionContext executionContext =new ExecutionContext();\n        call.setResponseVariableName(\"response\");\n        call.setAcceptedResponseCodes(List.of(200,201,202,203,204,205,206));\n        try {\n            NodeContext nodeContext = analyzer.execute(call, executionContext, new NodeContext());\n            result= \"\"+executionContext.get(\"response\");\n        } catch (Exception ce){\n            result = \"error \"+ce.getMessage();\n        }\n        return result;\n    }\n\n}\n",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ {
        "groupId" : "fr.webdrone",
        "artifactId" : "crawler-engine",
        "version" : "2.0.9",
        "coordinates" : "fr.webdrone:crawler-engine:2.0.9"
      } ],
      "importScriptInstances" : [ ]
    }
  },{
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "com.webdrone.geolite.GeoliteScript",
      "inputs" : [ ],
      "outputs" : [ {
        "name" : "geoLiteCountryDatabase",
        "type" : "GeoLiteReader",
        "description" : null
      }, {
        "name" : "geoLiteCityDatabase",
        "type" : "GeoLiteReader",
        "description" : null
      }, {
        "name" : "geoLiteISPDatabase",
        "type" : "GeoLiteReader",
        "description" : null
      }, {
        "name" : "geoliteDatabaseInputStream",
        "type" : "InputStream",
        "description" : null
      } ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package com.webdrone.geolite;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport java.io.IOException;\r\nimport java.net.InetAddress;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.node.JsonNodeFactory;\r\nimport com.fasterxml.jackson.databind.node.ObjectNode;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.Date;\r\nimport java.util.Properties;\r\n\r\nimport org.apache.commons.io.FileUtils;\r\nimport com.maxmind.db.MaxMindDbConstructor;\r\nimport com.maxmind.db.MaxMindDbParameter;\r\nimport com.maxmind.db.Reader;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.commons.utils.ParamBean;\r\nimport org.meveo.commons.utils.ParamBeanFactory;\r\n\r\n\r\npublic class GeoliteScript extends Script {\r\n\t\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tsuper.execute(parameters);\r\n\t}\r\n\r\n    public static final String GEOLITE_DATABASE_FILE = \"geolite/GeoLite2-Country.mmdb\";\r\n    public static final String GEOLITE_DATABASE_ARCHIVE_FILE = \"geolite/GeoLite2-Country.mmdb.tar.gz\";\r\n    public static final String GEOLITE_CHECKSUM_FILE = \"geolite/GeoLite2-Country.tar.gz.md5\";\r\n    public static final String GEOLITE_CITY_DATABASE_FILE = \"geolite/GeoLite2-City.mmdb\";\r\n    public static final String GEOLITE_CITY_DATABASE_ARCHIVE_FILE = \"geolite/GeoLite2-City.mmdb.tar.gz\";\r\n    public static final String GEOLITE_CITY_CHECKSUM_FILE = \"geolite/GeoLite2-City.tar.gz.md5\";\r\n    public static final String GEOLITE_ISP_DATABASE_FILE = \"geolite/GeoIP2-ISP.mmdb\";\r\n    public static final String GEOLITE_ISP_DATABASE_ARCHIVE_FILE = \"geolite/GeoIP2-ISP.mmdb.tar.gz\";\r\n    public static final String GEOLITE_ISP_CHECKSUM_FILE = \"geolite/GeoIP2-ISP.tar.gz.md5\";\r\n\r\n    private static GeoLiteReader geoLiteCountryReader;\r\n    private static GeoLiteReader geoLiteCityReader;\r\n    private static GeoLiteReader geoLiteISPReader;\r\n\r\n    private static Properties SYST_PROPS = System.getProperties();\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(GeoliteScript.class);\r\n  \r\n\tprivate ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\r\n\tprivate ParamBean config = paramBeanFactory.getInstance();\r\n    private String rootPath = config.getChrootDir(\"default\");\r\n  \r\n      public static class LookupResult {\r\n        private final Country country;\r\n\r\n        @MaxMindDbConstructor\r\n        public LookupResult (\r\n            @MaxMindDbParameter(name=\"country\") Country country\r\n        ) {\r\n            this.country = country;\r\n        }\r\n\r\n        public Country getCountry() {\r\n            return this.country;\r\n        }\r\n    }\r\n\r\n    public static class Country {\r\n        private final String isoCode;\r\n\r\n        @MaxMindDbConstructor\r\n        public Country (\r\n            @MaxMindDbParameter(name=\"iso_code\") String isoCode\r\n        ) {\r\n            this.isoCode = isoCode;\r\n        }\r\n\r\n        public String getIsoCode() {\r\n            return this.isoCode;\r\n        }\r\n    }\r\n  \r\n    public class GeoLiteReader {\r\n      private Reader reader;\r\n      public GeoLiteReader(Reader reader){\r\n          this.reader = reader;\r\n      }\r\n      public String get(InetAddress ipAddress) throws IOException{\r\n          LookupResult result = reader.get(ipAddress,LookupResult.class);\r\n          return result.getCountry().getIsoCode();\r\n          /*JsonNode jsonNode = reader.get(ipAddress,JsonNode.class);\r\n          if(jsonNode !=null){\r\n              JsonNode country = jsonNode.get(\"country\");\r\n              if(country!=null){\r\n                  String countryCode = country.get(\"iso_code\").asText();\r\n                  if(countryCode.equals(\"HK\")){\r\n                      ObjectNode countryNames = JsonNodeFactory.instance.objectNode();\r\n                      countryNames.put(\"en\", \"China\");\r\n                      countryNames.put(\"fr\", \"Chine\");\r\n                      countryNames.put(\"de\", \"China\");\r\n                      countryNames.put(\"ru\", \"Китай\");\r\n                      countryNames.put(\"ja\", \"中国\");\r\n                      countryNames.put(\"es\", \"China\");\r\n                      countryNames.put(\"zh-CN\", \"中国\");\r\n                      countryNames.put(\"pt-BR\", \"China\");\r\n                      ObjectNode countryNode = JsonNodeFactory.instance.objectNode();\r\n                      countryNode.put(\"iso_code\",\"CN\");\r\n                      countryNode.put(\"geoname_id\",1814991);\r\n                      countryNode.set(\"names\", countryNames);\r\n                      ObjectNode node = JsonNodeFactory.instance.objectNode();\r\n                      node.set(\"continent\", jsonNode.get(\"continent\"));\r\n                      node.set(\"country\", countryNode);\r\n                      node.set(\"registered_country\", countryNode);\r\n                      jsonNode = node;\r\n                      LOGGER.warn(\"Country HK override\");\r\n                  }\r\n              }\r\n          }\r\n          return jsonNode;*/\r\n    }\r\n\r\n    public void close() throws IOException {\r\n        if(this.reader!=null){\r\n            this.reader.close();\r\n        }\r\n    }\r\n  }\r\n\r\n\r\n    public  GeoLiteReader getGeoLiteCountryDatabase() throws IOException {\r\n        if (geoLiteCountryReader == null) {\r\n            File database = new File(rootPath + GEOLITE_DATABASE_FILE);\r\n            //DatabaseReader reader = new DatabaseReader.Builder(database).build();\r\n            InputStream databaseStream = FileUtils.openInputStream(database);\r\n            Reader reader = new Reader(databaseStream);\r\n            geoLiteCountryReader = new GeoLiteReader(reader);\r\n            checkBddBuilDate(reader, GeoliteScript.GEOLITE_CHECKSUM_FILE);\r\n        }\r\n        return geoLiteCountryReader;\r\n    }\r\n\r\n    public  GeoLiteReader getGeoLiteCityDatabase() throws IOException {\r\n        if (geoLiteCityReader == null) {\r\n            File database = new File(rootPath + GEOLITE_CITY_DATABASE_FILE);\r\n            //DatabaseReader reader = new DatabaseReader.Builder(database).build();\r\n            InputStream databaseStream = FileUtils.openInputStream(database);\r\n            Reader reader = new Reader(databaseStream);\r\n            geoLiteCityReader = new GeoLiteReader(reader);\r\n            checkBddBuilDate(reader, GeoliteScript.GEOLITE_CITY_CHECKSUM_FILE);\r\n        }\r\n        return geoLiteCityReader;\r\n    }\r\n\r\n    public GeoLiteReader getGeoLiteISPDatabase() throws IOException {\r\n        if (geoLiteISPReader == null) {\r\n            File database = new File(rootPath + GEOLITE_ISP_DATABASE_FILE);\r\n            //DatabaseReader reader = new DatabaseReader.Builder(database).build();\r\n            InputStream databaseStream = FileUtils.openInputStream(database);\r\n            Reader reader = new Reader(databaseStream);\r\n            geoLiteISPReader = new GeoLiteReader(reader);\r\n            checkBddBuilDate(reader, GeoliteScript.GEOLITE_ISP_CHECKSUM_FILE);\r\n        }\r\n        return geoLiteISPReader;\r\n    }\r\n\r\n    protected void checkBddBuilDate(Reader reader, String checkSumFile) {\r\n        Date geoLiteBddBuildDate = reader.getMetadata().getBuildDate();\r\n        if ((System.currentTimeMillis() - geoLiteBddBuildDate.getTime()) > (31l /* <= nb jours*/ *24*3600*1000)) {\r\n            LOGGER.error(\"Geolite BDD is not up to date :\" + geoLiteBddBuildDate + \". Program will remove checksumfile to force download\");\r\n            LOGGER.info(\"Geolite BDD should be updated each month\");\r\n            try {\r\n                FileUtils.forceDelete(new File(rootPath + checkSumFile));\r\n            } catch (FileNotFoundException e) {\r\n                //ignored\r\n            } catch (Exception e) {\r\n                LOGGER.error(e.getMessage(),e);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void invalidateCountryReader() {\r\n        if(geoLiteCountryReader!=null){\r\n            try {\r\n                geoLiteCountryReader.close();\r\n            } catch (IOException e) {\r\n                LOGGER.error(\" geoLiteCountryReader close failed \",e);\r\n            }\r\n        }\r\n        geoLiteCountryReader = null;\r\n    }\r\n\r\n    public static void invalidateCityReader() {\r\n        if(geoLiteCityReader!=null){\r\n            try {\r\n                geoLiteCityReader.close();\r\n            } catch (IOException e) {\r\n                LOGGER.error(\" geoLiteCityReader close failed \",e);\r\n            }\r\n        }\r\n        geoLiteCityReader = null;\r\n    }\r\n\r\n    public static void invalidateISPReader() {\r\n        if(geoLiteISPReader!=null){\r\n            try {\r\n                geoLiteISPReader.close();\r\n            } catch (IOException e) {\r\n                LOGGER.error(\" geoLiteISPReader close failed \",e);\r\n            }\r\n        }\r\n        geoLiteISPReader = null;\r\n    }\r\n\r\n    public InputStream getGeoliteDatabaseInputStream() throws IOException{\r\n        File database = new File(rootPath + GEOLITE_DATABASE_FILE);\r\n        InputStream databaseStream = new FileInputStream(database);\r\n        return databaseStream;\r\n    }\r\n\r\n    public static void invalidate(String databaseFile) {\r\n        if (GEOLITE_DATABASE_FILE.equals(databaseFile))\r\n            invalidateCountryReader();\r\n        else if (GEOLITE_CITY_DATABASE_FILE.equals(databaseFile))\r\n            invalidateCityReader();\r\n        else\r\n            invalidateISPReader();\r\n    }\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ {
        "groupId" : "com.maxmind.db",
        "artifactId" : "maxmind-db",
        "version" : "2.0.0",
        "coordinates" : "com.maxmind.db:maxmind-db:2.0.0"
      } ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.EntityCustomActionDto",
    "dtoData" : {
      "code" : "listProxy",
      "description" : "List proxies of a group",
      "appliesTo" : "CE_PROXY_GROUP",
      "label" : "List proxies",
      "script" : "com.webdrone.proxy.ProxyActionHandler",
      "applicableToEntityList" : false,
      "applicableToEntityInstance" : true
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "com.webdrone.proxy.test.ProxyLocalizationTestScript",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package com.webdrone.proxy.test;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.net.Inet4Address;\r\n\r\nimport java.net.InetAddress;\r\nimport java.time.Instant;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.model.customEntities.ProxyLocalizationTest;\r\nimport org.apache.commons.net.util.SubnetUtils;\r\nimport org.meveo.model.customEntities.PROXY;\r\nimport org.meveo.model.customEntities.PROXY_GROUP;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.api.persistence.CrossStorageRequest;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.webdrone.geolite.GeoliteScript;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport com.webdrone.proxy.test.UnitProxyLocalizationTestScript;\r\n\r\n\r\npublic class ProxyLocalizationTestScript extends Script {\r\n    private static final Logger log = LoggerFactory.getLogger(ProxyLocalizationTestScript.class);\r\n  \r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n    private GeoliteScript geoliteScript = new GeoliteScript();\r\n  \r\n\tpublic boolean isIpReserved(InetAddress ip){\r\n        if (ip instanceof Inet4Address) {\r\n            String[] rangeIpToCheck = {\"10.0.0.0/8\",\"172.16.0.0/12\",\"192.168.0.0/16\", \"224.0.0.0/4\", \"240.0.0.0/4\", \"127.0.0.0/8\"};\r\n            for(String rangeIp : rangeIpToCheck){\r\n                if (new SubnetUtils(rangeIp).getInfo().isInRange(ip.getHostAddress()))\r\n                    return true;\r\n            }\r\n            return false;\r\n        } else {\r\n            // TODO tests ipv6\r\n            log.warn(\"cannot test of IPv6 {}\",ip);\r\n            return false;\r\n        }\r\n    }\r\n\r\n  \r\n    public String testProxyGroup(String proxyGroupUuid) throws BusinessException{\r\n      String output=\"\";\r\n      PROXY_GROUP proxyGroup=null;\r\n             \ttry{  \r\n                \tproxyGroup = crossStorageApi.find(defaultRepo, proxyGroupUuid, PROXY_GROUP.class);\r\n            \t} catch(EntityDoesNotExistsException e){\r\n                \tlog.error(\"cannot find proxy group with uuid {}\",proxyGroupUuid);\r\n                \tthrow new BusinessException(\"cannot persist proxyDeployment :\"+e.getMessage());\r\n            \t}\r\n                String location = proxyGroup.getLocation();\r\n                if(location==null){\r\n                    return \"\";\r\n                }\r\n                CrossStorageRequest<PROXY> csRequest = crossStorageApi.find(defaultRepo,PROXY.class);\r\n                csRequest.by(\"group\",proxyGroupUuid);\r\n                List<PROXY> proxies = csRequest.getResults();\r\n                int count = proxies.size();\r\n                int success= 0;\r\n                log.info(\"test {} proxies, proxyGroup:{}\",count,proxyGroup);\r\n                for(PROXY proxy:proxies){\r\n                    try {\r\n                        String error = isLocalizationOK(proxy,location);\r\n                        if(error == null){\r\n                            success++;\r\n                            proxy.setTestLog(error);\r\n                            proxy.setLastUpdate(Instant.now());\r\n                            crossStorageApi.createOrUpdate(defaultRepo,proxy);  \r\n                        } else {\r\n                            proxy.setTestLog(error);\r\n                            proxy.setLastUpdate(Instant.now());\r\n                            proxy.setStatus(\"INACTIVE\");\r\n                            crossStorageApi.createOrUpdate(defaultRepo,proxy);  \r\n                            output+=proxy.getIp()+\" error:\"+ error +\"\\n\";\r\n                        }\r\n                    } catch (Exception e){\r\n                        e.printStackTrace();\r\n                        log.error(\"failed testing proxy \"+proxy.getUuid());\r\n                    }\r\n                }\r\n                output+=\" tested \"+success+\" proxies / \"+count;\r\n                proxyGroup.setLastTest(Instant.now());\r\n                try{\r\n                    crossStorageApi.createOrUpdate(defaultRepo,proxyGroup);    \r\n                } catch (Exception e){\r\n                    e.printStackTrace();\r\n                    log.error(\"cannot persist proxyGroup\");\r\n                    throw new BusinessException(\"cannot persist proxyGroup :\"+e.getMessage());\r\n                }\r\n      return output;\r\n    }\r\n\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n        log.info(\"execute ProxyLocalizationTestScript\");\r\n\t\tsuper.execute(parameters);\r\n\t    String actionCode = (String)parameters.get(\"CONTEXT_ACTION\");\r\n        String output=\"\";\r\n\t\tif(parameters.containsKey(\"CONTEXT_ENTITY\")){\r\n\t\t\t//action called on a specific custom entity instance\r\n\t\t\tCustomEntityInstance cei = (CustomEntityInstance)parameters.get(\"CONTEXT_ENTITY\");\r\n\t\t\tMap<String,Object> cftMap=cei.getCfValuesAsValues();\r\n           if(\"testLocalization\".equals(actionCode)){//apply to PROXY_GROUP\r\n                log.info(\"test Proxy localization on group\");\r\n             \toutput+=testProxyGroup(cei.getUuid());\r\n            }\r\n\t\t} else {\r\n\t\t\t//action called on a list of custom entity instances or from job\r\n            CrossStorageRequest<PROXY_GROUP> csRequest = crossStorageApi.find(defaultRepo,PROXY_GROUP.class);\r\n            List<PROXY_GROUP> proxyGroups = csRequest.getResults();\r\n            log.info(\"test Proxy localization on {} groups\",proxyGroups.size());\r\n            for(PROXY_GROUP proxyGroup:proxyGroups){\r\n                output+=testProxyGroup(proxyGroup.getUuid())+\"\\n\";\r\n            }\r\n\t\t}\r\n        output+=\" action:\"+actionCode;\r\n\t\tlog.info(\"output:\"+output);\r\n        parameters.put(\"RESULT_GUI_MESSAGE\",output);\r\n    }\r\n  \r\n      public String isLocalizationOK(PROXY proxy,String location) {\r\n          if(proxy.getIp()!=null && proxy.getIp().matches(\"[a-zA-Z]+\")){\r\n            return null;\r\n          }\r\n          int nbErrors = 0;\r\n          int nbSuccess = 0;\r\n          String result = \"\";\r\n        // TEST GEOLITE\r\n        String countryCode;\r\n        try {\r\n            InetAddress address = InetAddress.getByName(proxy.getIp());\r\n            if(isIpReserved(address)){\r\n                log.warn(\"No localisation return because ip adress: \"+ proxy.getIp() +\" is reserved Ip\");\r\n                return null;\r\n            }\r\n\r\n            GeoliteScript.GeoLiteReader reader = geoliteScript.getGeoLiteCountryDatabase();\r\n            countryCode = reader.get(address);\r\n\r\n            if(countryCode == null){\r\n                result+= proxy.getIp()+\" Country code not found on geolite for : \" + address.toString()+\"\\n\";\r\n            }else{\r\n                //JsonNode country = response.get(\"country\");\r\n                if(location.equalsIgnoreCase(countryCode)){\r\n                    nbSuccess++;\r\n                } else {\r\n                    nbErrors++;\r\n                    result+= \"country code mismatch. Found by geolite : \" + countryCode + \" expected : \" + location+\"\\n\";\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(proxy.getIp() + \" \" + e.getMessage(), e);\r\n            result+=\"error invoking geolite db:\"+e.getMessage();\r\n        }\r\n        List<ProxyLocalizationTest> tests = crossStorageApi.find(defaultRepo, ProxyLocalizationTest.class)\r\n            .by(\"active\", Boolean.TRUE) // Optional\r\n            .getResults();\r\n\r\n        for(ProxyLocalizationTest proxyLocTest :tests){\r\n            if(proxyLocTest.getQueryEL()!=null){\r\n                String loc = UnitProxyLocalizationTestScript.executeProxyRequest(proxy.getIp(),proxy, proxyLocTest.getQueryEL());\r\n                if(loc.equalsIgnoreCase(location)){\r\n                    nbSuccess++;\r\n                } else {\r\n                    nbErrors++;\r\n                    result+=\"error invoking \"+proxyLocTest.getDomain()+\" found location \"+loc+\"\\n\";\r\n                }\r\n            }\r\n        }\r\n        \r\n        if(nbSuccess>0 && nbErrors<=2){\r\n            result=null;\r\n        }\r\n        return result;\r\n      }\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ {
        "active" : true,
        "code" : "com.webdrone.proxy.test.UnitProxyLocalizationTestScript",
        "inputs" : [ ],
        "outputs" : [ ],
        "generateOutputs" : false,
        "type" : "JAVA",
        "transactionType" : "SAME",
        "script" : "package com.webdrone.proxy.test;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport org.meveo.service.script.Script;\nimport org.meveo.admin.exception.BusinessException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport fr.webdrone.analyzers.HTTPCallAnalyzer;\nimport fr.webdrone.connectors.HTTPCall;\nimport fr.webdrone.connectors.HTTPCall.HTTPMethod;\nimport fr.webdrone.exceptions.CrawlException;\nimport fr.webdrone.model.virtualagent.Proxy;\nimport fr.webdrone.variables.ExecutionContext;\nimport fr.webdrone.variables.NodeContext;\n\nimport org.meveo.persistence.CrossStorageService;\nimport org.meveo.api.persistence.CrossStorageApi;\nimport org.meveo.api.persistence.CrossStorageRequest;\nimport org.meveo.service.storage.RepositoryService;\nimport org.meveo.model.storage.Repository;\nimport org.meveo.model.customEntities.ProxyLocalizationTest;\nimport org.meveo.model.customEntities.CustomEntityInstance;\nimport org.meveo.model.customEntities.PROXY;\nimport org.meveo.model.persistence.CEIUtils;\nimport org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;\nimport javax.ws.rs.client.*;\nimport javax.ws.rs.core.*;\n\npublic class UnitProxyLocalizationTestScript extends Script {\n  \n    private static final Logger log = LoggerFactory.getLogger(UnitProxyLocalizationTestScript.class);\n    \n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\n    private CrossStorageService crossStorageService = getCDIBean(CrossStorageService.class);\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\n    \n\n\t@Override\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\n\t\tlog.info(\"calling ProxyActionHandler\");\n        String actionCode = (String)parameters.get(\"CONTEXT_ACTION\");\n        String output=\"\";\n\t\tif(parameters.containsKey(\"CONTEXT_ENTITY\")){\n\t\t\t//action called on a specific custom entity instance\n\t\t\tCustomEntityInstance cei = (CustomEntityInstance)parameters.get(\"CONTEXT_ENTITY\");\n\t\t\tMap<String,Object> cftMap=cei.getCfValuesAsValues();\n            String testIp = (String)cftMap.get(\"testIP\");\n            int testPort = -1;\n            PROXY proxy = crossStorageApi.find(defaultRepo, PROXY.class)\n                .by(\"uuid\", ((CustomEntityInstance)cftMap.get(\"proxy\")).getUuid()).fetch(\"group\").getResult();\n            log.info(\"testIp={}, proxy={}\",testIp,proxy);\n            String queryEL = (String) cftMap.get(\"queryEL\");\n            String result = executeProxyRequest(testIp,proxy,queryEL);\n            cei.getCfValues().setValue(\"testResult\",result);\n            try {\n            \tcrossStorageService.createOrUpdate(defaultRepo,cei);\n            } catch(Exception e){\n              e.printStackTrace();\n            }\n            parameters.put(\"RESULT_GUI_MESSAGE\", \"test result:\"+result);\n        }\n    }\n\n    public static String executeProxyRequest(String ip,PROXY proxy, String queryEL){\n        String result=\"\";\n        String query = queryEL.replaceAll(\"#\\\\{proxy.ip\\\\}\", ip);\n        log.info(\"query : {}\",query);\n        HTTPCall call = new HTTPCall();\n        call.setMethod(HTTPMethod.GET);\n        call.setUrl(query);\n        if(proxy!=null){\n            Proxy ceProxy = new Proxy();\n            ceProxy.setIp(proxy.getIp());\n            ceProxy.setPort(\"\"+proxy.getPort());\n            ceProxy.setLogin(proxy.getGroup().getUsername());\n            ceProxy.setPassword(proxy.getGroup().getPassword());\n            call.setProxy(ceProxy);\n        }\n        HTTPCallAnalyzer analyzer = new HTTPCallAnalyzer();\n        ExecutionContext executionContext =new ExecutionContext();\n        call.setResponseVariableName(\"response\");\n        call.setAcceptedResponseCodes(List.of(200,201,202,203,204,205,206));\n        try {\n            NodeContext nodeContext = analyzer.execute(call, executionContext, new NodeContext());\n            result= \"\"+executionContext.get(\"response\");\n        } catch (Exception ce){\n            result = \"error \"+ce.getMessage();\n        }\n        return result;\n    }\n\n}\n",
        "executionRoles" : [ ],
        "sourcingRoles" : [ ],
        "mavenDependencies" : [ {
          "groupId" : "fr.webdrone",
          "artifactId" : "crawler-engine",
          "version" : "2.0.9",
          "coordinates" : "fr.webdrone:crawler-engine:2.0.9"
        } ],
        "importScriptInstances" : [ ]
      }, {
        "active" : true,
        "code" : "com.webdrone.geolite.GeoliteScript",
        "inputs" : [ ],
        "outputs" : [ {
          "name" : "geoLiteCountryDatabase",
          "type" : "GeoLiteReader",
          "description" : null
        }, {
          "name" : "geoLiteCityDatabase",
          "type" : "GeoLiteReader",
          "description" : null
        }, {
          "name" : "geoLiteISPDatabase",
          "type" : "GeoLiteReader",
          "description" : null
        }, {
          "name" : "geoliteDatabaseInputStream",
          "type" : "InputStream",
          "description" : null
        } ],
        "generateOutputs" : false,
        "type" : "JAVA",
        "transactionType" : "SAME",
        "script" : "package com.webdrone.geolite;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport java.io.IOException;\r\nimport java.net.InetAddress;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.node.JsonNodeFactory;\r\nimport com.fasterxml.jackson.databind.node.ObjectNode;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.Date;\r\nimport java.util.Properties;\r\n\r\nimport org.apache.commons.io.FileUtils;\r\nimport com.maxmind.db.MaxMindDbConstructor;\r\nimport com.maxmind.db.MaxMindDbParameter;\r\nimport com.maxmind.db.Reader;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.commons.utils.ParamBean;\r\nimport org.meveo.commons.utils.ParamBeanFactory;\r\n\r\n\r\npublic class GeoliteScript extends Script {\r\n\t\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tsuper.execute(parameters);\r\n\t}\r\n\r\n    public static final String GEOLITE_DATABASE_FILE = \"geolite/GeoLite2-Country.mmdb\";\r\n    public static final String GEOLITE_DATABASE_ARCHIVE_FILE = \"geolite/GeoLite2-Country.mmdb.tar.gz\";\r\n    public static final String GEOLITE_CHECKSUM_FILE = \"geolite/GeoLite2-Country.tar.gz.md5\";\r\n    public static final String GEOLITE_CITY_DATABASE_FILE = \"geolite/GeoLite2-City.mmdb\";\r\n    public static final String GEOLITE_CITY_DATABASE_ARCHIVE_FILE = \"geolite/GeoLite2-City.mmdb.tar.gz\";\r\n    public static final String GEOLITE_CITY_CHECKSUM_FILE = \"geolite/GeoLite2-City.tar.gz.md5\";\r\n    public static final String GEOLITE_ISP_DATABASE_FILE = \"geolite/GeoIP2-ISP.mmdb\";\r\n    public static final String GEOLITE_ISP_DATABASE_ARCHIVE_FILE = \"geolite/GeoIP2-ISP.mmdb.tar.gz\";\r\n    public static final String GEOLITE_ISP_CHECKSUM_FILE = \"geolite/GeoIP2-ISP.tar.gz.md5\";\r\n\r\n    private static GeoLiteReader geoLiteCountryReader;\r\n    private static GeoLiteReader geoLiteCityReader;\r\n    private static GeoLiteReader geoLiteISPReader;\r\n\r\n    private static Properties SYST_PROPS = System.getProperties();\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(GeoliteScript.class);\r\n  \r\n\tprivate ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\r\n\tprivate ParamBean config = paramBeanFactory.getInstance();\r\n    private String rootPath = config.getChrootDir(\"default\");\r\n  \r\n      public static class LookupResult {\r\n        private final Country country;\r\n\r\n        @MaxMindDbConstructor\r\n        public LookupResult (\r\n            @MaxMindDbParameter(name=\"country\") Country country\r\n        ) {\r\n            this.country = country;\r\n        }\r\n\r\n        public Country getCountry() {\r\n            return this.country;\r\n        }\r\n    }\r\n\r\n    public static class Country {\r\n        private final String isoCode;\r\n\r\n        @MaxMindDbConstructor\r\n        public Country (\r\n            @MaxMindDbParameter(name=\"iso_code\") String isoCode\r\n        ) {\r\n            this.isoCode = isoCode;\r\n        }\r\n\r\n        public String getIsoCode() {\r\n            return this.isoCode;\r\n        }\r\n    }\r\n  \r\n    public class GeoLiteReader {\r\n      private Reader reader;\r\n      public GeoLiteReader(Reader reader){\r\n          this.reader = reader;\r\n      }\r\n      public String get(InetAddress ipAddress) throws IOException{\r\n          LookupResult result = reader.get(ipAddress,LookupResult.class);\r\n          return result.getCountry().getIsoCode();\r\n          /*JsonNode jsonNode = reader.get(ipAddress,JsonNode.class);\r\n          if(jsonNode !=null){\r\n              JsonNode country = jsonNode.get(\"country\");\r\n              if(country!=null){\r\n                  String countryCode = country.get(\"iso_code\").asText();\r\n                  if(countryCode.equals(\"HK\")){\r\n                      ObjectNode countryNames = JsonNodeFactory.instance.objectNode();\r\n                      countryNames.put(\"en\", \"China\");\r\n                      countryNames.put(\"fr\", \"Chine\");\r\n                      countryNames.put(\"de\", \"China\");\r\n                      countryNames.put(\"ru\", \"Китай\");\r\n                      countryNames.put(\"ja\", \"中国\");\r\n                      countryNames.put(\"es\", \"China\");\r\n                      countryNames.put(\"zh-CN\", \"中国\");\r\n                      countryNames.put(\"pt-BR\", \"China\");\r\n                      ObjectNode countryNode = JsonNodeFactory.instance.objectNode();\r\n                      countryNode.put(\"iso_code\",\"CN\");\r\n                      countryNode.put(\"geoname_id\",1814991);\r\n                      countryNode.set(\"names\", countryNames);\r\n                      ObjectNode node = JsonNodeFactory.instance.objectNode();\r\n                      node.set(\"continent\", jsonNode.get(\"continent\"));\r\n                      node.set(\"country\", countryNode);\r\n                      node.set(\"registered_country\", countryNode);\r\n                      jsonNode = node;\r\n                      LOGGER.warn(\"Country HK override\");\r\n                  }\r\n              }\r\n          }\r\n          return jsonNode;*/\r\n    }\r\n\r\n    public void close() throws IOException {\r\n        if(this.reader!=null){\r\n            this.reader.close();\r\n        }\r\n    }\r\n  }\r\n\r\n\r\n    public  GeoLiteReader getGeoLiteCountryDatabase() throws IOException {\r\n        if (geoLiteCountryReader == null) {\r\n            File database = new File(rootPath + GEOLITE_DATABASE_FILE);\r\n            //DatabaseReader reader = new DatabaseReader.Builder(database).build();\r\n            InputStream databaseStream = FileUtils.openInputStream(database);\r\n            Reader reader = new Reader(databaseStream);\r\n            geoLiteCountryReader = new GeoLiteReader(reader);\r\n            checkBddBuilDate(reader, GeoliteScript.GEOLITE_CHECKSUM_FILE);\r\n        }\r\n        return geoLiteCountryReader;\r\n    }\r\n\r\n    public  GeoLiteReader getGeoLiteCityDatabase() throws IOException {\r\n        if (geoLiteCityReader == null) {\r\n            File database = new File(rootPath + GEOLITE_CITY_DATABASE_FILE);\r\n            //DatabaseReader reader = new DatabaseReader.Builder(database).build();\r\n            InputStream databaseStream = FileUtils.openInputStream(database);\r\n            Reader reader = new Reader(databaseStream);\r\n            geoLiteCityReader = new GeoLiteReader(reader);\r\n            checkBddBuilDate(reader, GeoliteScript.GEOLITE_CITY_CHECKSUM_FILE);\r\n        }\r\n        return geoLiteCityReader;\r\n    }\r\n\r\n    public GeoLiteReader getGeoLiteISPDatabase() throws IOException {\r\n        if (geoLiteISPReader == null) {\r\n            File database = new File(rootPath + GEOLITE_ISP_DATABASE_FILE);\r\n            //DatabaseReader reader = new DatabaseReader.Builder(database).build();\r\n            InputStream databaseStream = FileUtils.openInputStream(database);\r\n            Reader reader = new Reader(databaseStream);\r\n            geoLiteISPReader = new GeoLiteReader(reader);\r\n            checkBddBuilDate(reader, GeoliteScript.GEOLITE_ISP_CHECKSUM_FILE);\r\n        }\r\n        return geoLiteISPReader;\r\n    }\r\n\r\n    protected void checkBddBuilDate(Reader reader, String checkSumFile) {\r\n        Date geoLiteBddBuildDate = reader.getMetadata().getBuildDate();\r\n        if ((System.currentTimeMillis() - geoLiteBddBuildDate.getTime()) > (31l /* <= nb jours*/ *24*3600*1000)) {\r\n            LOGGER.error(\"Geolite BDD is not up to date :\" + geoLiteBddBuildDate + \". Program will remove checksumfile to force download\");\r\n            LOGGER.info(\"Geolite BDD should be updated each month\");\r\n            try {\r\n                FileUtils.forceDelete(new File(rootPath + checkSumFile));\r\n            } catch (FileNotFoundException e) {\r\n                //ignored\r\n            } catch (Exception e) {\r\n                LOGGER.error(e.getMessage(),e);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void invalidateCountryReader() {\r\n        if(geoLiteCountryReader!=null){\r\n            try {\r\n                geoLiteCountryReader.close();\r\n            } catch (IOException e) {\r\n                LOGGER.error(\" geoLiteCountryReader close failed \",e);\r\n            }\r\n        }\r\n        geoLiteCountryReader = null;\r\n    }\r\n\r\n    public static void invalidateCityReader() {\r\n        if(geoLiteCityReader!=null){\r\n            try {\r\n                geoLiteCityReader.close();\r\n            } catch (IOException e) {\r\n                LOGGER.error(\" geoLiteCityReader close failed \",e);\r\n            }\r\n        }\r\n        geoLiteCityReader = null;\r\n    }\r\n\r\n    public static void invalidateISPReader() {\r\n        if(geoLiteISPReader!=null){\r\n            try {\r\n                geoLiteISPReader.close();\r\n            } catch (IOException e) {\r\n                LOGGER.error(\" geoLiteISPReader close failed \",e);\r\n            }\r\n        }\r\n        geoLiteISPReader = null;\r\n    }\r\n\r\n    public InputStream getGeoliteDatabaseInputStream() throws IOException{\r\n        File database = new File(rootPath + GEOLITE_DATABASE_FILE);\r\n        InputStream databaseStream = new FileInputStream(database);\r\n        return databaseStream;\r\n    }\r\n\r\n    public static void invalidate(String databaseFile) {\r\n        if (GEOLITE_DATABASE_FILE.equals(databaseFile))\r\n            invalidateCountryReader();\r\n        else if (GEOLITE_CITY_DATABASE_FILE.equals(databaseFile))\r\n            invalidateCityReader();\r\n        else\r\n            invalidateISPReader();\r\n    }\r\n}",
        "executionRoles" : [ ],
        "sourcingRoles" : [ ],
        "mavenDependencies" : [ {
          "groupId" : "com.maxmind.db",
          "artifactId" : "maxmind-db",
          "version" : "2.0.0",
          "coordinates" : "com.maxmind.db:maxmind-db:2.0.0"
        } ],
        "importScriptInstances" : [ ]
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "PROXY_GROUP",
      "name" : "Group",
      "description" : "Proxies of a provider grouped for provisionning",
      "customEntityCategoryCode" : "PROXY",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "code",
        "description" : "group code used for provisionning",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY_GROUP",
        "appliesTo" : "CE_PROXY_GROUP",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy group:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "creationDate",
        "description" : "creation date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_PROXY_GROUP",
        "appliesTo" : "CE_PROXY_GROUP",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy group:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "deletionDate",
        "description" : "Deletion date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_PROXY_GROUP",
        "appliesTo" : "CE_PROXY_GROUP",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy group:0;field:6",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "deployedAppInstance",
        "description" : "Deployed App Instance",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_PROXY_GROUP",
        "appliesTo" : "CE_PROXY_GROUP",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - ApplicationInstance",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy group:0;field:9",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "entityClazzCetCode" : "ApplicationInstance",
        "matrixColumns" : [ ]
      }, {
        "code" : "ip",
        "description" : "ip v4 or v6",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY_GROUP",
        "appliesTo" : "CE_PROXY_GROUP",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy group:0;field:7",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "lastTest",
        "description" : "Last test",
        "fieldType" : "DATE",
        "accountLevel" : "CE_PROXY_GROUP",
        "appliesTo" : "CE_PROXY_GROUP",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy group:0;field:10",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "location",
        "description" : "location of the proxies",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY_GROUP",
        "appliesTo" : "CE_PROXY_GROUP",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy group:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "provider",
        "description" : "provider",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_PROXY_GROUP",
        "appliesTo" : "CE_PROXY_GROUP",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : true,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - PROXY_PROVIDER",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy group:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "entityClazzCetCode" : "PROXY_PROVIDER",
        "matrixColumns" : [ ]
      }, {
        "code" : "proxyCount",
        "description" : "#public IP when the group has an IP",
        "fieldType" : "LONG",
        "accountLevel" : "CE_PROXY_GROUP",
        "appliesTo" : "CE_PROXY_GROUP",
        "defaultValue" : "0",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 10000,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy group:0;field:8",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "username",
        "description" : "proxy auth username",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY_GROUP",
        "appliesTo" : "CE_PROXY_GROUP",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy group:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "password",
        "description" : "proxy password",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY_GROUP",
        "appliesTo" : "CE_PROXY_GROUP",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy group:0;field:5",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ {
        "code" : "testLocalization",
        "description" : "test localization",
        "appliesTo" : "CE_PROXY_GROUP",
        "label" : "Test localization",
        "script" : "com.webdrone.proxy.test.ProxyLocalizationTestScript",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      }, {
        "code" : "listProxy",
        "description" : "List proxies of a group",
        "appliesTo" : "CE_PROXY_GROUP",
        "label" : "List proxies",
        "script" : "com.webdrone.proxy.ProxyActionHandler",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      }, {
        "code" : "DeployToApp",
        "description" : "Deploy to application instance",
        "appliesTo" : "CE_PROXY_GROUP",
        "applicableOnEl" : "#{(entity != null)}",
        "label" : "Deploy to App",
        "script" : "com.webdrone.proxy.deployment.WebdroneApiV1",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      }, {
        "code" : "getDetails",
        "description" : "get detail from app",
        "appliesTo" : "CE_PROXY_GROUP",
        "applicableOnEl" : "#{entity.cfValues.getCfValue(\"deployedAppInstance\") ne null}",
        "label" : "Get detail from API",
        "script" : "com.webdrone.proxy.deployment.WebdroneApiV1",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "PROXY",
      "name" : "Proxy",
      "description" : "Proxy",
      "customEntityCategoryCode" : "PROXY",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "creationDate",
        "description" : "creation date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_PROXY",
        "appliesTo" : "CE_PROXY",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : false,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy:0;field:5",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "group",
        "description" : "group",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_PROXY",
        "appliesTo" : "CE_PROXY",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - PROXY_GROUP",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "entityClazzCetCode" : "PROXY_GROUP",
        "matrixColumns" : [ ]
      }, {
        "code" : "ip",
        "description" : "ip v4 or v6",
        "fieldType" : "STRING",
        "accountLevel" : "CE_PROXY",
        "appliesTo" : "CE_PROXY",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "lastUpdate",
        "description" : "last update",
        "fieldType" : "DATE",
        "accountLevel" : "CE_PROXY",
        "appliesTo" : "CE_PROXY",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy:0;field:6",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "port",
        "description" : "port",
        "fieldType" : "LONG",
        "accountLevel" : "CE_PROXY",
        "appliesTo" : "CE_PROXY",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "provider",
        "description" : "provider",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_PROXY",
        "appliesTo" : "CE_PROXY",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : true,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - PROXY_PROVIDER",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "entityClazzCetCode" : "PROXY_PROVIDER",
        "matrixColumns" : [ ]
      }, {
        "code" : "status",
        "description" : "status",
        "fieldType" : "LIST",
        "accountLevel" : "CE_PROXY",
        "appliesTo" : "CE_PROXY",
        "defaultValue" : "ACTIVE",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : true,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : {
          "ACTIVE" : "Active",
          "INACTIVE" : "Inactive",
          "SUSPECT" : "Suspect"
        },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "testLog",
        "description" : "Last test log",
        "fieldType" : "LONG_TEXT",
        "accountLevel" : "CE_PROXY",
        "appliesTo" : "CE_PROXY",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Proxy:0;field:7",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "FLEXIBLE_IP",
      "name" : "Flexible IP",
      "description" : "Flexible IP",
      "customEntityCategoryCode" : "INFRA",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : false
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "CREATION_DATE",
        "description" : "Creation date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_FLEXIBLE_IP",
        "appliesTo" : "CE_FLEXIBLE_IP",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Flexible IP:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "LAST_UPDATE",
        "description" : "Last update",
        "fieldType" : "DATE",
        "accountLevel" : "CE_FLEXIBLE_IP",
        "appliesTo" : "CE_FLEXIBLE_IP",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Flexible IP:0;field:5",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "ORGANIZATION",
        "description" : "Organization",
        "fieldType" : "STRING",
        "accountLevel" : "CE_FLEXIBLE_IP",
        "appliesTo" : "CE_FLEXIBLE_IP",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Flexible IP:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "SERVER",
        "description" : "Server",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_FLEXIBLE_IP",
        "appliesTo" : "CE_FLEXIBLE_IP",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - SERVER",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Flexible IP:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "entityClazzCetCode" : "SERVER",
        "matrixColumns" : [ ]
      }, {
        "code" : "ZONE",
        "description" : "Zone",
        "fieldType" : "STRING",
        "accountLevel" : "CE_FLEXIBLE_IP",
        "appliesTo" : "CE_FLEXIBLE_IP",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Flexible IP:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ ]
    }
  } ],
  "moduleDependencies" : [ {
    "code" : "CREDENTIALS",
    "description" : "credentials",
    "currentVersion" : "1.1.0"
  } ],
  "moduleFiles" : [ ]
} ]